type A implements Node {
  id: ID!
  x: TypeWithId!
  y: TypeWithoutId!
}

"""
A connection to a list of items.
"""
type AConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [AEdge]!
  aggregate: AggregateA!
}

input ACreateInput {
  id: ID
  x: TypeWithIdCreateOneInput!
  y: TypeWithoutIdCreateOneInput!
}

"""
An edge in a connection.
"""
type AEdge {
  """
  The item at the end of the edge.
  """
  node: A!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type AggregateA {
  count: Int!
}

type AggregateB {
  count: Int!
}

type AggregateC {
  count: Int!
}

type AggregateD {
  count: Int!
}

type AggregateE {
  count: Int!
}

type AggregateF {
  count: Int!
}

type AggregateTypeWithId {
  count: Int!
}

type AggregateTypeWithoutId {
  count: Int!
}

enum AOrderByInput {
  id_ASC
  id_DESC
}

type APreviousValues {
  id: ID!
}

type ASubscriptionPayload {
  mutation: MutationType!
  node: A
  updatedFields: [String!]
  previousValues: APreviousValues
}

input ASubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ASubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AWhereInput
}

input AUpdateInput {
  x: TypeWithIdUpdateOneRequiredInput
  y: TypeWithoutIdUpdateOneRequiredInput
}

input AWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  x: TypeWithIdWhereInput
  y: TypeWithoutIdWhereInput
}

input AWhereUniqueInput {
  id: ID
}

type B implements Node {
  id: ID!
  x: TypeWithId
  y: TypeWithoutId
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type BConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [BEdge]!
  aggregate: AggregateB!
}

input BCreateInput {
  id: ID
  x: TypeWithIdCreateOneInput
  y: TypeWithoutIdCreateOneInput
}

"""
An edge in a connection.
"""
type BEdge {
  """
  The item at the end of the edge.
  """
  node: B!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BOrderByInput {
  id_ASC
  id_DESC
}

type BPreviousValues {
  id: ID!
}

type BSubscriptionPayload {
  mutation: MutationType!
  node: B
  updatedFields: [String!]
  previousValues: BPreviousValues
}

input BSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BWhereInput
}

input BUpdateInput {
  x: TypeWithIdUpdateOneInput
  y: TypeWithoutIdUpdateOneInput
}

input BWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  x: TypeWithIdWhereInput
  y: TypeWithoutIdWhereInput
}

input BWhereUniqueInput {
  id: ID
}

type C implements Node {
  id: ID!
  x(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithId!]
  y(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithoutId!]
}

"""
A connection to a list of items.
"""
type CConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CEdge]!
  aggregate: AggregateC!
}

input CCreateInput {
  id: ID
  x: TypeWithIdCreateManyInput
  y: TypeWithoutIdCreateManyInput
}

"""
An edge in a connection.
"""
type CEdge {
  """
  The item at the end of the edge.
  """
  node: C!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum COrderByInput {
  id_ASC
  id_DESC
}

type CPreviousValues {
  id: ID!
}

type CSubscriptionPayload {
  mutation: MutationType!
  node: C
  updatedFields: [String!]
  previousValues: CPreviousValues
}

input CSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CWhereInput
}

input CUpdateInput {
  x: TypeWithIdUpdateManyInput
  y: TypeWithoutIdUpdateManyInput
}

input CWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  x_some: TypeWithIdWhereInput
  y_some: TypeWithoutIdWhereInput
}

input CWhereUniqueInput {
  id: ID
}

type D implements Node {
  id: ID!
  x: TypeWithId!
  y: TypeWithoutId!
}

"""
A connection to a list of items.
"""
type DConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [DEdge]!
  aggregate: AggregateD!
}

input DCreateInput {
  id: ID
  x: TypeWithIdCreateOneInput!
  y: TypeWithoutIdCreateOneInput!
}

"""
An edge in a connection.
"""
type DEdge {
  """
  The item at the end of the edge.
  """
  node: D!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum DOrderByInput {
  id_ASC
  id_DESC
}

type DPreviousValues {
  id: ID!
}

type DSubscriptionPayload {
  mutation: MutationType!
  node: D
  updatedFields: [String!]
  previousValues: DPreviousValues
}

input DSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DWhereInput
}

input DUpdateInput {
  x: TypeWithIdUpdateOneRequiredInput
  y: TypeWithoutIdUpdateOneRequiredInput
}

input DWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [DWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  x: TypeWithIdWhereInput
  y: TypeWithoutIdWhereInput
}

input DWhereUniqueInput {
  id: ID
}

type E implements Node {
  id: ID!
  x: TypeWithId
  y: TypeWithoutId
}

"""
A connection to a list of items.
"""
type EConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [EEdge]!
  aggregate: AggregateE!
}

input ECreateInput {
  id: ID
  x: TypeWithIdCreateOneInput
  y: TypeWithoutIdCreateOneInput
}

"""
An edge in a connection.
"""
type EEdge {
  """
  The item at the end of the edge.
  """
  node: E!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum EOrderByInput {
  id_ASC
  id_DESC
}

type EPreviousValues {
  id: ID!
}

type ESubscriptionPayload {
  mutation: MutationType!
  node: E
  updatedFields: [String!]
  previousValues: EPreviousValues
}

input ESubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ESubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EWhereInput
}

input EUpdateInput {
  x: TypeWithIdUpdateOneInput
  y: TypeWithoutIdUpdateOneInput
}

input EWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  x: TypeWithIdWhereInput
  y: TypeWithoutIdWhereInput
}

input EWhereUniqueInput {
  id: ID
}

type F implements Node {
  id: ID!
  x(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithId!]
  y(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithoutId!]
}

"""
A connection to a list of items.
"""
type FConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FEdge]!
  aggregate: AggregateF!
}

input FCreateInput {
  id: ID
  x: TypeWithIdCreateManyInput
  y: TypeWithoutIdCreateManyInput
}

"""
An edge in a connection.
"""
type FEdge {
  """
  The item at the end of the edge.
  """
  node: F!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FOrderByInput {
  id_ASC
  id_DESC
}

type FPreviousValues {
  id: ID!
}

type FSubscriptionPayload {
  mutation: MutationType!
  node: F
  updatedFields: [String!]
  previousValues: FPreviousValues
}

input FSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FWhereInput
}

input FUpdateInput {
  x: TypeWithIdUpdateManyInput
  y: TypeWithoutIdUpdateManyInput
}

input FWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  x_some: TypeWithIdWhereInput
  y_some: TypeWithoutIdWhereInput
}

input FWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createA(data: ACreateInput!): A!
  createB(data: BCreateInput!): B!
  createC(data: CCreateInput!): C!
  createD(data: DCreateInput!): D!
  createE(data: ECreateInput!): E!
  createF(data: FCreateInput!): F!
  createTypeWithoutId(data: TypeWithoutIdCreateInput!): TypeWithoutId!
  createTypeWithId(data: TypeWithIdCreateInput!): TypeWithId!
  updateA(data: AUpdateInput!, where: AWhereUniqueInput!): A
  updateB(data: BUpdateInput!, where: BWhereUniqueInput!): B
  updateC(data: CUpdateInput!, where: CWhereUniqueInput!): C
  updateD(data: DUpdateInput!, where: DWhereUniqueInput!): D
  updateE(data: EUpdateInput!, where: EWhereUniqueInput!): E
  updateF(data: FUpdateInput!, where: FWhereUniqueInput!): F
  updateTypeWithoutId(data: TypeWithoutIdUpdateInput!, where: TypeWithoutIdWhereUniqueInput!): TypeWithoutId
  updateTypeWithId(data: TypeWithIdUpdateInput!, where: TypeWithIdWhereUniqueInput!): TypeWithId
  deleteA(where: AWhereUniqueInput!): A
  deleteB(where: BWhereUniqueInput!): B
  deleteC(where: CWhereUniqueInput!): C
  deleteD(where: DWhereUniqueInput!): D
  deleteE(where: EWhereUniqueInput!): E
  deleteF(where: FWhereUniqueInput!): F
  deleteTypeWithoutId(where: TypeWithoutIdWhereUniqueInput!): TypeWithoutId
  deleteTypeWithId(where: TypeWithIdWhereUniqueInput!): TypeWithId
  upsertA(where: AWhereUniqueInput!, create: ACreateInput!, update: AUpdateInput!): A!
  upsertB(where: BWhereUniqueInput!, create: BCreateInput!, update: BUpdateInput!): B!
  upsertC(where: CWhereUniqueInput!, create: CCreateInput!, update: CUpdateInput!): C!
  upsertD(where: DWhereUniqueInput!, create: DCreateInput!, update: DUpdateInput!): D!
  upsertE(where: EWhereUniqueInput!, create: ECreateInput!, update: EUpdateInput!): E!
  upsertF(where: FWhereUniqueInput!, create: FCreateInput!, update: FUpdateInput!): F!
  upsertTypeWithoutId(where: TypeWithoutIdWhereUniqueInput!, create: TypeWithoutIdCreateInput!, update: TypeWithoutIdUpdateInput!): TypeWithoutId!
  upsertTypeWithId(where: TypeWithIdWhereUniqueInput!, create: TypeWithIdCreateInput!, update: TypeWithIdUpdateInput!): TypeWithId!
  updateManyTypeWithoutIds(data: TypeWithoutIdUpdateManyMutationInput!, where: TypeWithoutIdWhereInput): BatchPayload!
  updateManyTypeWithIds(data: TypeWithIdUpdateManyMutationInput!, where: TypeWithIdWhereInput): BatchPayload!
  deleteManyAs(where: AWhereInput): BatchPayload!
  deleteManyBs(where: BWhereInput): BatchPayload!
  deleteManyCs(where: CWhereInput): BatchPayload!
  deleteManyDs(where: DWhereInput): BatchPayload!
  deleteManyEs(where: EWhereInput): BatchPayload!
  deleteManyFs(where: FWhereInput): BatchPayload!
  deleteManyTypeWithoutIds(where: TypeWithoutIdWhereInput): BatchPayload!
  deleteManyTypeWithIds(where: TypeWithIdWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  as(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [A]!
  bs(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [B]!
  cs(where: CWhereInput, orderBy: COrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [C]!
  ds(where: DWhereInput, orderBy: DOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [D]!
  es(where: EWhereInput, orderBy: EOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [E]!
  fs(where: FWhereInput, orderBy: FOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [F]!
  typeWithoutIds(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithoutId]!
  typeWithIds(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithId]!
  a(where: AWhereUniqueInput!): A
  b(where: BWhereUniqueInput!): B
  c(where: CWhereUniqueInput!): C
  d(where: DWhereUniqueInput!): D
  e(where: EWhereUniqueInput!): E
  f(where: FWhereUniqueInput!): F
  typeWithoutId(where: TypeWithoutIdWhereUniqueInput!): TypeWithoutId
  typeWithId(where: TypeWithIdWhereUniqueInput!): TypeWithId
  asConnection(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AConnection!
  bsConnection(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BConnection!
  csConnection(where: CWhereInput, orderBy: COrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CConnection!
  dsConnection(where: DWhereInput, orderBy: DOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DConnection!
  esConnection(where: EWhereInput, orderBy: EOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EConnection!
  fsConnection(where: FWhereInput, orderBy: FOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FConnection!
  typeWithoutIdsConnection(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TypeWithoutIdConnection!
  typeWithIdsConnection(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TypeWithIdConnection!
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Subscription {
  a(where: ASubscriptionWhereInput): ASubscriptionPayload
  b(where: BSubscriptionWhereInput): BSubscriptionPayload
  c(where: CSubscriptionWhereInput): CSubscriptionPayload
  d(where: DSubscriptionWhereInput): DSubscriptionPayload
  e(where: ESubscriptionWhereInput): ESubscriptionPayload
  f(where: FSubscriptionWhereInput): FSubscriptionPayload
  typeWithoutId(where: TypeWithoutIdSubscriptionWhereInput): TypeWithoutIdSubscriptionPayload
  typeWithId(where: TypeWithIdSubscriptionWhereInput): TypeWithIdSubscriptionPayload
}

type TypeWithId implements Node {
  id: ID!
  field: String!
}

"""
A connection to a list of items.
"""
type TypeWithIdConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [TypeWithIdEdge]!
  aggregate: AggregateTypeWithId!
}

input TypeWithIdCreateInput {
  id: ID
  field: String!
}

input TypeWithIdCreateManyInput {
  create: [TypeWithIdCreateInput!]
  connect: [TypeWithIdWhereUniqueInput!]
}

input TypeWithIdCreateOneInput {
  create: TypeWithIdCreateInput
  connect: TypeWithIdWhereUniqueInput
}

"""
An edge in a connection.
"""
type TypeWithIdEdge {
  """
  The item at the end of the edge.
  """
  node: TypeWithId!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TypeWithIdOrderByInput {
  id_ASC
  id_DESC
  field_ASC
  field_DESC
}

type TypeWithIdPreviousValues {
  id: ID!
  field: String!
}

input TypeWithIdScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TypeWithIdScalarWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TypeWithIdScalarWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TypeWithIdScalarWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  field: String
  """
  All values that are not equal to given value.
  """
  field_not: String
  """
  All values that are contained in given list.
  """
  field_in: [String!]
  """
  All values that are not contained in given list.
  """
  field_not_in: [String!]
  """
  All values less than the given value.
  """
  field_lt: String
  """
  All values less than or equal the given value.
  """
  field_lte: String
  """
  All values greater than the given value.
  """
  field_gt: String
  """
  All values greater than or equal the given value.
  """
  field_gte: String
  """
  All values containing the given string.
  """
  field_contains: String
  """
  All values not containing the given string.
  """
  field_not_contains: String
  """
  All values starting with the given string.
  """
  field_starts_with: String
  """
  All values not starting with the given string.
  """
  field_not_starts_with: String
  """
  All values ending with the given string.
  """
  field_ends_with: String
  """
  All values not ending with the given string.
  """
  field_not_ends_with: String
}

type TypeWithIdSubscriptionPayload {
  mutation: MutationType!
  node: TypeWithId
  updatedFields: [String!]
  previousValues: TypeWithIdPreviousValues
}

input TypeWithIdSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TypeWithIdSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TypeWithIdWhereInput
}

input TypeWithIdUpdateDataInput {
  field: String
}

input TypeWithIdUpdateInput {
  field: String
}

input TypeWithIdUpdateManyDataInput {
  field: String
}

input TypeWithIdUpdateManyInput {
  create: [TypeWithIdCreateInput!]
  connect: [TypeWithIdWhereUniqueInput!]
  set: [TypeWithIdWhereUniqueInput!]
  disconnect: [TypeWithIdWhereUniqueInput!]
  delete: [TypeWithIdWhereUniqueInput!]
  update: [TypeWithIdUpdateWithWhereUniqueNestedInput!]
  updateMany: [TypeWithIdUpdateManyWithWhereNestedInput!]
  deleteMany: [TypeWithIdScalarWhereInput!]
  upsert: [TypeWithIdUpsertWithWhereUniqueNestedInput!]
}

input TypeWithIdUpdateManyMutationInput {
  field: String
}

input TypeWithIdUpdateManyWithWhereNestedInput {
  where: TypeWithIdScalarWhereInput!
  data: TypeWithIdUpdateManyDataInput!
}

input TypeWithIdUpdateOneInput {
  create: TypeWithIdCreateInput
  connect: TypeWithIdWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TypeWithIdUpdateDataInput
  upsert: TypeWithIdUpsertNestedInput
}

input TypeWithIdUpdateOneRequiredInput {
  create: TypeWithIdCreateInput
  connect: TypeWithIdWhereUniqueInput
  update: TypeWithIdUpdateDataInput
  upsert: TypeWithIdUpsertNestedInput
}

input TypeWithIdUpdateWithWhereUniqueNestedInput {
  where: TypeWithIdWhereUniqueInput!
  data: TypeWithIdUpdateDataInput!
}

input TypeWithIdUpsertNestedInput {
  update: TypeWithIdUpdateDataInput!
  create: TypeWithIdCreateInput!
}

input TypeWithIdUpsertWithWhereUniqueNestedInput {
  where: TypeWithIdWhereUniqueInput!
  update: TypeWithIdUpdateDataInput!
  create: TypeWithIdCreateInput!
}

input TypeWithIdWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TypeWithIdWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  field: String
  """
  All values that are not equal to given value.
  """
  field_not: String
  """
  All values that are contained in given list.
  """
  field_in: [String!]
  """
  All values that are not contained in given list.
  """
  field_not_in: [String!]
  """
  All values less than the given value.
  """
  field_lt: String
  """
  All values less than or equal the given value.
  """
  field_lte: String
  """
  All values greater than the given value.
  """
  field_gt: String
  """
  All values greater than or equal the given value.
  """
  field_gte: String
  """
  All values containing the given string.
  """
  field_contains: String
  """
  All values not containing the given string.
  """
  field_not_contains: String
  """
  All values starting with the given string.
  """
  field_starts_with: String
  """
  All values not starting with the given string.
  """
  field_not_starts_with: String
  """
  All values ending with the given string.
  """
  field_ends_with: String
  """
  All values not ending with the given string.
  """
  field_not_ends_with: String
}

input TypeWithIdWhereUniqueInput {
  id: ID
}

type TypeWithoutId implements Node {
  id: ID!
  field: String!
}

"""
A connection to a list of items.
"""
type TypeWithoutIdConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [TypeWithoutIdEdge]!
  aggregate: AggregateTypeWithoutId!
}

input TypeWithoutIdCreateInput {
  id: ID
  field: String!
}

input TypeWithoutIdCreateManyInput {
  create: [TypeWithoutIdCreateInput!]
  connect: [TypeWithoutIdWhereUniqueInput!]
}

input TypeWithoutIdCreateOneInput {
  create: TypeWithoutIdCreateInput
  connect: TypeWithoutIdWhereUniqueInput
}

"""
An edge in a connection.
"""
type TypeWithoutIdEdge {
  """
  The item at the end of the edge.
  """
  node: TypeWithoutId!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TypeWithoutIdOrderByInput {
  id_ASC
  id_DESC
  field_ASC
  field_DESC
}

type TypeWithoutIdPreviousValues {
  id: ID!
  field: String!
}

input TypeWithoutIdScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TypeWithoutIdScalarWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TypeWithoutIdScalarWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TypeWithoutIdScalarWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  field: String
  """
  All values that are not equal to given value.
  """
  field_not: String
  """
  All values that are contained in given list.
  """
  field_in: [String!]
  """
  All values that are not contained in given list.
  """
  field_not_in: [String!]
  """
  All values less than the given value.
  """
  field_lt: String
  """
  All values less than or equal the given value.
  """
  field_lte: String
  """
  All values greater than the given value.
  """
  field_gt: String
  """
  All values greater than or equal the given value.
  """
  field_gte: String
  """
  All values containing the given string.
  """
  field_contains: String
  """
  All values not containing the given string.
  """
  field_not_contains: String
  """
  All values starting with the given string.
  """
  field_starts_with: String
  """
  All values not starting with the given string.
  """
  field_not_starts_with: String
  """
  All values ending with the given string.
  """
  field_ends_with: String
  """
  All values not ending with the given string.
  """
  field_not_ends_with: String
}

type TypeWithoutIdSubscriptionPayload {
  mutation: MutationType!
  node: TypeWithoutId
  updatedFields: [String!]
  previousValues: TypeWithoutIdPreviousValues
}

input TypeWithoutIdSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TypeWithoutIdSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TypeWithoutIdWhereInput
}

input TypeWithoutIdUpdateDataInput {
  field: String
}

input TypeWithoutIdUpdateInput {
  field: String
}

input TypeWithoutIdUpdateManyDataInput {
  field: String
}

input TypeWithoutIdUpdateManyInput {
  create: [TypeWithoutIdCreateInput!]
  connect: [TypeWithoutIdWhereUniqueInput!]
  set: [TypeWithoutIdWhereUniqueInput!]
  disconnect: [TypeWithoutIdWhereUniqueInput!]
  delete: [TypeWithoutIdWhereUniqueInput!]
  update: [TypeWithoutIdUpdateWithWhereUniqueNestedInput!]
  updateMany: [TypeWithoutIdUpdateManyWithWhereNestedInput!]
  deleteMany: [TypeWithoutIdScalarWhereInput!]
  upsert: [TypeWithoutIdUpsertWithWhereUniqueNestedInput!]
}

input TypeWithoutIdUpdateManyMutationInput {
  field: String
}

input TypeWithoutIdUpdateManyWithWhereNestedInput {
  where: TypeWithoutIdScalarWhereInput!
  data: TypeWithoutIdUpdateManyDataInput!
}

input TypeWithoutIdUpdateOneInput {
  create: TypeWithoutIdCreateInput
  connect: TypeWithoutIdWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TypeWithoutIdUpdateDataInput
  upsert: TypeWithoutIdUpsertNestedInput
}

input TypeWithoutIdUpdateOneRequiredInput {
  create: TypeWithoutIdCreateInput
  connect: TypeWithoutIdWhereUniqueInput
  update: TypeWithoutIdUpdateDataInput
  upsert: TypeWithoutIdUpsertNestedInput
}

input TypeWithoutIdUpdateWithWhereUniqueNestedInput {
  where: TypeWithoutIdWhereUniqueInput!
  data: TypeWithoutIdUpdateDataInput!
}

input TypeWithoutIdUpsertNestedInput {
  update: TypeWithoutIdUpdateDataInput!
  create: TypeWithoutIdCreateInput!
}

input TypeWithoutIdUpsertWithWhereUniqueNestedInput {
  where: TypeWithoutIdWhereUniqueInput!
  update: TypeWithoutIdUpdateDataInput!
  create: TypeWithoutIdCreateInput!
}

input TypeWithoutIdWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TypeWithoutIdWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  field: String
  """
  All values that are not equal to given value.
  """
  field_not: String
  """
  All values that are contained in given list.
  """
  field_in: [String!]
  """
  All values that are not contained in given list.
  """
  field_not_in: [String!]
  """
  All values less than the given value.
  """
  field_lt: String
  """
  All values less than or equal the given value.
  """
  field_lte: String
  """
  All values greater than the given value.
  """
  field_gt: String
  """
  All values greater than or equal the given value.
  """
  field_gte: String
  """
  All values containing the given string.
  """
  field_contains: String
  """
  All values not containing the given string.
  """
  field_not_contains: String
  """
  All values starting with the given string.
  """
  field_starts_with: String
  """
  All values not starting with the given string.
  """
  field_not_starts_with: String
  """
  All values ending with the given string.
  """
  field_ends_with: String
  """
  All values not ending with the given string.
  """
  field_not_ends_with: String
}

input TypeWithoutIdWhereUniqueInput {
  id: ID
}

