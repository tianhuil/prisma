type AggregateTypeWithId {
  count: Int!
}

type AggregateTypeWithoutId {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createTypeWithId(data: TypeWithIdCreateInput!): TypeWithId!
  createTypeWithoutId(data: TypeWithoutIdCreateInput!): TypeWithoutId!
  updateTypeWithId(data: TypeWithIdUpdateInput!, where: TypeWithIdWhereUniqueInput!): TypeWithId
  updateTypeWithoutId(data: TypeWithoutIdUpdateInput!, where: TypeWithoutIdWhereUniqueInput!): TypeWithoutId
  deleteTypeWithId(where: TypeWithIdWhereUniqueInput!): TypeWithId
  deleteTypeWithoutId(where: TypeWithoutIdWhereUniqueInput!): TypeWithoutId
  upsertTypeWithId(where: TypeWithIdWhereUniqueInput!, create: TypeWithIdCreateInput!, update: TypeWithIdUpdateInput!): TypeWithId!
  upsertTypeWithoutId(where: TypeWithoutIdWhereUniqueInput!, create: TypeWithoutIdCreateInput!, update: TypeWithoutIdUpdateInput!): TypeWithoutId!
  updateManyTypeWithIds(data: TypeWithIdUpdateManyMutationInput!, where: TypeWithIdWhereInput): BatchPayload!
  updateManyTypeWithoutIds(data: TypeWithoutIdUpdateManyMutationInput!, where: TypeWithoutIdWhereInput): BatchPayload!
  deleteManyTypeWithIds(where: TypeWithIdWhereInput): BatchPayload!
  deleteManyTypeWithoutIds(where: TypeWithoutIdWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  typeWithIds(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithId]!
  typeWithoutIds(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TypeWithoutId]!
  typeWithId(where: TypeWithIdWhereUniqueInput!): TypeWithId
  typeWithoutId(where: TypeWithoutIdWhereUniqueInput!): TypeWithoutId
  typeWithIdsConnection(where: TypeWithIdWhereInput, orderBy: TypeWithIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TypeWithIdConnection!
  typeWithoutIdsConnection(where: TypeWithoutIdWhereInput, orderBy: TypeWithoutIdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TypeWithoutIdConnection!
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Subscription {
  typeWithId(where: TypeWithIdSubscriptionWhereInput): TypeWithIdSubscriptionPayload
  typeWithoutId(where: TypeWithoutIdSubscriptionWhereInput): TypeWithoutIdSubscriptionPayload
}

type TypeWithId implements Node {
  id: ID!
  field: String!
}

"""
A connection to a list of items.
"""
type TypeWithIdConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [TypeWithIdEdge]!
  aggregate: AggregateTypeWithId!
}

input TypeWithIdCreateInput {
  id: ID
  field: String!
}

"""
An edge in a connection.
"""
type TypeWithIdEdge {
  """
  The item at the end of the edge.
  """
  node: TypeWithId!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TypeWithIdOrderByInput {
  id_ASC
  id_DESC
  field_ASC
  field_DESC
}

type TypeWithIdPreviousValues {
  id: ID!
  field: String!
}

type TypeWithIdSubscriptionPayload {
  mutation: MutationType!
  node: TypeWithId
  updatedFields: [String!]
  previousValues: TypeWithIdPreviousValues
}

input TypeWithIdSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TypeWithIdSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TypeWithIdWhereInput
}

input TypeWithIdUpdateInput {
  field: String
}

input TypeWithIdUpdateManyMutationInput {
  field: String
}

input TypeWithIdWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TypeWithIdWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  field: String
  """
  All values that are not equal to given value.
  """
  field_not: String
  """
  All values that are contained in given list.
  """
  field_in: [String!]
  """
  All values that are not contained in given list.
  """
  field_not_in: [String!]
  """
  All values less than the given value.
  """
  field_lt: String
  """
  All values less than or equal the given value.
  """
  field_lte: String
  """
  All values greater than the given value.
  """
  field_gt: String
  """
  All values greater than or equal the given value.
  """
  field_gte: String
  """
  All values containing the given string.
  """
  field_contains: String
  """
  All values not containing the given string.
  """
  field_not_contains: String
  """
  All values starting with the given string.
  """
  field_starts_with: String
  """
  All values not starting with the given string.
  """
  field_not_starts_with: String
  """
  All values ending with the given string.
  """
  field_ends_with: String
  """
  All values not ending with the given string.
  """
  field_not_ends_with: String
}

input TypeWithIdWhereUniqueInput {
  id: ID
}

type TypeWithoutId {
  removeThisIdd: ID!
  field: String!
}

"""
A connection to a list of items.
"""
type TypeWithoutIdConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [TypeWithoutIdEdge]!
  aggregate: AggregateTypeWithoutId!
}

input TypeWithoutIdCreateInput {
  removeThisIdd: ID
  field: String!
}

"""
An edge in a connection.
"""
type TypeWithoutIdEdge {
  """
  The item at the end of the edge.
  """
  node: TypeWithoutId!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TypeWithoutIdOrderByInput {
  removeThisIdd_ASC
  removeThisIdd_DESC
  field_ASC
  field_DESC
}

type TypeWithoutIdPreviousValues {
  removeThisIdd: ID!
  field: String!
}

type TypeWithoutIdSubscriptionPayload {
  mutation: MutationType!
  node: TypeWithoutId
  updatedFields: [String!]
  previousValues: TypeWithoutIdPreviousValues
}

input TypeWithoutIdSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TypeWithoutIdSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TypeWithoutIdWhereInput
}

input TypeWithoutIdUpdateInput {
  field: String
}

input TypeWithoutIdUpdateManyMutationInput {
  field: String
}

input TypeWithoutIdWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TypeWithoutIdWhereInput!]
  removeThisIdd: ID
  """
  All values that are not equal to given value.
  """
  removeThisIdd_not: ID
  """
  All values that are contained in given list.
  """
  removeThisIdd_in: [ID!]
  """
  All values that are not contained in given list.
  """
  removeThisIdd_not_in: [ID!]
  """
  All values less than the given value.
  """
  removeThisIdd_lt: ID
  """
  All values less than or equal the given value.
  """
  removeThisIdd_lte: ID
  """
  All values greater than the given value.
  """
  removeThisIdd_gt: ID
  """
  All values greater than or equal the given value.
  """
  removeThisIdd_gte: ID
  """
  All values containing the given string.
  """
  removeThisIdd_contains: ID
  """
  All values not containing the given string.
  """
  removeThisIdd_not_contains: ID
  """
  All values starting with the given string.
  """
  removeThisIdd_starts_with: ID
  """
  All values not starting with the given string.
  """
  removeThisIdd_not_starts_with: ID
  """
  All values ending with the given string.
  """
  removeThisIdd_ends_with: ID
  """
  All values not ending with the given string.
  """
  removeThisIdd_not_ends_with: ID
  field: String
  """
  All values that are not equal to given value.
  """
  field_not: String
  """
  All values that are contained in given list.
  """
  field_in: [String!]
  """
  All values that are not contained in given list.
  """
  field_not_in: [String!]
  """
  All values less than the given value.
  """
  field_lt: String
  """
  All values less than or equal the given value.
  """
  field_lte: String
  """
  All values greater than the given value.
  """
  field_gt: String
  """
  All values greater than or equal the given value.
  """
  field_gte: String
  """
  All values containing the given string.
  """
  field_contains: String
  """
  All values not containing the given string.
  """
  field_not_contains: String
  """
  All values starting with the given string.
  """
  field_starts_with: String
  """
  All values not starting with the given string.
  """
  field_not_starts_with: String
  """
  All values ending with the given string.
  """
  field_ends_with: String
  """
  All values not ending with the given string.
  """
  field_not_ends_with: String
}

input TypeWithoutIdWhereUniqueInput {
  removeThisIdd: ID
}

