# Two Sided Connections of all types
# With/Without ID
# Case A: Required
# Case B: Not Required
# Case C: List

type AWithIdWithA {
  id: ID! @id
  field: String!
  x: AWithA! @relation(link: INLINE)
}

type AWithoutIdWithA {
  removeThisId: ID! @id
  field: String!
  x: AWithA! @relation(link: INLINE)
}

type BWithIdWithA {
  id: ID! @id
  field: String!
  x: AWithB @relation(link: INLINE)
}

type BWithoutIdWithA {
  removeThisId: ID! @id
  field: String!
  x: AWithB @relation(link: INLINE)
}

type CWithIdWithA {
  id: ID! @id
  field: String!
  x: [AWithC] @relation(link: INLINE)
}

type CWithoutIdWithA {
  removeThisId: ID! @id
  field: String!
  x: [AWithC] @relation(link: INLINE)
}

type AWithIdWithB {
  id: ID! @id
  field: String!
  x: BWithA! @relation(link: INLINE)
}

type AWithoutIdWithB {
  removeThisId: ID! @id
  field: String!
  x: BWithA! @relation(link: INLINE)
}

type BWithIdWithB {
  id: ID! @id
  field: String!
  x: BWithB @relation(link: INLINE)
}

type BWithoutIdWithB {
  removeThisId: ID! @id
  field: String!
  x: BWithB @relation(link: INLINE)
}

type CWithIdWithB {
  id: ID! @id
  field: String!
  x: [BWithC] @relation(link: INLINE)
}

type CWithoutIdWithB {
  removeThisId: ID! @id
  field: String!
  x: [BWithC] @relation(link: INLINE)
}

type AWithIdWithC {
  id: ID! @id
  field: String!
  x: CWithA! @relation(link: INLINE)
}

type AWithoutIdWithC {
  removeThisId: ID! @id
  field: String!
  x: CWithA! @relation(link: INLINE)
}

type BWithIdWithC {
  id: ID! @id
  field: String!
  x: CWithB @relation(link: INLINE)
}

type BWithoutIdWithC {
  removeThisId: ID! @id
  field: String!
  x: CWithB @relation(link: INLINE)
}

type CWithIdWithC {
  id: ID! @id
  field: String!
  x: [CWithC] @relation(link: INLINE)
}

type CWithoutIdWithC {
  removeThisId: ID! @id
  field: String!
  x: [CWithC] @relation(link: INLINE)
}

type AWithA {
  removeThisId: ID! @id
  x: AWithIdWithA!
  y: AWithoutIdWithA!
}

type AWithB {
  removeThisId: ID! @id
  x: BWithIdWithA!
  y: BWithoutIdWithA!
}

type AWithC {
  removeThisId: ID! @id
  x: CWithIdWithA!
  y: CWithoutIdWithA!
}

type BWithA {
  removeThisId: ID! @id
  x: AWithIdWithB
  y: AWithoutIdWithB
}

type BWithB {
  removeThisId: ID! @id
  x: BWithIdWithB
  y: BWithoutIdWithB
}

type BWithC {
  removeThisId: ID! @id
  x: CWithIdWithB
  y: CWithoutIdWithB
}

type CWithA {
  removeThisId: ID! @id
  x: [AWithIdWithC]
  y: [AWithoutIdWithC]
}

type CWithB {
  removeThisId: ID! @id
  x: [BWithIdWithC]
  y: [BWithoutIdWithC]
}

type CWithC {
  removeThisId: ID! @id
  x: [CWithIdWithC]
  y: [CWithoutIdWithC]
}
