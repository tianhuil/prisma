type AggregateFriend {
  count: Int!
}

type AggregateJoint {
  count: Int!
}

type AggregateParent {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

type Child {
  c: String
  friendsOpt(where: FriendWhereInput, orderBy: FriendOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Friend!]
  jointOpt: Joint!
}

input ChildCreateInput {
  c: String
  friendsOpt: FriendCreateManyInput
  jointOpt: JointCreateOneInput!
}

input ChildCreateManyInput {
  create: [ChildCreateInput!]
}

input ChildRestrictedWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ChildRestrictedWhereInput!]
  c: String
  """
  All values that are not equal to given value.
  """
  c_not: String
  """
  All values that are contained in given list.
  """
  c_in: [String!]
  """
  All values that are not contained in given list.
  """
  c_not_in: [String!]
  """
  All values less than the given value.
  """
  c_lt: String
  """
  All values less than or equal the given value.
  """
  c_lte: String
  """
  All values greater than the given value.
  """
  c_gt: String
  """
  All values greater than or equal the given value.
  """
  c_gte: String
  """
  All values containing the given string.
  """
  c_contains: String
  """
  All values not containing the given string.
  """
  c_not_contains: String
  """
  All values starting with the given string.
  """
  c_starts_with: String
  """
  All values not starting with the given string.
  """
  c_not_starts_with: String
  """
  All values ending with the given string.
  """
  c_ends_with: String
  """
  All values not ending with the given string.
  """
  c_not_ends_with: String
}

input ChildScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ChildScalarWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ChildScalarWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ChildScalarWhereInput!]
  c: String
  """
  All values that are not equal to given value.
  """
  c_not: String
  """
  All values that are contained in given list.
  """
  c_in: [String!]
  """
  All values that are not contained in given list.
  """
  c_not_in: [String!]
  """
  All values less than the given value.
  """
  c_lt: String
  """
  All values less than or equal the given value.
  """
  c_lte: String
  """
  All values greater than the given value.
  """
  c_gt: String
  """
  All values greater than or equal the given value.
  """
  c_gte: String
  """
  All values containing the given string.
  """
  c_contains: String
  """
  All values not containing the given string.
  """
  c_not_contains: String
  """
  All values starting with the given string.
  """
  c_starts_with: String
  """
  All values not starting with the given string.
  """
  c_not_starts_with: String
  """
  All values ending with the given string.
  """
  c_ends_with: String
  """
  All values not ending with the given string.
  """
  c_not_ends_with: String
}

input ChildUpdateManyDataInput {
  c: String
}

input ChildUpdateManyInput {
  create: [ChildCreateInput!]
  updateMany: [ChildUpdateManyWithWhereNestedInput!]
  deleteMany: [ChildScalarWhereInput!]
}

input ChildUpdateManyWithWhereNestedInput {
  where: ChildScalarWhereInput!
  data: ChildUpdateManyDataInput!
}

input ChildWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ChildWhereInput!]
  c: String
  """
  All values that are not equal to given value.
  """
  c_not: String
  """
  All values that are contained in given list.
  """
  c_in: [String!]
  """
  All values that are not contained in given list.
  """
  c_not_in: [String!]
  """
  All values less than the given value.
  """
  c_lt: String
  """
  All values less than or equal the given value.
  """
  c_lte: String
  """
  All values greater than the given value.
  """
  c_gt: String
  """
  All values greater than or equal the given value.
  """
  c_gte: String
  """
  All values containing the given string.
  """
  c_contains: String
  """
  All values not containing the given string.
  """
  c_not_contains: String
  """
  All values starting with the given string.
  """
  c_starts_with: String
  """
  All values not starting with the given string.
  """
  c_not_starts_with: String
  """
  All values ending with the given string.
  """
  c_ends_with: String
  """
  All values not ending with the given string.
  """
  c_not_ends_with: String
  friendsOpt_some: FriendWhereInput
  jointOpt: JointWhereInput
}

type Friend {
  f: String
  test: ID!
}

"""
A connection to a list of items.
"""
type FriendConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FriendEdge]!
  aggregate: AggregateFriend!
}

input FriendCreateInput {
  f: String
  test: ID
}

input FriendCreateManyInput {
  create: [FriendCreateInput!]
  connect: [FriendWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type FriendEdge {
  """
  The item at the end of the edge.
  """
  node: Friend!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FriendOrderByInput {
  f_ASC
  f_DESC
  test_ASC
  test_DESC
}

type FriendPreviousValues {
  f: String
  test: ID!
}

type FriendSubscriptionPayload {
  mutation: MutationType!
  node: Friend
  updatedFields: [String!]
  previousValues: FriendPreviousValues
}

input FriendSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FriendSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FriendWhereInput
}

input FriendUpdateInput {
  f: String
}

input FriendUpdateManyMutationInput {
  f: String
}

input FriendWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FriendWhereInput!]
  f: String
  """
  All values that are not equal to given value.
  """
  f_not: String
  """
  All values that are contained in given list.
  """
  f_in: [String!]
  """
  All values that are not contained in given list.
  """
  f_not_in: [String!]
  """
  All values less than the given value.
  """
  f_lt: String
  """
  All values less than or equal the given value.
  """
  f_lte: String
  """
  All values greater than the given value.
  """
  f_gt: String
  """
  All values greater than or equal the given value.
  """
  f_gte: String
  """
  All values containing the given string.
  """
  f_contains: String
  """
  All values not containing the given string.
  """
  f_not_contains: String
  """
  All values starting with the given string.
  """
  f_starts_with: String
  """
  All values not starting with the given string.
  """
  f_not_starts_with: String
  """
  All values ending with the given string.
  """
  f_ends_with: String
  """
  All values not ending with the given string.
  """
  f_not_ends_with: String
  test: ID
  """
  All values that are not equal to given value.
  """
  test_not: ID
  """
  All values that are contained in given list.
  """
  test_in: [ID!]
  """
  All values that are not contained in given list.
  """
  test_not_in: [ID!]
  """
  All values less than the given value.
  """
  test_lt: ID
  """
  All values less than or equal the given value.
  """
  test_lte: ID
  """
  All values greater than the given value.
  """
  test_gt: ID
  """
  All values greater than or equal the given value.
  """
  test_gte: ID
  """
  All values containing the given string.
  """
  test_contains: ID
  """
  All values not containing the given string.
  """
  test_not_contains: ID
  """
  All values starting with the given string.
  """
  test_starts_with: ID
  """
  All values not starting with the given string.
  """
  test_not_starts_with: ID
  """
  All values ending with the given string.
  """
  test_ends_with: ID
  """
  All values not ending with the given string.
  """
  test_not_ends_with: ID
}

input FriendWhereUniqueInput {
  f: String
  test: ID
}

type Joint implements Node {
  id: ID!
  j: String
}

"""
A connection to a list of items.
"""
type JointConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [JointEdge]!
  aggregate: AggregateJoint!
}

input JointCreateInput {
  id: ID
  j: String
}

input JointCreateManyInput {
  create: [JointCreateInput!]
  connect: [JointWhereUniqueInput!]
}

input JointCreateOneInput {
  create: JointCreateInput
  connect: JointWhereUniqueInput
}

"""
An edge in a connection.
"""
type JointEdge {
  """
  The item at the end of the edge.
  """
  node: Joint!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum JointOrderByInput {
  id_ASC
  id_DESC
  j_ASC
  j_DESC
}

type JointPreviousValues {
  id: ID!
  j: String
}

input JointScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [JointScalarWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [JointScalarWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [JointScalarWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  j: String
  """
  All values that are not equal to given value.
  """
  j_not: String
  """
  All values that are contained in given list.
  """
  j_in: [String!]
  """
  All values that are not contained in given list.
  """
  j_not_in: [String!]
  """
  All values less than the given value.
  """
  j_lt: String
  """
  All values less than or equal the given value.
  """
  j_lte: String
  """
  All values greater than the given value.
  """
  j_gt: String
  """
  All values greater than or equal the given value.
  """
  j_gte: String
  """
  All values containing the given string.
  """
  j_contains: String
  """
  All values not containing the given string.
  """
  j_not_contains: String
  """
  All values starting with the given string.
  """
  j_starts_with: String
  """
  All values not starting with the given string.
  """
  j_not_starts_with: String
  """
  All values ending with the given string.
  """
  j_ends_with: String
  """
  All values not ending with the given string.
  """
  j_not_ends_with: String
}

type JointSubscriptionPayload {
  mutation: MutationType!
  node: Joint
  updatedFields: [String!]
  previousValues: JointPreviousValues
}

input JointSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [JointSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: JointWhereInput
}

input JointUpdateDataInput {
  j: String
}

input JointUpdateInput {
  j: String
}

input JointUpdateManyDataInput {
  j: String
}

input JointUpdateManyInput {
  create: [JointCreateInput!]
  connect: [JointWhereUniqueInput!]
  set: [JointWhereUniqueInput!]
  disconnect: [JointWhereUniqueInput!]
  delete: [JointWhereUniqueInput!]
  update: [JointUpdateWithWhereUniqueNestedInput!]
  updateMany: [JointUpdateManyWithWhereNestedInput!]
  deleteMany: [JointScalarWhereInput!]
  upsert: [JointUpsertWithWhereUniqueNestedInput!]
}

input JointUpdateManyMutationInput {
  j: String
}

input JointUpdateManyWithWhereNestedInput {
  where: JointScalarWhereInput!
  data: JointUpdateManyDataInput!
}

input JointUpdateWithWhereUniqueNestedInput {
  where: JointWhereUniqueInput!
  data: JointUpdateDataInput!
}

input JointUpsertWithWhereUniqueNestedInput {
  where: JointWhereUniqueInput!
  update: JointUpdateDataInput!
  create: JointCreateInput!
}

input JointWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [JointWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  j: String
  """
  All values that are not equal to given value.
  """
  j_not: String
  """
  All values that are contained in given list.
  """
  j_in: [String!]
  """
  All values that are not contained in given list.
  """
  j_not_in: [String!]
  """
  All values less than the given value.
  """
  j_lt: String
  """
  All values less than or equal the given value.
  """
  j_lte: String
  """
  All values greater than the given value.
  """
  j_gt: String
  """
  All values greater than or equal the given value.
  """
  j_gte: String
  """
  All values containing the given string.
  """
  j_contains: String
  """
  All values not containing the given string.
  """
  j_not_contains: String
  """
  All values starting with the given string.
  """
  j_starts_with: String
  """
  All values not starting with the given string.
  """
  j_not_starts_with: String
  """
  All values ending with the given string.
  """
  j_ends_with: String
  """
  All values not ending with the given string.
  """
  j_not_ends_with: String
}

input JointWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createParent(data: ParentCreateInput!): Parent!
  createJoint(data: JointCreateInput!): Joint!
  createFriend(data: FriendCreateInput!): Friend!
  updateParent(data: ParentUpdateInput!, where: ParentWhereUniqueInput!): Parent
  updateJoint(data: JointUpdateInput!, where: JointWhereUniqueInput!): Joint
  updateFriend(data: FriendUpdateInput!, where: FriendWhereUniqueInput!): Friend
  deleteParent(where: ParentWhereUniqueInput!): Parent
  deleteJoint(where: JointWhereUniqueInput!): Joint
  deleteFriend(where: FriendWhereUniqueInput!): Friend
  upsertParent(where: ParentWhereUniqueInput!, create: ParentCreateInput!, update: ParentUpdateInput!): Parent!
  upsertJoint(where: JointWhereUniqueInput!, create: JointCreateInput!, update: JointUpdateInput!): Joint!
  upsertFriend(where: FriendWhereUniqueInput!, create: FriendCreateInput!, update: FriendUpdateInput!): Friend!
  updateManyParents(data: ParentUpdateManyMutationInput!, where: ParentWhereInput): BatchPayload!
  updateManyJoints(data: JointUpdateManyMutationInput!, where: JointWhereInput): BatchPayload!
  updateManyFriends(data: FriendUpdateManyMutationInput!, where: FriendWhereInput): BatchPayload!
  deleteManyParents(where: ParentWhereInput): BatchPayload!
  deleteManyJoints(where: JointWhereInput): BatchPayload!
  deleteManyFriends(where: FriendWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Parent implements Node {
  id: ID!
  p: String
  children: [Child!]
  j(where: JointWhereInput, orderBy: JointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Joint!]
}

"""
A connection to a list of items.
"""
type ParentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ParentEdge]!
  aggregate: AggregateParent!
}

input ParentCreateInput {
  id: ID
  p: String
  children: ChildCreateManyInput
  j: JointCreateManyInput
}

"""
An edge in a connection.
"""
type ParentEdge {
  """
  The item at the end of the edge.
  """
  node: Parent!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ParentOrderByInput {
  id_ASC
  id_DESC
  p_ASC
  p_DESC
}

type ParentPreviousValues {
  id: ID!
  p: String
}

type ParentSubscriptionPayload {
  mutation: MutationType!
  node: Parent
  updatedFields: [String!]
  previousValues: ParentPreviousValues
}

input ParentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ParentSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ParentWhereInput
}

input ParentUpdateInput {
  p: String
  children: ChildUpdateManyInput
  j: JointUpdateManyInput
}

input ParentUpdateManyMutationInput {
  p: String
}

input ParentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ParentWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  p: String
  """
  All values that are not equal to given value.
  """
  p_not: String
  """
  All values that are contained in given list.
  """
  p_in: [String!]
  """
  All values that are not contained in given list.
  """
  p_not_in: [String!]
  """
  All values less than the given value.
  """
  p_lt: String
  """
  All values less than or equal the given value.
  """
  p_lte: String
  """
  All values greater than the given value.
  """
  p_gt: String
  """
  All values greater than or equal the given value.
  """
  p_gte: String
  """
  All values containing the given string.
  """
  p_contains: String
  """
  All values not containing the given string.
  """
  p_not_contains: String
  """
  All values starting with the given string.
  """
  p_starts_with: String
  """
  All values not starting with the given string.
  """
  p_not_starts_with: String
  """
  All values ending with the given string.
  """
  p_ends_with: String
  """
  All values not ending with the given string.
  """
  p_not_ends_with: String
  children_some: ChildWhereInput
  children_every: ChildRestrictedWhereInput
  children_none: ChildRestrictedWhereInput
  j_some: JointWhereInput
}

input ParentWhereUniqueInput {
  id: ID
  p: String
}

type Query {
  parents(where: ParentWhereInput, orderBy: ParentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parent]!
  joints(where: JointWhereInput, orderBy: JointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Joint]!
  friends(where: FriendWhereInput, orderBy: FriendOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Friend]!
  parent(where: ParentWhereUniqueInput!): Parent
  joint(where: JointWhereUniqueInput!): Joint
  friend(where: FriendWhereUniqueInput!): Friend
  parentsConnection(where: ParentWhereInput, orderBy: ParentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParentConnection!
  jointsConnection(where: JointWhereInput, orderBy: JointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JointConnection!
  friendsConnection(where: FriendWhereInput, orderBy: FriendOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FriendConnection!
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Subscription {
  parent(where: ParentSubscriptionWhereInput): ParentSubscriptionPayload
  joint(where: JointSubscriptionWhereInput): JointSubscriptionPayload
  friend(where: FriendSubscriptionWhereInput): FriendSubscriptionPayload
}

