type AggregateStory {
  count: Int!
}

type AggregateUserSpace {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUserSpace(data: UserSpaceCreateInput!): UserSpace!
  createStory(data: StoryCreateInput!): Story!
  updateUserSpace(data: UserSpaceUpdateInput!, where: UserSpaceWhereUniqueInput!): UserSpace
  deleteUserSpace(where: UserSpaceWhereUniqueInput!): UserSpace
  deleteStory(where: StoryWhereUniqueInput!): Story
  upsertUserSpace(where: UserSpaceWhereUniqueInput!, create: UserSpaceCreateInput!, update: UserSpaceUpdateInput!): UserSpace!
  deleteManyUserSpaces(where: UserSpaceWhereInput): BatchPayload!
  deleteManyStories(where: StoryWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  userSpaces(where: UserSpaceWhereInput, orderBy: UserSpaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserSpace]!
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story]!
  userSpace(where: UserSpaceWhereUniqueInput!): UserSpace
  story(where: StoryWhereUniqueInput!): Story
  userSpacesConnection(where: UserSpaceWhereInput, orderBy: UserSpaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserSpaceConnection!
  storiesConnection(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoryConnection!
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Story implements Node {
  id: ID!
}

"""
A connection to a list of items.
"""
type StoryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [StoryEdge]!
  aggregate: AggregateStory!
}

input StoryCreateInput {
  id: ID
}

input StoryCreateManyInput {
  create: [StoryCreateInput!]
  connect: [StoryWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type StoryEdge {
  """
  The item at the end of the edge.
  """
  node: Story!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum StoryOrderByInput {
  id_ASC
  id_DESC
}

type StoryPreviousValues {
  id: ID!
}

input StoryScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StoryScalarWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [StoryScalarWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [StoryScalarWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
}

type StorySubscriptionPayload {
  mutation: MutationType!
  node: Story
  updatedFields: [String!]
  previousValues: StoryPreviousValues
}

input StorySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StorySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StoryWhereInput
}

input StoryUpdateManyInput {
  create: [StoryCreateInput!]
  connect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  delete: [StoryWhereUniqueInput!]
  deleteMany: [StoryScalarWhereInput!]
}

input StoryWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StoryWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
}

input StoryWhereUniqueInput {
  id: ID
}

type Subscription {
  userSpace(where: UserSpaceSubscriptionWhereInput): UserSpaceSubscriptionPayload
  story(where: StorySubscriptionWhereInput): StorySubscriptionPayload
}

type UserSpace implements Node {
  id: ID!
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story!]
}

"""
A connection to a list of items.
"""
type UserSpaceConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserSpaceEdge]!
  aggregate: AggregateUserSpace!
}

input UserSpaceCreateInput {
  id: ID
  stories: StoryCreateManyInput
}

"""
An edge in a connection.
"""
type UserSpaceEdge {
  """
  The item at the end of the edge.
  """
  node: UserSpace!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserSpaceOrderByInput {
  id_ASC
  id_DESC
}

type UserSpacePreviousValues {
  id: ID!
}

type UserSpaceSubscriptionPayload {
  mutation: MutationType!
  node: UserSpace
  updatedFields: [String!]
  previousValues: UserSpacePreviousValues
}

input UserSpaceSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSpaceSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserSpaceWhereInput
}

input UserSpaceUpdateInput {
  stories: StoryUpdateManyInput
}

input UserSpaceWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSpaceWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  stories_some: StoryWhereInput
}

input UserSpaceWhereUniqueInput {
  id: ID
}

