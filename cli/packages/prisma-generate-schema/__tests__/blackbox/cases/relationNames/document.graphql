type A implements Node {
  toB: B!
  toB2: B!
  toC: C
  id: ID!
}

"""
A connection to a list of items.
"""
type AConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [AEdge]!
  aggregate: AggregateA!
}

input ACreateInput {
  id: ID
  toB: BCreateOneWithoutToAInput!
  toB2: BCreateOneWithoutToA2Input!
  toC: CCreateOneWithoutToAInput
}

input ACreateManyWithoutToCInput {
  create: [ACreateWithoutToCInput!]
  connect: [AWhereUniqueInput!]
}

input ACreateOneWithoutToB2Input {
  create: ACreateWithoutToB2Input
  connect: AWhereUniqueInput
}

input ACreateOneWithoutToBInput {
  create: ACreateWithoutToBInput
  connect: AWhereUniqueInput
}

input ACreateWithoutToB2Input {
  id: ID
  toB: BCreateOneWithoutToAInput!
  toC: CCreateOneWithoutToAInput
}

input ACreateWithoutToBInput {
  id: ID
  toB2: BCreateOneWithoutToA2Input!
  toC: CCreateOneWithoutToAInput
}

input ACreateWithoutToCInput {
  id: ID
  toB: BCreateOneWithoutToAInput!
  toB2: BCreateOneWithoutToA2Input!
}

"""
An edge in a connection.
"""
type AEdge {
  """
  The item at the end of the edge.
  """
  node: A!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type AggregateA {
  count: Int!
}

type AggregateB {
  count: Int!
}

type AggregateC {
  count: Int!
}

enum AOrderByInput {
  id_ASC
  id_DESC
}

type APreviousValues {
  id: ID!
}

input AScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AScalarWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [AScalarWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [AScalarWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
}

type ASubscriptionPayload {
  mutation: MutationType!
  node: A
  updatedFields: [String!]
  previousValues: APreviousValues
}

input ASubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ASubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AWhereInput
}

input AUpdateInput {
  toB: BUpdateOneRequiredWithoutToAInput
  toB2: BUpdateOneRequiredWithoutToA2Input
  toC: CUpdateOneWithoutToAInput
}

input AUpdateManyWithoutToCInput {
  create: [ACreateWithoutToCInput!]
  connect: [AWhereUniqueInput!]
  set: [AWhereUniqueInput!]
  disconnect: [AWhereUniqueInput!]
  delete: [AWhereUniqueInput!]
  update: [AUpdateWithWhereUniqueWithoutToCInput!]
  deleteMany: [AScalarWhereInput!]
  upsert: [AUpsertWithWhereUniqueWithoutToCInput!]
}

input AUpdateOneRequiredWithoutToB2Input {
  create: ACreateWithoutToB2Input
  connect: AWhereUniqueInput
  update: AUpdateWithoutToB2DataInput
  upsert: AUpsertWithoutToB2Input
}

input AUpdateOneRequiredWithoutToBInput {
  create: ACreateWithoutToBInput
  connect: AWhereUniqueInput
  update: AUpdateWithoutToBDataInput
  upsert: AUpsertWithoutToBInput
}

input AUpdateWithoutToB2DataInput {
  toB: BUpdateOneRequiredWithoutToAInput
  toC: CUpdateOneWithoutToAInput
}

input AUpdateWithoutToBDataInput {
  toB2: BUpdateOneRequiredWithoutToA2Input
  toC: CUpdateOneWithoutToAInput
}

input AUpdateWithoutToCDataInput {
  toB: BUpdateOneRequiredWithoutToAInput
  toB2: BUpdateOneRequiredWithoutToA2Input
}

input AUpdateWithWhereUniqueWithoutToCInput {
  where: AWhereUniqueInput!
  data: AUpdateWithoutToCDataInput!
}

input AUpsertWithoutToB2Input {
  update: AUpdateWithoutToB2DataInput!
  create: ACreateWithoutToB2Input!
}

input AUpsertWithoutToBInput {
  update: AUpdateWithoutToBDataInput!
  create: ACreateWithoutToBInput!
}

input AUpsertWithWhereUniqueWithoutToCInput {
  where: AWhereUniqueInput!
  update: AUpdateWithoutToCDataInput!
  create: ACreateWithoutToCInput!
}

input AWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  toB: BWhereInput
  toB2: BWhereInput
  toC: CWhereInput
}

input AWhereUniqueInput {
  id: ID
}

type B implements Node {
  toA: A!
  toA2: A!
  toC: C!
  id: ID!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type BConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [BEdge]!
  aggregate: AggregateB!
}

input BCreateInput {
  id: ID
  toA: ACreateOneWithoutToBInput!
  toA2: ACreateOneWithoutToB2Input!
  toC: CCreateOneWithoutToBInput!
}

input BCreateManyWithoutToCInput {
  create: [BCreateWithoutToCInput!]
  connect: [BWhereUniqueInput!]
}

input BCreateOneWithoutToA2Input {
  create: BCreateWithoutToA2Input
  connect: BWhereUniqueInput
}

input BCreateOneWithoutToAInput {
  create: BCreateWithoutToAInput
  connect: BWhereUniqueInput
}

input BCreateWithoutToA2Input {
  id: ID
  toA: ACreateOneWithoutToBInput!
  toC: CCreateOneWithoutToBInput!
}

input BCreateWithoutToAInput {
  id: ID
  toA2: ACreateOneWithoutToB2Input!
  toC: CCreateOneWithoutToBInput!
}

input BCreateWithoutToCInput {
  id: ID
  toA: ACreateOneWithoutToBInput!
  toA2: ACreateOneWithoutToB2Input!
}

"""
An edge in a connection.
"""
type BEdge {
  """
  The item at the end of the edge.
  """
  node: B!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BOrderByInput {
  id_ASC
  id_DESC
}

type BPreviousValues {
  id: ID!
}

input BScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BScalarWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [BScalarWhereInput!]
  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BScalarWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
}

type BSubscriptionPayload {
  mutation: MutationType!
  node: B
  updatedFields: [String!]
  previousValues: BPreviousValues
}

input BSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BWhereInput
}

input BUpdateInput {
  toA: AUpdateOneRequiredWithoutToBInput
  toA2: AUpdateOneRequiredWithoutToB2Input
  toC: CUpdateOneRequiredWithoutToBInput
}

input BUpdateManyWithoutToCInput {
  create: [BCreateWithoutToCInput!]
  connect: [BWhereUniqueInput!]
  set: [BWhereUniqueInput!]
  disconnect: [BWhereUniqueInput!]
  delete: [BWhereUniqueInput!]
  update: [BUpdateWithWhereUniqueWithoutToCInput!]
  deleteMany: [BScalarWhereInput!]
  upsert: [BUpsertWithWhereUniqueWithoutToCInput!]
}

input BUpdateOneRequiredWithoutToA2Input {
  create: BCreateWithoutToA2Input
  connect: BWhereUniqueInput
  update: BUpdateWithoutToA2DataInput
  upsert: BUpsertWithoutToA2Input
}

input BUpdateOneRequiredWithoutToAInput {
  create: BCreateWithoutToAInput
  connect: BWhereUniqueInput
  update: BUpdateWithoutToADataInput
  upsert: BUpsertWithoutToAInput
}

input BUpdateWithoutToA2DataInput {
  toA: AUpdateOneRequiredWithoutToBInput
  toC: CUpdateOneRequiredWithoutToBInput
}

input BUpdateWithoutToADataInput {
  toA2: AUpdateOneRequiredWithoutToB2Input
  toC: CUpdateOneRequiredWithoutToBInput
}

input BUpdateWithoutToCDataInput {
  toA: AUpdateOneRequiredWithoutToBInput
  toA2: AUpdateOneRequiredWithoutToB2Input
}

input BUpdateWithWhereUniqueWithoutToCInput {
  where: BWhereUniqueInput!
  data: BUpdateWithoutToCDataInput!
}

input BUpsertWithoutToA2Input {
  update: BUpdateWithoutToA2DataInput!
  create: BCreateWithoutToA2Input!
}

input BUpsertWithoutToAInput {
  update: BUpdateWithoutToADataInput!
  create: BCreateWithoutToAInput!
}

input BUpsertWithWhereUniqueWithoutToCInput {
  where: BWhereUniqueInput!
  update: BUpdateWithoutToCDataInput!
  create: BCreateWithoutToCInput!
}

input BWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  toA: AWhereInput
  toA2: AWhereInput
  toC: CWhereInput
}

input BWhereUniqueInput {
  id: ID
}

type C implements Node {
  toB(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [B!]
  toA(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [A!]
  id: ID!
}

"""
A connection to a list of items.
"""
type CConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CEdge]!
  aggregate: AggregateC!
}

input CCreateInput {
  id: ID
  toB: BCreateManyWithoutToCInput
  toA: ACreateManyWithoutToCInput
}

input CCreateOneWithoutToAInput {
  create: CCreateWithoutToAInput
  connect: CWhereUniqueInput
}

input CCreateOneWithoutToBInput {
  create: CCreateWithoutToBInput
  connect: CWhereUniqueInput
}

input CCreateWithoutToAInput {
  id: ID
  toB: BCreateManyWithoutToCInput
}

input CCreateWithoutToBInput {
  id: ID
  toA: ACreateManyWithoutToCInput
}

"""
An edge in a connection.
"""
type CEdge {
  """
  The item at the end of the edge.
  """
  node: C!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum COrderByInput {
  id_ASC
  id_DESC
}

type CPreviousValues {
  id: ID!
}

type CSubscriptionPayload {
  mutation: MutationType!
  node: C
  updatedFields: [String!]
  previousValues: CPreviousValues
}

input CSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CWhereInput
}

input CUpdateInput {
  toB: BUpdateManyWithoutToCInput
  toA: AUpdateManyWithoutToCInput
}

input CUpdateOneRequiredWithoutToBInput {
  create: CCreateWithoutToBInput
  connect: CWhereUniqueInput
  update: CUpdateWithoutToBDataInput
  upsert: CUpsertWithoutToBInput
}

input CUpdateOneWithoutToAInput {
  create: CCreateWithoutToAInput
  connect: CWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CUpdateWithoutToADataInput
  upsert: CUpsertWithoutToAInput
}

input CUpdateWithoutToADataInput {
  toB: BUpdateManyWithoutToCInput
}

input CUpdateWithoutToBDataInput {
  toA: AUpdateManyWithoutToCInput
}

input CUpsertWithoutToAInput {
  update: CUpdateWithoutToADataInput!
  create: CCreateWithoutToAInput!
}

input CUpsertWithoutToBInput {
  update: CUpdateWithoutToBDataInput!
  create: CCreateWithoutToBInput!
}

input CWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  toB_some: BWhereInput
  toA_some: AWhereInput
}

input CWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createA(data: ACreateInput!): A!
  createB(data: BCreateInput!): B!
  createC(data: CCreateInput!): C!
  updateA(data: AUpdateInput!, where: AWhereUniqueInput!): A
  updateB(data: BUpdateInput!, where: BWhereUniqueInput!): B
  updateC(data: CUpdateInput!, where: CWhereUniqueInput!): C
  deleteA(where: AWhereUniqueInput!): A
  deleteB(where: BWhereUniqueInput!): B
  deleteC(where: CWhereUniqueInput!): C
  upsertA(where: AWhereUniqueInput!, create: ACreateInput!, update: AUpdateInput!): A!
  upsertB(where: BWhereUniqueInput!, create: BCreateInput!, update: BUpdateInput!): B!
  upsertC(where: CWhereUniqueInput!, create: CCreateInput!, update: CUpdateInput!): C!
  deleteManyAs(where: AWhereInput): BatchPayload!
  deleteManyBs(where: BWhereInput): BatchPayload!
  deleteManyCs(where: CWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  as(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [A]!
  bs(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [B]!
  cs(where: CWhereInput, orderBy: COrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [C]!
  a(where: AWhereUniqueInput!): A
  b(where: BWhereUniqueInput!): B
  c(where: CWhereUniqueInput!): C
  asConnection(where: AWhereInput, orderBy: AOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AConnection!
  bsConnection(where: BWhereInput, orderBy: BOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BConnection!
  csConnection(where: CWhereInput, orderBy: COrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CConnection!
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Subscription {
  a(where: ASubscriptionWhereInput): ASubscriptionPayload
  b(where: BSubscriptionWhereInput): BSubscriptionPayload
  c(where: CSubscriptionWhereInput): CSubscriptionPayload
}

