// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Introspector sportsdb 1`] = `
"type Address @pgTable(name: \\"addresses\\") {
  id: Int! @unique
  building: String
  country: String
  county: String
  district: String
  floor: String
  language: String
  locality: String
  location: Location! @pgColumn(name: \\"location_id\\")
  neighborhood: String
  postalCode: String @pgColumn(name: \\"postal_code\\")
  region: String
  street: String
  streetNumber: String @pgColumn(name: \\"street_number\\")
  streetPrefix: String @pgColumn(name: \\"street_prefix\\")
  streetSuffix: String @pgColumn(name: \\"street_suffix\\")
  suite: String
}

type Affiliation @pgTable(name: \\"affiliations\\") {
  id: Int! @unique
  affiliationKey: String! @pgColumn(name: \\"affiliation_key\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references AffiliationPhase.affiliation.
  # affiliationPhases: [AffiliationPhase] @relation(name: \\"AffiliationAffiliationPhasesToAffiliationPhaseAffiliation\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references AffiliationPhase.ancestorAffiliation.
  # affiliationPhases: [AffiliationPhase] @relation(name: \\"AffiliationAffiliationPhasesToAffiliationPhaseAncestorAffiliation\\")
  affiliationsDocuments: [AffiliationsDocument]
  affiliationsEvents: [AffiliationsEvent]
  affiliationsMedia: [AffiliationsMedia]
  affiliationType: String @pgColumn(name: \\"affiliation_type\\")
  positions: [Position]
  publisher: Publisher! @pgColumn(name: \\"publisher_id\\")
  seasons: [Season]
  standings: [Standing]
  standingSubgroups: [StandingSubgroup]
  teamPhases: [TeamPhase]
}

type AffiliationPhase @pgTable(name: \\"affiliation_phases\\") {
  id: Int! @unique
  affiliation: Affiliation! @pgColumn(name: \\"affiliation_id\\") @relation(name: \\"AffiliationAffiliationPhasesToAffiliationPhaseAffiliation\\")
  ancestorAffiliation: Affiliation @pgColumn(name: \\"ancestor_affiliation_id\\") @relation(name: \\"AffiliationAffiliationPhasesToAffiliationPhaseAncestorAffiliation\\")
  endDateTime: DateTime @pgColumn(name: \\"end_date_time\\")
  endSeason: Season @pgColumn(name: \\"end_season_id\\") @relation(name: \\"AffiliationPhaseEndSeasonToSeasonAffiliationPhases\\")
  startDateTime: DateTime @pgColumn(name: \\"start_date_time\\")
  startSeason: Season @pgColumn(name: \\"start_season_id\\") @relation(name: \\"AffiliationPhaseStartSeasonToSeasonAffiliationPhases\\")
}

type AffiliationsDocument @pgTable(name: \\"affiliations_documents\\") @relationTable {
  affiliation: Affiliation! @pgColumn(name: \\"affiliation_id\\")
  document: Document! @pgColumn(name: \\"document_id\\")
}

type AffiliationsEvent @pgTable(name: \\"affiliations_events\\") @relationTable {
  affiliation: Affiliation! @pgColumn(name: \\"affiliation_id\\")
  event: Event! @pgColumn(name: \\"event_id\\")
}

type AffiliationsMedia @pgTable(name: \\"affiliations_media\\") @relationTable {
  affiliation: Affiliation! @pgColumn(name: \\"affiliation_id\\")
  media: Media! @pgColumn(name: \\"media_id\\")
}

type AmericanFootballActionParticipant @pgTable(name: \\"american_football_action_participants\\") {
  id: Int! @unique
  americanFootballActionPlay: AmericanFootballActionPlay! @pgColumn(name: \\"american_football_action_play_id\\")
  fieldLine: Int @pgColumn(name: \\"field_line\\")
  participantRole: String! @pgColumn(name: \\"participant_role\\")
  person: Person! @pgColumn(name: \\"person_id\\")
  scoreCredit: Int @pgColumn(name: \\"score_credit\\")
  scoreType: String @pgColumn(name: \\"score_type\\")
  yardage: Int
  yardsGained: Int @pgColumn(name: \\"yards_gained\\")
}

type AmericanFootballActionPlay @pgTable(name: \\"american_football_action_plays\\") {
  id: Int! @unique
  americanFootballActionParticipants: [AmericanFootballActionParticipant]
  americanFootballEventState: AmericanFootballEventState! @pgColumn(name: \\"american_football_event_state_id\\")
  comment: String
  driveResult: String @pgColumn(name: \\"drive_result\\")
  playType: String @pgColumn(name: \\"play_type\\")
  points: Int
  scoreAttemptType: String @pgColumn(name: \\"score_attempt_type\\")
}

type AmericanFootballDefensiveStat @pgTable(name: \\"american_football_defensive_stats\\") {
  id: Int! @unique
  interceptionsAverage: String @pgColumn(name: \\"interceptions_average\\")
  interceptionsLongest: String @pgColumn(name: \\"interceptions_longest\\")
  interceptionsTotal: String @pgColumn(name: \\"interceptions_total\\")
  interceptionsTouchdown: String @pgColumn(name: \\"interceptions_touchdown\\")
  interceptionsYards: String @pgColumn(name: \\"interceptions_yards\\")
  passesDefensed: String @pgColumn(name: \\"passes_defensed\\")
  quarterbackHurries: String @pgColumn(name: \\"quarterback_hurries\\")
  sacksTotal: String @pgColumn(name: \\"sacks_total\\")
  sacksYards: String @pgColumn(name: \\"sacks_yards\\")
  tacklesAssists: String @pgColumn(name: \\"tackles_assists\\")
  tacklesSolo: String @pgColumn(name: \\"tackles_solo\\")
  tacklesTotal: String @pgColumn(name: \\"tackles_total\\")
}

type AmericanFootballDownProgressStat @pgTable(name: \\"american_football_down_progress_stats\\") {
  id: Int! @unique
  conversionsFourthDown: String @pgColumn(name: \\"conversions_fourth_down\\")
  conversionsFourthDownAttempts: String @pgColumn(name: \\"conversions_fourth_down_attempts\\")
  conversionsFourthDownPercentage: String @pgColumn(name: \\"conversions_fourth_down_percentage\\")
  conversionsThirdDown: String @pgColumn(name: \\"conversions_third_down\\")
  conversionsThirdDownAttempts: String @pgColumn(name: \\"conversions_third_down_attempts\\")
  conversionsThirdDownPercentage: String @pgColumn(name: \\"conversions_third_down_percentage\\")
  firstDownsPass: String @pgColumn(name: \\"first_downs_pass\\")
  firstDownsPenalty: String @pgColumn(name: \\"first_downs_penalty\\")
  firstDownsRun: String @pgColumn(name: \\"first_downs_run\\")
  firstDownsTotal: String @pgColumn(name: \\"first_downs_total\\")
}

type AmericanFootballEventState @pgTable(name: \\"american_football_event_states\\") {
  id: Int! @unique
  americanFootballActionPlays: [AmericanFootballActionPlay]
  clockState: String @pgColumn(name: \\"clock_state\\")
  context: String
  currentState: Int @pgColumn(name: \\"current_state\\")
  distanceFor1stDown: Int @pgColumn(name: \\"distance_for_1st_down\\")
  down: Int
  event: Event! @pgColumn(name: \\"event_id\\")
  fieldLine: Int @pgColumn(name: \\"field_line\\")
  fieldSide: String @pgColumn(name: \\"field_side\\")
  periodTimeElapsed: String @pgColumn(name: \\"period_time_elapsed\\")
  periodTimeRemaining: String @pgColumn(name: \\"period_time_remaining\\")
  periodValue: Int @pgColumn(name: \\"period_value\\")
  sequenceNumber: Int @pgColumn(name: \\"sequence_number\\")
  teamInPossession: Team @pgColumn(name: \\"team_in_possession_id\\")
}

type AmericanFootballFumblesStat @pgTable(name: \\"american_football_fumbles_stats\\") {
  id: Int! @unique
  fumblesCommitted: String @pgColumn(name: \\"fumbles_committed\\")
  fumblesForced: String @pgColumn(name: \\"fumbles_forced\\")
  fumblesLost: String @pgColumn(name: \\"fumbles_lost\\")
  fumblesOpposingCommitted: String @pgColumn(name: \\"fumbles_opposing_committed\\")
  fumblesOpposingLost: String @pgColumn(name: \\"fumbles_opposing_lost\\")
  fumblesOpposingRecovered: String @pgColumn(name: \\"fumbles_opposing_recovered\\")
  fumblesOpposingYardsGained: String @pgColumn(name: \\"fumbles_opposing_yards_gained\\")
  fumblesOwnCommitted: String @pgColumn(name: \\"fumbles_own_committed\\")
  fumblesOwnLost: String @pgColumn(name: \\"fumbles_own_lost\\")
  fumblesOwnRecovered: String @pgColumn(name: \\"fumbles_own_recovered\\")
  fumblesOwnYardsGained: String @pgColumn(name: \\"fumbles_own_yards_gained\\")
  fumblesRecovered: String @pgColumn(name: \\"fumbles_recovered\\")
  fumblesYardsGained: String @pgColumn(name: \\"fumbles_yards_gained\\")
}

type AmericanFootballOffensiveStat @pgTable(name: \\"american_football_offensive_stats\\") {
  id: Int! @unique
  offensivePlaysAverageYardsPer: String @pgColumn(name: \\"offensive_plays_average_yards_per\\")
  offensivePlaysNumber: String @pgColumn(name: \\"offensive_plays_number\\")
  offensivePlaysYards: String @pgColumn(name: \\"offensive_plays_yards\\")
  possessionDuration: String @pgColumn(name: \\"possession_duration\\")
  turnoversGiveaway: String @pgColumn(name: \\"turnovers_giveaway\\")
}

type AmericanFootballPassingStat @pgTable(name: \\"american_football_passing_stats\\") {
  id: Int! @unique
  passerRating: String @pgColumn(name: \\"passer_rating\\")
  passesAttempts: String @pgColumn(name: \\"passes_attempts\\")
  passesAverageYardsPer: String @pgColumn(name: \\"passes_average_yards_per\\")
  passesCompletions: String @pgColumn(name: \\"passes_completions\\")
  passesInterceptions: String @pgColumn(name: \\"passes_interceptions\\")
  passesInterceptionsPercentage: String @pgColumn(name: \\"passes_interceptions_percentage\\")
  passesLongest: String @pgColumn(name: \\"passes_longest\\")
  passesPercentage: String @pgColumn(name: \\"passes_percentage\\")
  passesTouchdowns: String @pgColumn(name: \\"passes_touchdowns\\")
  passesTouchdownsPercentage: String @pgColumn(name: \\"passes_touchdowns_percentage\\")
  passesYardsGross: String @pgColumn(name: \\"passes_yards_gross\\")
  passesYardsLost: String @pgColumn(name: \\"passes_yards_lost\\")
  passesYardsNet: String @pgColumn(name: \\"passes_yards_net\\")
  receptionsAverageYardsPer: String @pgColumn(name: \\"receptions_average_yards_per\\")
  receptionsFirstDown: String @pgColumn(name: \\"receptions_first_down\\")
  receptionsLongest: String @pgColumn(name: \\"receptions_longest\\")
  receptionsTotal: String @pgColumn(name: \\"receptions_total\\")
  receptionsTouchdowns: String @pgColumn(name: \\"receptions_touchdowns\\")
  receptionsYards: String @pgColumn(name: \\"receptions_yards\\")
}

type AmericanFootballPenaltiesStat @pgTable(name: \\"american_football_penalties_stats\\") {
  id: Int! @unique
  penaltiesTotal: String @pgColumn(name: \\"penalties_total\\")
  penaltyFirstDowns: String @pgColumn(name: \\"penalty_first_downs\\")
  penaltyYards: String @pgColumn(name: \\"penalty_yards\\")
}

type AmericanFootballRushingStat @pgTable(name: \\"american_football_rushing_stats\\") {
  id: Int! @unique
  rushesAttempts: String @pgColumn(name: \\"rushes_attempts\\")
  rushesFirstDown: String @pgColumn(name: \\"rushes_first_down\\")
  rushesLongest: String @pgColumn(name: \\"rushes_longest\\")
  rushesTouchdowns: String @pgColumn(name: \\"rushes_touchdowns\\")
  rushesYards: String @pgColumn(name: \\"rushes_yards\\")
  rushingAverageYardsPer: String @pgColumn(name: \\"rushing_average_yards_per\\")
}

type AmericanFootballSacksAgainstStat @pgTable(name: \\"american_football_sacks_against_stats\\") {
  id: Int! @unique
  sacksAgainstTotal: String @pgColumn(name: \\"sacks_against_total\\")
  sacksAgainstYards: String @pgColumn(name: \\"sacks_against_yards\\")
}

type AmericanFootballScoringStat @pgTable(name: \\"american_football_scoring_stats\\") {
  id: Int! @unique
  extraPointsAttempts: String @pgColumn(name: \\"extra_points_attempts\\")
  extraPointsBlocked: String @pgColumn(name: \\"extra_points_blocked\\")
  extraPointsMade: String @pgColumn(name: \\"extra_points_made\\")
  extraPointsMissed: String @pgColumn(name: \\"extra_points_missed\\")
  fieldGoalAttempts: String @pgColumn(name: \\"field_goal_attempts\\")
  fieldGoalsBlocked: String @pgColumn(name: \\"field_goals_blocked\\")
  fieldGoalsMade: String @pgColumn(name: \\"field_goals_made\\")
  fieldGoalsMissed: String @pgColumn(name: \\"field_goals_missed\\")
  safetiesAgainst: String @pgColumn(name: \\"safeties_against\\")
  touchbacksTotal: String @pgColumn(name: \\"touchbacks_total\\")
  touchdownsDefensive: String @pgColumn(name: \\"touchdowns_defensive\\")
  touchdownsPassing: String @pgColumn(name: \\"touchdowns_passing\\")
  touchdownsRushing: String @pgColumn(name: \\"touchdowns_rushing\\")
  touchdownsSpecialTeams: String @pgColumn(name: \\"touchdowns_special_teams\\")
  touchdownsTotal: String @pgColumn(name: \\"touchdowns_total\\")
  twoPointConversionsAttempts: String @pgColumn(name: \\"two_point_conversions_attempts\\")
  twoPointConversionsMade: String @pgColumn(name: \\"two_point_conversions_made\\")
}

type AmericanFootballSpecialTeamsStat @pgTable(name: \\"american_football_special_teams_stats\\") {
  id: Int! @unique
  fairCatches: String @pgColumn(name: \\"fair_catches\\")
  puntsAverage: String @pgColumn(name: \\"punts_average\\")
  puntsBlocked: String @pgColumn(name: \\"punts_blocked\\")
  puntsInside20: String @pgColumn(name: \\"punts_inside_20\\")
  puntsInside20Percentage: String @pgColumn(name: \\"punts_inside_20_percentage\\")
  puntsLongest: String @pgColumn(name: \\"punts_longest\\")
  puntsTotal: String @pgColumn(name: \\"punts_total\\")
  puntsYardsGross: String @pgColumn(name: \\"punts_yards_gross\\")
  puntsYardsNet: String @pgColumn(name: \\"punts_yards_net\\")
  returnsKickoffAverage: String @pgColumn(name: \\"returns_kickoff_average\\")
  returnsKickoffLongest: String @pgColumn(name: \\"returns_kickoff_longest\\")
  returnsKickoffTotal: String @pgColumn(name: \\"returns_kickoff_total\\")
  returnsKickoffTouchdown: String @pgColumn(name: \\"returns_kickoff_touchdown\\")
  returnsKickoffYards: String @pgColumn(name: \\"returns_kickoff_yards\\")
  returnsPuntAverage: String @pgColumn(name: \\"returns_punt_average\\")
  returnsPuntLongest: String @pgColumn(name: \\"returns_punt_longest\\")
  returnsPuntTotal: String @pgColumn(name: \\"returns_punt_total\\")
  returnsPuntTouchdown: String @pgColumn(name: \\"returns_punt_touchdown\\")
  returnsPuntYards: String @pgColumn(name: \\"returns_punt_yards\\")
  returnsTotal: String @pgColumn(name: \\"returns_total\\")
  returnsYards: String @pgColumn(name: \\"returns_yards\\")
  touchbacksInterceptions: String @pgColumn(name: \\"touchbacks_interceptions\\")
  touchbacksInterceptionsPercentage: String @pgColumn(name: \\"touchbacks_interceptions_percentage\\")
  touchbacksKickoffs: String @pgColumn(name: \\"touchbacks_kickoffs\\")
  touchbacksKickoffsPercentage: String @pgColumn(name: \\"touchbacks_kickoffs_percentage\\")
  touchbacksPunts: String @pgColumn(name: \\"touchbacks_punts\\")
  touchbacksPuntsPercentage: String @pgColumn(name: \\"touchbacks_punts_percentage\\")
  touchbacksTotal: String @pgColumn(name: \\"touchbacks_total\\")
  touchbacksTotalPercentage: String @pgColumn(name: \\"touchbacks_total_percentage\\")
}

type BaseballActionContactDetail @pgTable(name: \\"baseball_action_contact_details\\") {
  id: Int! @unique
  baseballActionPitch: BaseballActionPitch! @pgColumn(name: \\"baseball_action_pitch_id\\")
  comment: String
  location: String
  strength: String
  trajectoryCoordinates: String @pgColumn(name: \\"trajectory_coordinates\\")
  trajectoryFormula: String @pgColumn(name: \\"trajectory_formula\\")
  velocity: Int
}

type BaseballActionPitch @pgTable(name: \\"baseball_action_pitches\\") {
  id: Int! @unique
  ballType: String @pgColumn(name: \\"ball_type\\")
  baseballActionContactDetails: [BaseballActionContactDetail]
  baseballActionPlay: BaseballActionPlay! @pgColumn(name: \\"baseball_action_play_id\\")
  baseballDefensiveGroup: BaseballDefensiveGroup @pgColumn(name: \\"baseball_defensive_group_id\\")
  comment: String
  pitchLocation: String @pgColumn(name: \\"pitch_location\\")
  pitchType: String @pgColumn(name: \\"pitch_type\\")
  pitchVelocity: Int @pgColumn(name: \\"pitch_velocity\\")
  sequenceNumber: Int @pgColumn(name: \\"sequence_number\\")
  strikeType: String @pgColumn(name: \\"strike_type\\")
  trajectoryCoordinates: String @pgColumn(name: \\"trajectory_coordinates\\")
  trajectoryFormula: String @pgColumn(name: \\"trajectory_formula\\")
  umpireCall: String @pgColumn(name: \\"umpire_call\\")
}

type BaseballActionPlay @pgTable(name: \\"baseball_action_plays\\") {
  id: Int! @unique
  baseballActionPitches: [BaseballActionPitch]
  baseballDefensiveGroupId: Int @pgColumn(name: \\"baseball_defensive_group_id\\")
  baseballEventState: BaseballEventState! @pgColumn(name: \\"baseball_event_state_id\\")
  comment: String
  earnedRunsScored: String @pgColumn(name: \\"earned_runs_scored\\")
  notation: String
  notationYaml: String @pgColumn(name: \\"notation_yaml\\")
  outsRecorded: Int @pgColumn(name: \\"outs_recorded\\")
  playType: String @pgColumn(name: \\"play_type\\")
  rbi: Int
  runnerOnFirstAdvance: Int @pgColumn(name: \\"runner_on_first_advance\\")
  runnerOnSecondAdvance: Int @pgColumn(name: \\"runner_on_second_advance\\")
  runnerOnThirdAdvance: Int @pgColumn(name: \\"runner_on_third_advance\\")
  runsScored: Int @pgColumn(name: \\"runs_scored\\")
}

type BaseballActionSubstitution @pgTable(name: \\"baseball_action_substitutions\\") {
  id: Int! @unique
  baseballEventState: BaseballEventState! @pgColumn(name: \\"baseball_event_state_id\\")
  comment: String
  personOriginal: Person @pgColumn(name: \\"person_original_id\\") @relation(name: \\"BaseballActionSubstitutionPersonOriginalToPersonBaseballActionSubstitutions\\")
  personOriginalLineupSlot: Int @pgColumn(name: \\"person_original_lineup_slot\\")
  personOriginalPosition: Position @pgColumn(name: \\"person_original_position_id\\") @relation(name: \\"BaseballActionSubstitutionPersonOriginalPositionToPositionBaseballActionSubstitutions\\")
  personReplacing: Person @pgColumn(name: \\"person_replacing_id\\") @relation(name: \\"BaseballActionSubstitutionPersonReplacingToPersonBaseballActionSubstitutions\\")
  personReplacingLineupSlot: Int @pgColumn(name: \\"person_replacing_lineup_slot\\")
  personReplacingPosition: Position @pgColumn(name: \\"person_replacing_position_id\\") @relation(name: \\"BaseballActionSubstitutionPersonReplacingPositionToPositionBaseballActionSubstitutions\\")
  personType: String @pgColumn(name: \\"person_type\\")
  sequenceNumber: Int @pgColumn(name: \\"sequence_number\\")
  substitutionReason: String @pgColumn(name: \\"substitution_reason\\")
}

type BaseballDefensiveGroup @pgTable(name: \\"baseball_defensive_group\\") @relationTable {
  id: Int! @unique
  baseballActionPitches: [BaseballActionPitch]
  baseballDefensivePlayers: [BaseballDefensivePlayer]
}

type BaseballDefensivePlayer @pgTable(name: \\"baseball_defensive_players\\") {
  id: Int! @unique
  baseballDefensiveGroup: BaseballDefensiveGroup! @pgColumn(name: \\"baseball_defensive_group_id\\")
  player: Person! @pgColumn(name: \\"player_id\\")
  position: Position! @pgColumn(name: \\"position_id\\")
}

type BaseballDefensiveStat @pgTable(name: \\"baseball_defensive_stats\\") {
  id: Int! @unique
  assists: Int
  defensiveAverage: Float @pgColumn(name: \\"defensive_average\\")
  doublePlays: Int @pgColumn(name: \\"double_plays\\")
  errors: Int
  errorsCatchersInterference: Int @pgColumn(name: \\"errors_catchers_interference\\")
  errorsPassedBall: Int @pgColumn(name: \\"errors_passed_ball\\")
  fieldingPercentage: Float @pgColumn(name: \\"fielding_percentage\\")
  putouts: Int
  triplePlays: Int @pgColumn(name: \\"triple_plays\\")
}

type BaseballEventState @pgTable(name: \\"baseball_event_states\\") {
  id: Int! @unique
  atBatNumber: Int @pgColumn(name: \\"at_bat_number\\")
  balls: Int
  baseballActionPlays: [BaseballActionPlay]
  baseballActionSubstitutions: [BaseballActionSubstitution]
  batter: Person @pgColumn(name: \\"batter_id\\") @relation(name: \\"BaseballEventStateBatterToPersonBaseballEventStates\\")
  batterSide: String @pgColumn(name: \\"batter_side\\")
  context: String
  currentState: Int @pgColumn(name: \\"current_state\\")
  event: Event! @pgColumn(name: \\"event_id\\")
  inningHalf: String @pgColumn(name: \\"inning_half\\")
  inningValue: Int @pgColumn(name: \\"inning_value\\")
  outs: Int
  pitcher: Person @pgColumn(name: \\"pitcher_id\\") @relation(name: \\"BaseballEventStatePitcherToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  runner_on_first_id: Person @relation(name: \\"BaseballEventStateRunner_on_first_idToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  runner_on_second_id: Person @relation(name: \\"BaseballEventStateRunner_on_second_idToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  runner_on_third_id: Person @relation(name: \\"BaseballEventStateRunner_on_third_idToPersonBaseballEventStates\\")
  runnerOnFirst: Int @pgColumn(name: \\"runner_on_first\\")
  runnerOnSecond: Int @pgColumn(name: \\"runner_on_second\\")
  runnerOnThird: Int @pgColumn(name: \\"runner_on_third\\")
  runsThisInningHalf: Int @pgColumn(name: \\"runs_this_inning_half\\")
  sequenceNumber: Int @pgColumn(name: \\"sequence_number\\")
  strikes: Int
}

type BaseballOffensiveStat @pgTable(name: \\"baseball_offensive_stats\\") {
  id: Int! @unique
  atBats: Int @pgColumn(name: \\"at_bats\\")
  atBatsPerHomeRun: Float @pgColumn(name: \\"at_bats_per_home_run\\")
  atBatsPerRbi: Float @pgColumn(name: \\"at_bats_per_rbi\\")
  average: Float
  basesOnBalls: Int @pgColumn(name: \\"bases_on_balls\\")
  defensiveInterferanceReaches: Int @pgColumn(name: \\"defensive_interferance_reaches\\")
  doubles: Int
  grandSlams: Int @pgColumn(name: \\"grand_slams\\")
  groundedIntoDoublePlay: Int @pgColumn(name: \\"grounded_into_double_play\\")
  hitByPitch: Int @pgColumn(name: \\"hit_by_pitch\\")
  hits: Int
  hitsExtraBase: Int @pgColumn(name: \\"hits_extra_base\\")
  homeRuns: Int @pgColumn(name: \\"home_runs\\")
  leftInScoringPosition: Int @pgColumn(name: \\"left_in_scoring_position\\")
  leftOnBase: Int @pgColumn(name: \\"left_on_base\\")
  movedUp: Int @pgColumn(name: \\"moved_up\\")
  onBasePercentage: Float @pgColumn(name: \\"on_base_percentage\\")
  onBasePlusSlugging: Float @pgColumn(name: \\"on_base_plus_slugging\\")
  plateAppearances: Int @pgColumn(name: \\"plate_appearances\\")
  plateAppearancesPerHomeRun: Float @pgColumn(name: \\"plate_appearances_per_home_run\\")
  plateAppearancesPerRbi: Float @pgColumn(name: \\"plate_appearances_per_rbi\\")
  rbi: Int
  runsScored: Int @pgColumn(name: \\"runs_scored\\")
  sacBunts: Int @pgColumn(name: \\"sac_bunts\\")
  sacFlies: Int @pgColumn(name: \\"sac_flies\\")
  singles: Int
  sluggingPercentage: Float @pgColumn(name: \\"slugging_percentage\\")
  stolenBases: Int @pgColumn(name: \\"stolen_bases\\")
  stolenBasesAverage: Float @pgColumn(name: \\"stolen_bases_average\\")
  stolenBasesCaught: Int @pgColumn(name: \\"stolen_bases_caught\\")
  strikeouts: Int
  totalBases: Int @pgColumn(name: \\"total_bases\\")
  triples: Int
}

type BaseballPitchingStat @pgTable(name: \\"baseball_pitching_stats\\") {
  id: Int! @unique
  balks: Int
  basesOnBalls: Int @pgColumn(name: \\"bases_on_balls\\")
  basesOnBallsIntentional: Int @pgColumn(name: \\"bases_on_balls_intentional\\")
  doublesAllowed: Int @pgColumn(name: \\"doubles_allowed\\")
  earnedRuns: Int @pgColumn(name: \\"earned_runs\\")
  era: Float
  errorsHitWithPitch: Int @pgColumn(name: \\"errors_hit_with_pitch\\")
  errorsWildPitch: Int @pgColumn(name: \\"errors_wild_pitch\\")
  eventCredit: String @pgColumn(name: \\"event_credit\\")
  gamesComplete: Int @pgColumn(name: \\"games_complete\\")
  gamesFinished: Int @pgColumn(name: \\"games_finished\\")
  hits: Int
  homeRunsAllowed: Int @pgColumn(name: \\"home_runs_allowed\\")
  inheritedRunnersScored: Int @pgColumn(name: \\"inherited_runners_scored\\")
  inningsPitched: String @pgColumn(name: \\"innings_pitched\\")
  losses: Int
  numberOfPitches: Int @pgColumn(name: \\"number_of_pitches\\")
  pickOffs: Int @pgColumn(name: \\"pick_offs\\")
  runsAllowed: Int @pgColumn(name: \\"runs_allowed\\")
  saveCredit: String @pgColumn(name: \\"save_credit\\")
  saves: Int
  shutouts: Int
  singlesAllowed: Int @pgColumn(name: \\"singles_allowed\\")
  strikeouts: Int
  strikeoutToBbRatio: Float @pgColumn(name: \\"strikeout_to_bb_ratio\\")
  triplesAllowed: Int @pgColumn(name: \\"triples_allowed\\")
  unearnedRuns: Int @pgColumn(name: \\"unearned_runs\\")
  winningPercentage: Float @pgColumn(name: \\"winning_percentage\\")
  wins: Int
}

type BasketballDefensiveStat @pgTable(name: \\"basketball_defensive_stats\\") {
  id: Int! @unique
  blocksPerGame: String @pgColumn(name: \\"blocks_per_game\\")
  blocksTotal: String @pgColumn(name: \\"blocks_total\\")
  stealsPerGame: String @pgColumn(name: \\"steals_per_game\\")
  stealsTotal: String @pgColumn(name: \\"steals_total\\")
}

type BasketballEventState @pgTable(name: \\"basketball_event_states\\") {
  id: Int! @unique
  context: String
  currentState: Int @pgColumn(name: \\"current_state\\")
  event: Event! @pgColumn(name: \\"event_id\\")
  periodTimeElapsed: String @pgColumn(name: \\"period_time_elapsed\\")
  periodTimeRemaining: String @pgColumn(name: \\"period_time_remaining\\")
  periodValue: String @pgColumn(name: \\"period_value\\")
  sequenceNumber: Int @pgColumn(name: \\"sequence_number\\")
}

type BasketballOffensiveStat @pgTable(name: \\"basketball_offensive_stats\\") {
  id: Int! @unique
  assistsPerGame: String @pgColumn(name: \\"assists_per_game\\")
  assistsTotal: String @pgColumn(name: \\"assists_total\\")
  fieldGoalsAttempted: Int @pgColumn(name: \\"field_goals_attempted\\")
  fieldGoalsAttemptedPerGame: String @pgColumn(name: \\"field_goals_attempted_per_game\\")
  fieldGoalsMade: Int @pgColumn(name: \\"field_goals_made\\")
  fieldGoalsPercentage: String @pgColumn(name: \\"field_goals_percentage\\")
  fieldGoalsPercentageAdjusted: String @pgColumn(name: \\"field_goals_percentage_adjusted\\")
  fieldGoalsPerGame: String @pgColumn(name: \\"field_goals_per_game\\")
  freeThrowsAttempted: String @pgColumn(name: \\"free_throws_attempted\\")
  freeThrowsAttemptedPerGame: String @pgColumn(name: \\"free_throws_attempted_per_game\\")
  freeThrowsMade: String @pgColumn(name: \\"free_throws_made\\")
  freeThrowsPercentage: String @pgColumn(name: \\"free_throws_percentage\\")
  freeThrowsPerGame: String @pgColumn(name: \\"free_throws_per_game\\")
  pointsScoredInPaint: String @pgColumn(name: \\"points_scored_in_paint\\")
  pointsScoredOffTurnovers: String @pgColumn(name: \\"points_scored_off_turnovers\\")
  pointsScoredOnFastBreak: String @pgColumn(name: \\"points_scored_on_fast_break\\")
  pointsScoredOnSecondChance: String @pgColumn(name: \\"points_scored_on_second_chance\\")
  pointsScoredPerGame: String @pgColumn(name: \\"points_scored_per_game\\")
  pointsScoredTotal: String @pgColumn(name: \\"points_scored_total\\")
  threePointersAttempted: Int @pgColumn(name: \\"three_pointers_attempted\\")
  threePointersAttemptedPerGame: String @pgColumn(name: \\"three_pointers_attempted_per_game\\")
  threePointersMade: Int @pgColumn(name: \\"three_pointers_made\\")
  threePointersPercentage: String @pgColumn(name: \\"three_pointers_percentage\\")
  threePointersPerGame: String @pgColumn(name: \\"three_pointers_per_game\\")
  turnoversPerGame: String @pgColumn(name: \\"turnovers_per_game\\")
  turnoversTotal: String @pgColumn(name: \\"turnovers_total\\")
}

type BasketballReboundingStat @pgTable(name: \\"basketball_rebounding_stats\\") {
  id: Int! @unique
  reboundsDefensive: String @pgColumn(name: \\"rebounds_defensive\\")
  reboundsOffensive: String @pgColumn(name: \\"rebounds_offensive\\")
  reboundsPerGame: String @pgColumn(name: \\"rebounds_per_game\\")
  reboundsTotal: String @pgColumn(name: \\"rebounds_total\\")
  teamReboundsDefensive: String @pgColumn(name: \\"team_rebounds_defensive\\")
  teamReboundsOffensive: String @pgColumn(name: \\"team_rebounds_offensive\\")
  teamReboundsPerGame: String @pgColumn(name: \\"team_rebounds_per_game\\")
  teamReboundsTotal: String @pgColumn(name: \\"team_rebounds_total\\")
}

type BasketballTeamStat @pgTable(name: \\"basketball_team_stats\\") {
  id: Int! @unique
  foulsTotal: String @pgColumn(name: \\"fouls_total\\")
  largestLead: String @pgColumn(name: \\"largest_lead\\")
  timeoutsLeft: String @pgColumn(name: \\"timeouts_left\\")
  turnoverMargin: String @pgColumn(name: \\"turnover_margin\\")
}

type Bookmaker @pgTable(name: \\"bookmakers\\") {
  id: Int! @unique
  bookmakerKey: String @pgColumn(name: \\"bookmaker_key\\")
  location: Location @pgColumn(name: \\"location_id\\")
  publisher: Publisher! @pgColumn(name: \\"publisher_id\\")
  wageringMoneylines: [WageringMoneyline]
  wageringOddsLines: [WageringOddsLine]
  wageringRunlines: [WageringRunline]
  wageringStraightSpreadLines: [WageringStraightSpreadLine]
  wageringTotalScoreLines: [WageringTotalScoreLine]
}

type CorePersonStat @pgTable(name: \\"core_person_stats\\") {
  id: Int! @unique
  eventsPlayed: Int @pgColumn(name: \\"events_played\\")
  eventsStarted: Int @pgColumn(name: \\"events_started\\")
  position: Position @pgColumn(name: \\"position_id\\")
  timePlayedEvent: String @pgColumn(name: \\"time_played_event\\")
  timePlayedEventAverage: String @pgColumn(name: \\"time_played_event_average\\")
  timePlayedTotal: String @pgColumn(name: \\"time_played_total\\")
}

type CoreStat @pgTable(name: \\"core_stats\\") {
  id: Int! @unique
  score: String
  scoreAttempts: String @pgColumn(name: \\"score_attempts\\")
  scoreAttemptsOpposing: String @pgColumn(name: \\"score_attempts_opposing\\")
  scoreOpposing: String @pgColumn(name: \\"score_opposing\\")
  scorePercentage: String @pgColumn(name: \\"score_percentage\\")
  scorePercentageOpposing: String @pgColumn(name: \\"score_percentage_opposing\\")
}

type DbInfo @pgTable(name: \\"db_info\\") {
  version: String! @default(value: \\"16\\")
}

type DisplayName @pgTable(name: \\"display_names\\") {
  id: Int! @unique
  abbreviation: String
  alias: String
  entityId: Int! @pgColumn(name: \\"entity_id\\")
  entityType: String! @pgColumn(name: \\"entity_type\\")
  firstName: String @pgColumn(name: \\"first_name\\")
  fullName: String @pgColumn(name: \\"full_name\\")
  language: String!
  lastName: String @pgColumn(name: \\"last_name\\")
  middleName: String @pgColumn(name: \\"middle_name\\")
  prefix: String
  shortName: String @pgColumn(name: \\"short_name\\")
  suffix: String
}

type Document @pgTable(name: \\"documents\\") {
  id: Int! @unique
  affiliationsDocuments: [AffiliationsDocument]
  dateTime: DateTime @pgColumn(name: \\"date_time\\")
  dbLoadingDateTime: DateTime @pgColumn(name: \\"db_loading_date_time\\")
  docId: String! @pgColumn(name: \\"doc_id\\")
  documentContents: [DocumentContent]
  documentFixture: DocumentFixture! @pgColumn(name: \\"document_fixture_id\\")
  documentFixturesEvents: [DocumentFixturesEvent]
  documentPackageEntry: [DocumentPackageEntry]
  documentsMedia: [DocumentsMedia]
  eventsDocuments: [EventsDocument]
  language: String
  latestRevisions: [LatestRevision]
  personsDocuments: [PersonsDocument]
  priority: String
  publisher: Publisher! @pgColumn(name: \\"publisher_id\\") @relation(name: \\"DocumentPublisherToPublisherDocuments\\")
  revisionId: String @pgColumn(name: \\"revision_id\\")
  source: Publisher @pgColumn(name: \\"source_id\\") @relation(name: \\"DocumentSourceToPublisherDocuments\\")
  statsCoverage: String @pgColumn(name: \\"stats_coverage\\")
  teamsDocuments: [TeamsDocument]
  title: String
}

type DocumentClass @pgTable(name: \\"document_classes\\") {
  id: Int! @unique
  documentFixtures: [DocumentFixture]
  name: String
}

type DocumentContent @pgTable(name: \\"document_contents\\") {
  id: Int! @unique
  abstract: String
  document: Document! @pgColumn(name: \\"document_id\\")
  sportsml: String
}

type DocumentFixture @pgTable(name: \\"document_fixtures\\") {
  id: Int! @unique
  documentClass: DocumentClass! @pgColumn(name: \\"document_class_id\\")
  documentFixturesEvents: [DocumentFixturesEvent]
  documents: [Document]
  fixtureKey: String @pgColumn(name: \\"fixture_key\\")
  name: String
  publisher: Publisher! @pgColumn(name: \\"publisher_id\\")
}

type DocumentFixturesEvent @pgTable(name: \\"document_fixtures_events\\") {
  id: Int! @unique
  documentFixture: DocumentFixture! @pgColumn(name: \\"document_fixture_id\\")
  event: Event! @pgColumn(name: \\"event_id\\")
  lastUpdate: DateTime @pgColumn(name: \\"last_update\\")
  latestDocument: Document! @pgColumn(name: \\"latest_document_id\\")
}

type DocumentPackage @pgTable(name: \\"document_packages\\") {
  id: Int! @unique
  dateTime: DateTime @pgColumn(name: \\"date_time\\")
  documentPackageEntry: [DocumentPackageEntry]
  packageKey: String @pgColumn(name: \\"package_key\\")
  packageName: String @pgColumn(name: \\"package_name\\")
}

type DocumentPackageEntry @pgTable(name: \\"document_package_entry\\") {
  id: Int! @unique
  document: Document! @pgColumn(name: \\"document_id\\")
  documentPackage: DocumentPackage! @pgColumn(name: \\"document_package_id\\")
  headline: String
  rank: String
  shortHeadline: String @pgColumn(name: \\"short_headline\\")
}

type DocumentsMedia @pgTable(name: \\"documents_media\\") {
  id: Int! @unique
  document: Document! @pgColumn(name: \\"document_id\\")
  media: Media! @pgColumn(name: \\"media_id\\")
  mediaCaption: MediaCaption! @pgColumn(name: \\"media_caption_id\\")
}

type Event @pgTable(name: \\"events\\") {
  id: Int! @unique
  affiliationsEvents: [AffiliationsEvent]
  americanFootballEventStates: [AmericanFootballEventState]
  attendance: String
  baseballEventStates: [BaseballEventState]
  basketballEventStates: [BasketballEventState]
  documentFixturesEvents: [DocumentFixturesEvent]
  duration: String
  eventKey: String! @pgColumn(name: \\"event_key\\")
  eventsDocuments: [EventsDocument]
  eventsMedia: [EventsMedia]
  eventsSubSeasons: [EventsSubSeason]
  eventStatus: String @pgColumn(name: \\"event_status\\")
  iceHockeyEventStates: [IceHockeyEventState]
  lastUpdate: DateTime @pgColumn(name: \\"last_update\\")
  motorRacingEventStates: [MotorRacingEventState]
  participantsEvents: [ParticipantsEvent]
  personEventMetadata: [PersonEventMetadatum]
  publisher: Publisher! @pgColumn(name: \\"publisher_id\\")
  site: Site @pgColumn(name: \\"site_id\\")
  siteAlignment: String @pgColumn(name: \\"site_alignment\\")
  soccerEventStates: [SoccerEventState]
  startDateTime: DateTime @pgColumn(name: \\"start_date_time\\")
  tennisEventStates: [TennisEventState]
  wageringMoneylines: [WageringMoneyline]
  wageringOddsLines: [WageringOddsLine]
  wageringRunlines: [WageringRunline]
  wageringStraightSpreadLines: [WageringStraightSpreadLine]
  wageringTotalScoreLines: [WageringTotalScoreLine]
  weatherConditions: [WeatherCondition]
}

type EventsDocument @pgTable(name: \\"events_documents\\") @relationTable {
  document: Document! @pgColumn(name: \\"document_id\\")
  event: Event! @pgColumn(name: \\"event_id\\")
}

type EventsMedia @pgTable(name: \\"events_media\\") @relationTable {
  event: Event! @pgColumn(name: \\"event_id\\")
  media: Media! @pgColumn(name: \\"media_id\\")
}

type EventsSubSeason @pgTable(name: \\"events_sub_seasons\\") @relationTable {
  event: Event! @pgColumn(name: \\"event_id\\")
  subSeason: SubSeason! @pgColumn(name: \\"sub_season_id\\")
}

type IceHockeyActionParticipant @pgTable(name: \\"ice_hockey_action_participants\\") {
  id: Int! @unique
  iceHockeyActionPlayId: Int! @pgColumn(name: \\"ice_hockey_action_play_id\\")
  participantRole: String! @pgColumn(name: \\"participant_role\\")
  personId: Int! @pgColumn(name: \\"person_id\\")
  pointCredit: Int @pgColumn(name: \\"point_credit\\")
}

type IceHockeyActionPlay @pgTable(name: \\"ice_hockey_action_plays\\") {
  id: Int! @unique
  comment: String
  iceHockeyEventStateId: Int! @pgColumn(name: \\"ice_hockey_event_state_id\\")
  playResult: String @pgColumn(name: \\"play_result\\")
  playType: String @pgColumn(name: \\"play_type\\")
  scoreAttemptType: String @pgColumn(name: \\"score_attempt_type\\")
}

type IceHockeyDefensiveStat @pgTable(name: \\"ice_hockey_defensive_stats\\") {
  id: Int! @unique
  goalsAgainstAverage: String @pgColumn(name: \\"goals_against_average\\")
  goalsEmptyNetAllowed: String @pgColumn(name: \\"goals_empty_net_allowed\\")
  goalsPenaltyShotAllowed: String @pgColumn(name: \\"goals_penalty_shot_allowed\\")
  goalsPowerPlayAllowed: String @pgColumn(name: \\"goals_power_play_allowed\\")
  goalsShootoutAllowed: String @pgColumn(name: \\"goals_shootout_allowed\\")
  goalsShortHandedAllowed: String @pgColumn(name: \\"goals_short_handed_allowed\\")
  hits: String
  minutesPenaltyKilling: String @pgColumn(name: \\"minutes_penalty_killing\\")
  penaltyKillingAmount: String @pgColumn(name: \\"penalty_killing_amount\\")
  penaltyKillingPercentage: String @pgColumn(name: \\"penalty_killing_percentage\\")
  savePercentage: String @pgColumn(name: \\"save_percentage\\")
  saves: String
  shotsBlocked: String @pgColumn(name: \\"shots_blocked\\")
  shotsPenaltyShotAllowed: String @pgColumn(name: \\"shots_penalty_shot_allowed\\")
  shotsPowerPlayAllowed: String @pgColumn(name: \\"shots_power_play_allowed\\")
  shotsShootoutAllowed: String @pgColumn(name: \\"shots_shootout_allowed\\")
  shutouts: String
  takeaways: String
}

type IceHockeyEventState @pgTable(name: \\"ice_hockey_event_states\\") {
  id: Int! @unique
  context: String
  currentState: Int @pgColumn(name: \\"current_state\\")
  event: Event! @pgColumn(name: \\"event_id\\")
  periodTimeElapsed: String @pgColumn(name: \\"period_time_elapsed\\")
  periodTimeRemaining: String @pgColumn(name: \\"period_time_remaining\\")
  periodValue: String @pgColumn(name: \\"period_value\\")
  sequenceNumber: Int @pgColumn(name: \\"sequence_number\\")
}

type IceHockeyOffensiveStat @pgTable(name: \\"ice_hockey_offensive_stats\\") {
  id: Int! @unique
  assists: String
  faceoffLosses: String @pgColumn(name: \\"faceoff_losses\\")
  faceoffWinPercentage: String @pgColumn(name: \\"faceoff_win_percentage\\")
  faceoffWins: String @pgColumn(name: \\"faceoff_wins\\")
  giveaways: String
  goalsEmptyNet: String @pgColumn(name: \\"goals_empty_net\\")
  goalsEvenStrength: String @pgColumn(name: \\"goals_even_strength\\")
  goalsGameTying: String @pgColumn(name: \\"goals_game_tying\\")
  goalsGameWinning: String @pgColumn(name: \\"goals_game_winning\\")
  goalsOvertime: String @pgColumn(name: \\"goals_overtime\\")
  goalsPenaltyShot: String @pgColumn(name: \\"goals_penalty_shot\\")
  goalsPowerPlay: String @pgColumn(name: \\"goals_power_play\\")
  goalsShootout: String @pgColumn(name: \\"goals_shootout\\")
  goalsShortHanded: String @pgColumn(name: \\"goals_short_handed\\")
  minutesPowerPlay: String @pgColumn(name: \\"minutes_power_play\\")
  points: String
  powerPlayAmount: String @pgColumn(name: \\"power_play_amount\\")
  powerPlayPercentage: String @pgColumn(name: \\"power_play_percentage\\")
  scoringChances: String @pgColumn(name: \\"scoring_chances\\")
  shotsPenaltyShotMissed: String @pgColumn(name: \\"shots_penalty_shot_missed\\")
  shotsPenaltyShotPercentage: String @pgColumn(name: \\"shots_penalty_shot_percentage\\")
  shotsPenaltyShotTaken: String @pgColumn(name: \\"shots_penalty_shot_taken\\")
}

type IceHockeyPlayerStat @pgTable(name: \\"ice_hockey_player_stats\\") {
  id: Int! @unique
  plusMinus: String @pgColumn(name: \\"plus_minus\\")
}

type InjuryPhase @pgTable(name: \\"injury_phases\\") {
  id: Int! @unique
  disabledList: String @pgColumn(name: \\"disabled_list\\")
  endDateTime: DateTime @pgColumn(name: \\"end_date_time\\")
  injuryComment: String @pgColumn(name: \\"injury_comment\\")
  injurySide: String @pgColumn(name: \\"injury_side\\")
  injuryStatus: String @pgColumn(name: \\"injury_status\\")
  injuryType: String @pgColumn(name: \\"injury_type\\")
  person: Person! @pgColumn(name: \\"person_id\\")
  phaseType: String @pgColumn(name: \\"phase_type\\")
  season: Season @pgColumn(name: \\"season_id\\")
  startDateTime: DateTime @pgColumn(name: \\"start_date_time\\")
}

type KeyAlias @pgTable(name: \\"key_aliases\\") {
  id: Int! @unique
  keyId: Int! @pgColumn(name: \\"key_id\\")
  keyRoot: KeyRoot! @pgColumn(name: \\"key_root_id\\")
}

type KeyRoot @pgTable(name: \\"key_roots\\") {
  id: Int! @unique
  keyAliases: [KeyAlias]
  keyType: String @pgColumn(name: \\"key_type\\")
}

type LatestRevision @pgTable(name: \\"latest_revisions\\") {
  id: Int! @unique
  latestDocument: Document! @pgColumn(name: \\"latest_document_id\\")
  revisionId: String! @pgColumn(name: \\"revision_id\\")
}

type Location @pgTable(name: \\"locations\\") {
  id: Int! @unique
  addresses: [Address]
  bookmakers: [Bookmaker]
  countryCode: String @pgColumn(name: \\"country_code\\")
  latitude: String
  longitude: String
  media: [Media]
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Person.birthLocation.
  # persons: [Person] @relation(name: \\"LocationPersonsToPersonBirthLocation\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Person.deathLocation.
  # persons: [Person] @relation(name: \\"LocationPersonsToPersonDeathLocation\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Person.hometownLocation.
  # persons: [Person] @relation(name: \\"LocationPersonsToPersonHometownLocation\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Person.residenceLocation.
  # persons: [Person] @relation(name: \\"LocationPersonsToPersonResidenceLocation\\")
  sites: [Site]
  timezone: String
}

type Media @pgTable(name: \\"media\\") {
  id: Int! @unique
  affiliationsMedia: [AffiliationsMedia]
  creationLocation: Location! @pgColumn(name: \\"creation_location_id\\")
  credit: Person! @pgColumn(name: \\"credit_id\\")
  dateTime: String @pgColumn(name: \\"date_time\\")
  dbLoadingDateTime: DateTime @pgColumn(name: \\"db_loading_date_time\\")
  documentsMedia: [DocumentsMedia]
  eventsMedia: [EventsMedia]
  mediaCaptions: [MediaCaption]
  mediaContents: [MediaContent]
  mediaKeywords: [MediaKeyword]
  mediaType: String @pgColumn(name: \\"media_type\\")
  objectId: Int @pgColumn(name: \\"object_id\\")
  personsMedia: [PersonsMedia]
  publisher: Publisher! @pgColumn(name: \\"publisher_id\\")
  revisionId: Int @pgColumn(name: \\"revision_id\\")
  sourceId: Int @pgColumn(name: \\"source_id\\")
  teamsMedia: [TeamsMedia]
}

type MediaCaption @pgTable(name: \\"media_captions\\") {
  id: Int! @unique
  caption: String
  captionAuthor: Person! @pgColumn(name: \\"caption_author_id\\")
  captionSize: String @pgColumn(name: \\"caption_size\\")
  captionType: String @pgColumn(name: \\"caption_type\\")
  documentsMedia: [DocumentsMedia]
  language: String
  media: Media! @pgColumn(name: \\"media_id\\")
}

type MediaContent @pgTable(name: \\"media_contents\\") {
  id: Int! @unique
  duration: String
  fileSize: String @pgColumn(name: \\"file_size\\")
  format: String
  height: String
  media: Media! @pgColumn(name: \\"media_id\\")
  mimeType: String @pgColumn(name: \\"mime_type\\")
  object: String
  resolution: String
  width: String
}

type MediaKeyword @pgTable(name: \\"media_keywords\\") {
  id: Int! @unique
  keyword: String
  media: Media! @pgColumn(name: \\"media_id\\")
}

type MotorRacingEventState @pgTable(name: \\"motor_racing_event_states\\") {
  id: Int! @unique
  context: String
  currentState: Int @pgColumn(name: \\"current_state\\")
  event: Event! @pgColumn(name: \\"event_id\\")
  flagState: String @pgColumn(name: \\"flag_state\\")
  lap: String
  lapsRemaining: String @pgColumn(name: \\"laps_remaining\\")
  sequenceNumber: Int @pgColumn(name: \\"sequence_number\\")
  timeElapsed: String @pgColumn(name: \\"time_elapsed\\")
}

type MotorRacingQualifyingStat @pgTable(name: \\"motor_racing_qualifying_stats\\") {
  id: Int! @unique
  grid: String
  polePosition: String @pgColumn(name: \\"pole_position\\")
  poleWins: String @pgColumn(name: \\"pole_wins\\")
  qualifyingPosition: String @pgColumn(name: \\"qualifying_position\\")
  qualifyingSpeed: String @pgColumn(name: \\"qualifying_speed\\")
  qualifyingSpeedUnits: String @pgColumn(name: \\"qualifying_speed_units\\")
  qualifyingTime: String @pgColumn(name: \\"qualifying_time\\")
}

type MotorRacingRaceStat @pgTable(name: \\"motor_racing_race_stats\\") {
  id: Int! @unique
  bonus: String
  distanceCompleted: String @pgColumn(name: \\"distance_completed\\")
  distanceLeading: String @pgColumn(name: \\"distance_leading\\")
  distanceUnits: String @pgColumn(name: \\"distance_units\\")
  finishes: String
  finishesTop10: String @pgColumn(name: \\"finishes_top_10\\")
  finishesTop5: String @pgColumn(name: \\"finishes_top_5\\")
  lapsAheadFollower: String @pgColumn(name: \\"laps_ahead_follower\\")
  lapsBehindLeader: String @pgColumn(name: \\"laps_behind_leader\\")
  lapsCompleted: String @pgColumn(name: \\"laps_completed\\")
  lapsLeadingTotal: String @pgColumn(name: \\"laps_leading_total\\")
  leadsTotal: String @pgColumn(name: \\"leads_total\\")
  money: String
  moneyUnits: String @pgColumn(name: \\"money_units\\")
  nonFinishes: String @pgColumn(name: \\"non_finishes\\")
  points: String
  pointsRookie: String @pgColumn(name: \\"points_rookie\\")
  racesLeading: String @pgColumn(name: \\"races_leading\\")
  speedAverage: String @pgColumn(name: \\"speed_average\\")
  speedUnits: String @pgColumn(name: \\"speed_units\\")
  starts: String
  status: String
  time: String
  timeAheadFollower: String @pgColumn(name: \\"time_ahead_follower\\")
  timeBehindLeader: String @pgColumn(name: \\"time_behind_leader\\")
  wins: String
}

type OutcomeTotal @pgTable(name: \\"outcome_totals\\") {
  id: Int! @unique
  losses: String
  outcomeHolderId: Int @pgColumn(name: \\"outcome_holder_id\\")
  outcomeHolderType: String @pgColumn(name: \\"outcome_holder_type\\")
  pointsDifference: String @pgColumn(name: \\"points_difference\\")
  pointsScoredAgainst: String @pgColumn(name: \\"points_scored_against\\")
  pointsScoredFor: String @pgColumn(name: \\"points_scored_for\\")
  rank: String
  standingPoints: String @pgColumn(name: \\"standing_points\\")
  standingSubgroup: StandingSubgroup! @pgColumn(name: \\"standing_subgroup_id\\")
  streakDuration: String @pgColumn(name: \\"streak_duration\\")
  streakEnd: DateTime @pgColumn(name: \\"streak_end\\")
  streakStart: DateTime @pgColumn(name: \\"streak_start\\")
  streakTotal: String @pgColumn(name: \\"streak_total\\")
  streakType: String @pgColumn(name: \\"streak_type\\")
  ties: String
  undecideds: String
  winningPercentage: String @pgColumn(name: \\"winning_percentage\\")
  wins: String
}

type ParticipantsEvent @pgTable(name: \\"participants_events\\") {
  id: Int! @unique
  alignment: String
  event: Event! @pgColumn(name: \\"event_id\\")
  eventOutcome: String @pgColumn(name: \\"event_outcome\\")
  participantId: Int! @pgColumn(name: \\"participant_id\\")
  participantType: String! @pgColumn(name: \\"participant_type\\")
  periods: [Period]
  rank: Int
  score: String
}

type Period @pgTable(name: \\"periods\\") {
  id: Int! @unique
  participantEvent: ParticipantsEvent! @pgColumn(name: \\"participant_event_id\\")
  periodValue: String @pgColumn(name: \\"period_value\\")
  score: String
  subPeriods: [SubPeriod]
}

type Person @pgTable(name: \\"persons\\") {
  id: Int! @unique
  americanFootballActionParticipants: [AmericanFootballActionParticipant]
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballActionSubstitution.personOriginal.
  # baseballActionSubstitutions: [BaseballActionSubstitution] @relation(name: \\"BaseballActionSubstitutionPersonOriginalToPersonBaseballActionSubstitutions\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballActionSubstitution.personReplacing.
  # baseballActionSubstitutions: [BaseballActionSubstitution] @relation(name: \\"BaseballActionSubstitutionPersonReplacingToPersonBaseballActionSubstitutions\\")
  baseballDefensivePlayers: [BaseballDefensivePlayer]
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballEventState.batter.
  # baseballEventStates: [BaseballEventState] @relation(name: \\"BaseballEventStateBatterToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballEventState.pitcher.
  # baseballEventStates: [BaseballEventState] @relation(name: \\"BaseballEventStatePitcherToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballEventState.runner_on_first_id.
  # baseballEventStates: [BaseballEventState] @relation(name: \\"BaseballEventStateRunner_on_first_idToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballEventState.runner_on_second_id.
  # baseballEventStates: [BaseballEventState] @relation(name: \\"BaseballEventStateRunner_on_second_idToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  baseballEventStates: [BaseballEventState] @relation(name: \\"BaseballEventStateRunner_on_third_idToPersonBaseballEventStates\\")
  birthDate: String @pgColumn(name: \\"birth_date\\")
  birthLocation: Location @pgColumn(name: \\"birth_location_id\\") @relation(name: \\"LocationPersonsToPersonBirthLocation\\")
  deathDate: String @pgColumn(name: \\"death_date\\")
  deathLocation: Location @pgColumn(name: \\"death_location_id\\") @relation(name: \\"LocationPersonsToPersonDeathLocation\\")
  gender: String
  hometownLocation: Location @pgColumn(name: \\"hometown_location_id\\") @relation(name: \\"LocationPersonsToPersonHometownLocation\\")
  injuryPhases: [InjuryPhase]
  media: [Media]
  mediaCaptions: [MediaCaption]
  personEventMetadata: [PersonEventMetadatum]
  personKey: String! @pgColumn(name: \\"person_key\\")
  personPhases: [PersonPhase]
  personsDocuments: [PersonsDocument]
  personsMedia: [PersonsMedia]
  publisher: Publisher! @pgColumn(name: \\"publisher_id\\")
  residenceLocation: Location @pgColumn(name: \\"residence_location_id\\") @relation(name: \\"LocationPersonsToPersonResidenceLocation\\")
}

type PersonEventMetadatum @pgTable(name: \\"person_event_metadata\\") {
  id: Int! @unique
  event: Event! @pgColumn(name: \\"event_id\\")
  health: String
  lineupSlot: Int @pgColumn(name: \\"lineup_slot\\")
  lineupSlotSequence: Int @pgColumn(name: \\"lineup_slot_sequence\\")
  person: Person! @pgColumn(name: \\"person_id\\")
  position: Position @pgColumn(name: \\"position_id\\")
  role: Role @pgColumn(name: \\"role_id\\")
  status: String
  team: Team @pgColumn(name: \\"team_id\\")
  weight: String
}

type PersonPhase @pgTable(name: \\"person_phases\\") {
  id: Int! @unique
  endDateTime: DateTime @pgColumn(name: \\"end_date_time\\")
  endSeason: Season @pgColumn(name: \\"end_season_id\\") @relation(name: \\"PersonPhaseEndSeasonToSeasonPersonPhases\\")
  entryReason: String @pgColumn(name: \\"entry_reason\\")
  exitReason: String @pgColumn(name: \\"exit_reason\\")
  height: String
  membershipId: Int! @pgColumn(name: \\"membership_id\\")
  membershipType: String! @pgColumn(name: \\"membership_type\\")
  person: Person! @pgColumn(name: \\"person_id\\")
  phaseStatus: String @pgColumn(name: \\"phase_status\\")
  regularPosition: Position @pgColumn(name: \\"regular_position_id\\")
  regularPositionDepth: String @pgColumn(name: \\"regular_position_depth\\")
  role: Role @pgColumn(name: \\"role_id\\")
  roleStatus: String @pgColumn(name: \\"role_status\\")
  selectionLevel: Int @pgColumn(name: \\"selection_level\\")
  selectionOverall: Int @pgColumn(name: \\"selection_overall\\")
  selectionSublevel: Int @pgColumn(name: \\"selection_sublevel\\")
  startDateTime: DateTime @pgColumn(name: \\"start_date_time\\")
  startSeason: Season @pgColumn(name: \\"start_season_id\\") @relation(name: \\"PersonPhaseStartSeasonToSeasonPersonPhases\\")
  uniformNumber: String @pgColumn(name: \\"uniform_number\\")
  weight: String
}

type PersonsDocument @pgTable(name: \\"persons_documents\\") @relationTable {
  document: Document! @pgColumn(name: \\"document_id\\")
  person: Person! @pgColumn(name: \\"person_id\\")
}

type PersonsMedia @pgTable(name: \\"persons_media\\") @relationTable {
  media: Media! @pgColumn(name: \\"media_id\\")
  person: Person! @pgColumn(name: \\"person_id\\")
}

type Position @pgTable(name: \\"positions\\") {
  id: Int! @unique
  abbreviation: String!
  affiliation: Affiliation! @pgColumn(name: \\"affiliation_id\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballActionSubstitution.personOriginalPosition.
  # baseballActionSubstitutions: [BaseballActionSubstitution] @relation(name: \\"BaseballActionSubstitutionPersonOriginalPositionToPositionBaseballActionSubstitutions\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballActionSubstitution.personReplacingPosition.
  # baseballActionSubstitutions: [BaseballActionSubstitution] @relation(name: \\"BaseballActionSubstitutionPersonReplacingPositionToPositionBaseballActionSubstitutions\\")
  baseballDefensivePlayers: [BaseballDefensivePlayer]
  corePersonStats: [CorePersonStat]
  personEventMetadata: [PersonEventMetadatum]
  personPhases: [PersonPhase]
}

type Publisher @pgTable(name: \\"publishers\\") {
  id: Int! @unique
  affiliations: [Affiliation]
  bookmakers: [Bookmaker]
  documentFixtures: [DocumentFixture]
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Document.publisher.
  # documents: [Document] @relation(name: \\"DocumentPublisherToPublisherDocuments\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Document.source.
  # documents: [Document] @relation(name: \\"DocumentSourceToPublisherDocuments\\")
  events: [Event]
  media: [Media]
  persons: [Person]
  publisherKey: String! @pgColumn(name: \\"publisher_key\\")
  publisherName: String @pgColumn(name: \\"publisher_name\\")
  seasons: [Season]
  sites: [Site]
  standings: [Standing]
  teams: [Team]
}

type Role @pgTable(name: \\"roles\\") {
  id: Int! @unique
  comment: String
  personEventMetadata: [PersonEventMetadatum]
  personPhases: [PersonPhase]
  roleKey: String! @pgColumn(name: \\"role_key\\")
  roleName: String @pgColumn(name: \\"role_name\\")
  teamPhases: [TeamPhase]
}

type Season @pgTable(name: \\"seasons\\") {
  id: Int! @unique
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references AffiliationPhase.endSeason.
  # affiliationPhases: [AffiliationPhase] @relation(name: \\"AffiliationPhaseEndSeasonToSeasonAffiliationPhases\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references AffiliationPhase.startSeason.
  # affiliationPhases: [AffiliationPhase] @relation(name: \\"AffiliationPhaseStartSeasonToSeasonAffiliationPhases\\")
  endDateTime: DateTime @pgColumn(name: \\"end_date_time\\")
  injuryPhases: [InjuryPhase]
  league: Affiliation! @pgColumn(name: \\"league_id\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references PersonPhase.endSeason.
  # personPhases: [PersonPhase] @relation(name: \\"PersonPhaseEndSeasonToSeasonPersonPhases\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references PersonPhase.startSeason.
  # personPhases: [PersonPhase] @relation(name: \\"PersonPhaseStartSeasonToSeasonPersonPhases\\")
  publisher: Publisher! @pgColumn(name: \\"publisher_id\\")
  seasonKey: Int! @pgColumn(name: \\"season_key\\")
  startDateTime: DateTime @pgColumn(name: \\"start_date_time\\")
  subSeasons: [SubSeason]
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references TeamPhase.endSeason.
  # teamPhases: [TeamPhase] @relation(name: \\"SeasonTeamPhasesToTeamPhaseEndSeason\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references TeamPhase.startSeason.
  # teamPhases: [TeamPhase] @relation(name: \\"SeasonTeamPhasesToTeamPhaseStartSeason\\")
}

type Site @pgTable(name: \\"sites\\") {
  id: Int! @unique
  events: [Event]
  location: Location @pgColumn(name: \\"location_id\\")
  publisher: Publisher! @pgColumn(name: \\"publisher_id\\")
  siteKey: Int! @pgColumn(name: \\"site_key\\")
  teams: [Team]
}

type SoccerDefensiveStat @pgTable(name: \\"soccer_defensive_stats\\") {
  id: Int! @unique
  catchesPunches: String @pgColumn(name: \\"catches_punches\\")
  goalsAgainstAverage: String @pgColumn(name: \\"goals_against_average\\")
  goalsAgainstTotal: String @pgColumn(name: \\"goals_against_total\\")
  goalsPenaltyShotAllowed: String @pgColumn(name: \\"goals_penalty_shot_allowed\\")
  savePercentage: String @pgColumn(name: \\"save_percentage\\")
  saves: String
  shotsBlocked: String @pgColumn(name: \\"shots_blocked\\")
  shotsOnGoalTotal: String @pgColumn(name: \\"shots_on_goal_total\\")
  shotsPenaltyShotAllowed: String @pgColumn(name: \\"shots_penalty_shot_allowed\\")
  shotsShootoutAllowed: String @pgColumn(name: \\"shots_shootout_allowed\\")
  shotsShootoutTotal: String @pgColumn(name: \\"shots_shootout_total\\")
  shutouts: String
}

type SoccerEventState @pgTable(name: \\"soccer_event_states\\") {
  id: Int! @unique
  context: String
  currentState: Int @pgColumn(name: \\"current_state\\")
  event: Event! @pgColumn(name: \\"event_id\\")
  minutesElapsed: String @pgColumn(name: \\"minutes_elapsed\\")
  periodMinuteElapsed: String @pgColumn(name: \\"period_minute_elapsed\\")
  periodTimeElapsed: String @pgColumn(name: \\"period_time_elapsed\\")
  periodTimeRemaining: String @pgColumn(name: \\"period_time_remaining\\")
  periodValue: String @pgColumn(name: \\"period_value\\")
  sequenceNumber: Int @pgColumn(name: \\"sequence_number\\")
}

type SoccerFoulStat @pgTable(name: \\"soccer_foul_stats\\") {
  id: Int! @unique
  cautionPointsPending: String @pgColumn(name: \\"caution_points_pending\\")
  cautionPointsTotal: String @pgColumn(name: \\"caution_points_total\\")
  cautionsPending: String @pgColumn(name: \\"cautions_pending\\")
  cautionsTotal: String @pgColumn(name: \\"cautions_total\\")
  ejectionsTotal: String @pgColumn(name: \\"ejections_total\\")
  foulsCommited: String @pgColumn(name: \\"fouls_commited\\")
  foulsSuffered: String @pgColumn(name: \\"fouls_suffered\\")
}

type SoccerOffensiveStat @pgTable(name: \\"soccer_offensive_stats\\") {
  id: Int! @unique
  assistsGameTying: String @pgColumn(name: \\"assists_game_tying\\")
  assistsGameWinning: String @pgColumn(name: \\"assists_game_winning\\")
  assistsOvertime: String @pgColumn(name: \\"assists_overtime\\")
  assistsTotal: String @pgColumn(name: \\"assists_total\\")
  cornerKicks: String @pgColumn(name: \\"corner_kicks\\")
  giveaways: String
  goalsGameTying: String @pgColumn(name: \\"goals_game_tying\\")
  goalsGameWinning: String @pgColumn(name: \\"goals_game_winning\\")
  goalsOvertime: String @pgColumn(name: \\"goals_overtime\\")
  goalsShootout: String @pgColumn(name: \\"goals_shootout\\")
  goalsTotal: String @pgColumn(name: \\"goals_total\\")
  hatTricks: String @pgColumn(name: \\"hat_tricks\\")
  offsides: String
  points: String
  shotsHitFrame: String @pgColumn(name: \\"shots_hit_frame\\")
  shotsOnGoalTotal: String @pgColumn(name: \\"shots_on_goal_total\\")
  shotsPenaltyShotMissed: String @pgColumn(name: \\"shots_penalty_shot_missed\\")
  shotsPenaltyShotPercentage: String @pgColumn(name: \\"shots_penalty_shot_percentage\\")
  shotsPenaltyShotScored: String @pgColumn(name: \\"shots_penalty_shot_scored\\")
  shotsPenaltyShotTaken: String @pgColumn(name: \\"shots_penalty_shot_taken\\")
  shotsShootoutMissed: String @pgColumn(name: \\"shots_shootout_missed\\")
  shotsShootoutPercentage: String @pgColumn(name: \\"shots_shootout_percentage\\")
  shotsShootoutScored: String @pgColumn(name: \\"shots_shootout_scored\\")
  shotsShootoutTaken: String @pgColumn(name: \\"shots_shootout_taken\\")
  shotsTotal: String @pgColumn(name: \\"shots_total\\")
}

type Standing @pgTable(name: \\"standings\\") {
  id: Int! @unique
  affiliation: Affiliation! @pgColumn(name: \\"affiliation_id\\")
  alignmentScope: String @pgColumn(name: \\"alignment_scope\\")
  competitionScope: String @pgColumn(name: \\"competition_scope\\")
  competitionScopeId: String @pgColumn(name: \\"competition_scope_id\\")
  durationScope: String @pgColumn(name: \\"duration_scope\\")
  lastUpdated: String @pgColumn(name: \\"last_updated\\")
  publisher: Publisher! @pgColumn(name: \\"publisher_id\\")
  scopingLabel: String @pgColumn(name: \\"scoping_label\\")
  siteScope: String @pgColumn(name: \\"site_scope\\")
  source: String
  standingSubgroups: [StandingSubgroup]
  standingType: String @pgColumn(name: \\"standing_type\\")
  subSeason: SubSeason! @pgColumn(name: \\"sub_season_id\\")
}

type StandingSubgroup @pgTable(name: \\"standing_subgroups\\") {
  id: Int! @unique
  affiliation: Affiliation! @pgColumn(name: \\"affiliation_id\\")
  outcomeTotals: [OutcomeTotal]
  standing: Standing! @pgColumn(name: \\"standing_id\\")
}

type Stat @pgTable(name: \\"stats\\") {
  id: Int! @unique
  context: String!
  statCoverageId: Int @pgColumn(name: \\"stat_coverage_id\\")
  statCoverageType: String @pgColumn(name: \\"stat_coverage_type\\")
  statHolderId: Int @pgColumn(name: \\"stat_holder_id\\")
  statHolderType: String @pgColumn(name: \\"stat_holder_type\\")
  statRepositoryId: Int! @pgColumn(name: \\"stat_repository_id\\")
  statRepositoryType: String @pgColumn(name: \\"stat_repository_type\\")
}

type SubPeriod @pgTable(name: \\"sub_periods\\") {
  id: Int! @unique
  period: Period! @pgColumn(name: \\"period_id\\")
  score: String
  subPeriodValue: String @pgColumn(name: \\"sub_period_value\\")
}

type SubSeason @pgTable(name: \\"sub_seasons\\") {
  id: Int! @unique
  endDateTime: DateTime @pgColumn(name: \\"end_date_time\\")
  eventsSubSeasons: [EventsSubSeason]
  season: Season! @pgColumn(name: \\"season_id\\")
  standings: [Standing]
  startDateTime: DateTime @pgColumn(name: \\"start_date_time\\")
  subSeasonKey: String! @pgColumn(name: \\"sub_season_key\\")
  subSeasonType: String! @pgColumn(name: \\"sub_season_type\\")
}

type Team @pgTable(name: \\"teams\\") {
  id: Int! @unique
  americanFootballEventStates: [AmericanFootballEventState]
  homeSite: Site @pgColumn(name: \\"home_site_id\\")
  personEventMetadata: [PersonEventMetadatum]
  publisher: Publisher! @pgColumn(name: \\"publisher_id\\")
  teamKey: String! @pgColumn(name: \\"team_key\\")
  teamPhases: [TeamPhase]
  teamsDocuments: [TeamsDocument]
  teamsMedia: [TeamsMedia]
  wageringMoneylines: [WageringMoneyline]
  wageringOddsLines: [WageringOddsLine]
  wageringRunlines: [WageringRunline]
  wageringStraightSpreadLines: [WageringStraightSpreadLine]
  wageringTotalScoreLines: [WageringTotalScoreLine]
}

type TeamAmericanFootballStat @pgTable(name: \\"team_american_football_stats\\") {
  id: Int! @unique
  averageStartingPosition: String @pgColumn(name: \\"average_starting_position\\")
  timeOfPossession: String @pgColumn(name: \\"time_of_possession\\")
  timeouts: String
  turnoverRatio: String @pgColumn(name: \\"turnover_ratio\\")
  yardsPerAttempt: String @pgColumn(name: \\"yards_per_attempt\\")
}

type TeamPhase @pgTable(name: \\"team_phases\\") {
  id: Int! @unique
  affiliation: Affiliation! @pgColumn(name: \\"affiliation_id\\")
  endDateTime: String @pgColumn(name: \\"end_date_time\\")
  endSeason: Season @pgColumn(name: \\"end_season_id\\") @relation(name: \\"SeasonTeamPhasesToTeamPhaseEndSeason\\")
  phaseStatus: String @pgColumn(name: \\"phase_status\\")
  role: Role @pgColumn(name: \\"role_id\\")
  startDateTime: String @pgColumn(name: \\"start_date_time\\")
  startSeason: Season @pgColumn(name: \\"start_season_id\\") @relation(name: \\"SeasonTeamPhasesToTeamPhaseStartSeason\\")
  team: Team! @pgColumn(name: \\"team_id\\")
}

type TeamsDocument @pgTable(name: \\"teams_documents\\") @relationTable {
  document: Document! @pgColumn(name: \\"document_id\\")
  team: Team! @pgColumn(name: \\"team_id\\")
}

type TeamsMedia @pgTable(name: \\"teams_media\\") @relationTable {
  media: Media! @pgColumn(name: \\"media_id\\")
  team: Team! @pgColumn(name: \\"team_id\\")
}

type TennisActionPoint @pgTable(name: \\"tennis_action_points\\") {
  id: Int! @unique
  sequenceNumber: String @pgColumn(name: \\"sequence_number\\")
  subPeriodId: String @pgColumn(name: \\"sub_period_id\\")
  winType: String @pgColumn(name: \\"win_type\\")
}

type TennisActionVolley @pgTable(name: \\"tennis_action_volleys\\") {
  id: Int! @unique
  landingLocation: String @pgColumn(name: \\"landing_location\\")
  result: String
  sequenceNumber: String @pgColumn(name: \\"sequence_number\\")
  spinType: String @pgColumn(name: \\"spin_type\\")
  swingType: String @pgColumn(name: \\"swing_type\\")
  tennisActionPointsId: Int @pgColumn(name: \\"tennis_action_points_id\\")
  trajectoryDetails: String @pgColumn(name: \\"trajectory_details\\")
}

type TennisEventState @pgTable(name: \\"tennis_event_states\\") {
  id: Int! @unique
  context: String
  currentState: Int @pgColumn(name: \\"current_state\\")
  event: Event! @pgColumn(name: \\"event_id\\")
  game: String
  receiverPersonId: Int @pgColumn(name: \\"receiver_person_id\\")
  receiverScore: String @pgColumn(name: \\"receiver_score\\")
  sequenceNumber: Int @pgColumn(name: \\"sequence_number\\")
  serverPersonId: Int @pgColumn(name: \\"server_person_id\\")
  serverScore: String @pgColumn(name: \\"server_score\\")
  serviceNumber: String @pgColumn(name: \\"service_number\\")
  tennisSet: String @pgColumn(name: \\"tennis_set\\")
}

type TennisReturnStat @pgTable(name: \\"tennis_return_stats\\") {
  id: Int! @unique
  breakPointsConverted: String @pgColumn(name: \\"break_points_converted\\")
  breakPointsConvertedPct: String @pgColumn(name: \\"break_points_converted_pct\\")
  breakPointsPlayed: String @pgColumn(name: \\"break_points_played\\")
  firstServiceReturnPointsWon: String @pgColumn(name: \\"first_service_return_points_won\\")
  firstServiceReturnPointsWonPct: String @pgColumn(name: \\"first_service_return_points_won_pct\\")
  matchesPlayed: String @pgColumn(name: \\"matches_played\\")
  returnGamesPlayed: String @pgColumn(name: \\"return_games_played\\")
  returnGamesWon: String @pgColumn(name: \\"return_games_won\\")
  returnGamesWonPct: String @pgColumn(name: \\"return_games_won_pct\\")
  returnsPlayed: String @pgColumn(name: \\"returns_played\\")
  secondServiceReturnPointsWon: String @pgColumn(name: \\"second_service_return_points_won\\")
  secondServiceReturnPointsWonPct: String @pgColumn(name: \\"second_service_return_points_won_pct\\")
}

type TennisServiceStat @pgTable(name: \\"tennis_service_stats\\") {
  id: Int! @unique
  aces: String
  breakPointsPlayed: String @pgColumn(name: \\"break_points_played\\")
  breakPointsSaved: String @pgColumn(name: \\"break_points_saved\\")
  breakPointsSavedPct: String @pgColumn(name: \\"break_points_saved_pct\\")
  firstServicePointsWon: String @pgColumn(name: \\"first_service_points_won\\")
  firstServicePointsWonPct: String @pgColumn(name: \\"first_service_points_won_pct\\")
  firstServicesGood: String @pgColumn(name: \\"first_services_good\\")
  firstServicesGoodPct: String @pgColumn(name: \\"first_services_good_pct\\")
  matchesPlayed: String @pgColumn(name: \\"matches_played\\")
  secondServicePointsWon: String @pgColumn(name: \\"second_service_points_won\\")
  secondServicePointsWonPct: String @pgColumn(name: \\"second_service_points_won_pct\\")
  serviceGamesPlayed: String @pgColumn(name: \\"service_games_played\\")
  serviceGamesWon: String @pgColumn(name: \\"service_games_won\\")
  serviceGamesWonPct: String @pgColumn(name: \\"service_games_won_pct\\")
  servicesPlayed: String @pgColumn(name: \\"services_played\\")
}

type WageringMoneyline @pgTable(name: \\"wagering_moneylines\\") {
  id: Int! @unique
  bookmaker: Bookmaker! @pgColumn(name: \\"bookmaker_id\\")
  comment: String
  dateTime: DateTime @pgColumn(name: \\"date_time\\")
  event: Event! @pgColumn(name: \\"event_id\\")
  line: String
  lineOpening: String @pgColumn(name: \\"line_opening\\")
  personId: Int @pgColumn(name: \\"person_id\\")
  prediction: String
  rotationKey: String @pgColumn(name: \\"rotation_key\\")
  team: Team! @pgColumn(name: \\"team_id\\")
  vigorish: String
}

type WageringOddsLine @pgTable(name: \\"wagering_odds_lines\\") {
  id: Int! @unique
  bookmaker: Bookmaker! @pgColumn(name: \\"bookmaker_id\\")
  comment: String
  dateTime: DateTime @pgColumn(name: \\"date_time\\")
  denominator: String
  event: Event! @pgColumn(name: \\"event_id\\")
  numerator: String
  payoutAmount: String @pgColumn(name: \\"payout_amount\\")
  payoutCalculation: String @pgColumn(name: \\"payout_calculation\\")
  personId: Int @pgColumn(name: \\"person_id\\")
  prediction: String
  rotationKey: String @pgColumn(name: \\"rotation_key\\")
  team: Team! @pgColumn(name: \\"team_id\\")
}

type WageringRunline @pgTable(name: \\"wagering_runlines\\") {
  id: Int! @unique
  bookmaker: Bookmaker! @pgColumn(name: \\"bookmaker_id\\")
  comment: String
  dateTime: DateTime @pgColumn(name: \\"date_time\\")
  event: Event! @pgColumn(name: \\"event_id\\")
  line: String
  lineOpening: String @pgColumn(name: \\"line_opening\\")
  lineValue: String @pgColumn(name: \\"line_value\\")
  personId: Int @pgColumn(name: \\"person_id\\")
  prediction: String
  rotationKey: String @pgColumn(name: \\"rotation_key\\")
  team: Team! @pgColumn(name: \\"team_id\\")
  vigorish: String
}

type WageringStraightSpreadLine @pgTable(name: \\"wagering_straight_spread_lines\\") {
  id: Int! @unique
  bookmaker: Bookmaker! @pgColumn(name: \\"bookmaker_id\\")
  comment: String
  dateTime: DateTime @pgColumn(name: \\"date_time\\")
  event: Event! @pgColumn(name: \\"event_id\\")
  lineValue: String @pgColumn(name: \\"line_value\\")
  lineValueOpening: String @pgColumn(name: \\"line_value_opening\\")
  personId: Int @pgColumn(name: \\"person_id\\")
  prediction: String
  rotationKey: String @pgColumn(name: \\"rotation_key\\")
  team: Team! @pgColumn(name: \\"team_id\\")
  vigorish: String
}

type WageringTotalScoreLine @pgTable(name: \\"wagering_total_score_lines\\") {
  id: Int! @unique
  bookmaker: Bookmaker! @pgColumn(name: \\"bookmaker_id\\")
  comment: String
  dateTime: DateTime @pgColumn(name: \\"date_time\\")
  event: Event! @pgColumn(name: \\"event_id\\")
  lineOver: String @pgColumn(name: \\"line_over\\")
  lineUnder: String @pgColumn(name: \\"line_under\\")
  personId: Int @pgColumn(name: \\"person_id\\")
  prediction: String
  rotationKey: String @pgColumn(name: \\"rotation_key\\")
  team: Team! @pgColumn(name: \\"team_id\\")
  total: String
  totalOpening: String @pgColumn(name: \\"total_opening\\")
  vigorish: String
}

type WeatherCondition @pgTable(name: \\"weather_conditions\\") {
  id: Int! @unique
  clouds: String
  event: Event! @pgColumn(name: \\"event_id\\")
  humidity: String
  temperature: String
  temperatureUnits: String @pgColumn(name: \\"temperature_units\\")
  weatherCode: String @pgColumn(name: \\"weather_code\\")
  windDirection: String @pgColumn(name: \\"wind_direction\\")
  windVelocity: String @pgColumn(name: \\"wind_velocity\\")
}"
`;

exports[`Introspector sportsdb 2`] = `
"type Address @db(name: \\"addresses\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"addresses_id_seq\\", initialValue: 1, allocationSize: 1)
  building: String
  country: String
  county: String
  district: String
  floor: String
  language: String
  locality: String
  location: Location! @db(name: \\"location_id\\")
  neighborhood: String
  postalCode: String @db(name: \\"postal_code\\")
  region: String
  street: String
  streetNumber: String @db(name: \\"street_number\\")
  streetPrefix: String @db(name: \\"street_prefix\\")
  streetSuffix: String @db(name: \\"street_suffix\\")
  suite: String
}

type Affiliation @db(name: \\"affiliations\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"affiliations_id_seq\\", initialValue: 1, allocationSize: 1)
  affiliationKey: String! @db(name: \\"affiliation_key\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references AffiliationPhase.affiliation.
  # affiliationPhases: [AffiliationPhase] @relation(name: \\"AffiliationAffiliationPhasesToAffiliationPhaseAffiliation\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references AffiliationPhase.ancestorAffiliation.
  # affiliationPhases: [AffiliationPhase] @relation(name: \\"AffiliationAffiliationPhasesToAffiliationPhaseAncestorAffiliation\\")
  affiliationsDocuments: [AffiliationsDocument]
  affiliationsEvents: [AffiliationsEvent]
  affiliationsMedia: [AffiliationsMedia]
  affiliationType: String @db(name: \\"affiliation_type\\")
  positions: [Position]
  publisher: Publisher! @db(name: \\"publisher_id\\")
  seasons: [Season]
  standings: [Standing]
  standingSubgroups: [StandingSubgroup]
  teamPhases: [TeamPhase]
}

type AffiliationPhase @db(name: \\"affiliation_phases\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"affiliation_phases_id_seq\\", initialValue: 1, allocationSize: 1)
  affiliation: Affiliation! @db(name: \\"affiliation_id\\") @relation(name: \\"AffiliationAffiliationPhasesToAffiliationPhaseAffiliation\\")
  ancestorAffiliation: Affiliation @db(name: \\"ancestor_affiliation_id\\") @relation(name: \\"AffiliationAffiliationPhasesToAffiliationPhaseAncestorAffiliation\\")
  endDateTime: DateTime @db(name: \\"end_date_time\\")
  endSeason: Season @db(name: \\"end_season_id\\") @relation(name: \\"AffiliationPhaseEndSeasonToSeasonAffiliationPhases\\")
  startDateTime: DateTime @db(name: \\"start_date_time\\")
  startSeason: Season @db(name: \\"start_season_id\\") @relation(name: \\"AffiliationPhaseStartSeasonToSeasonAffiliationPhases\\")
}

type AffiliationsDocument @db(name: \\"affiliations_documents\\") @relationTable {
  affiliation: Affiliation! @db(name: \\"affiliation_id\\")
  document: Document! @db(name: \\"document_id\\")
}

type AffiliationsEvent @db(name: \\"affiliations_events\\") @relationTable {
  affiliation: Affiliation! @db(name: \\"affiliation_id\\")
  event: Event! @db(name: \\"event_id\\")
}

type AffiliationsMedia @db(name: \\"affiliations_media\\") @relationTable {
  affiliation: Affiliation! @db(name: \\"affiliation_id\\")
  media: Media! @db(name: \\"media_id\\")
}

type AmericanFootballActionParticipant @db(name: \\"american_football_action_participants\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_action_participants_id_seq\\", initialValue: 1, allocationSize: 1)
  americanFootballActionPlay: AmericanFootballActionPlay! @db(name: \\"american_football_action_play_id\\")
  fieldLine: Int @db(name: \\"field_line\\")
  participantRole: String! @db(name: \\"participant_role\\")
  person: Person! @db(name: \\"person_id\\")
  scoreCredit: Int @db(name: \\"score_credit\\")
  scoreType: String @db(name: \\"score_type\\")
  yardage: Int
  yardsGained: Int @db(name: \\"yards_gained\\")
}

type AmericanFootballActionPlay @db(name: \\"american_football_action_plays\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_action_plays_id_seq\\", initialValue: 1, allocationSize: 1)
  americanFootballActionParticipants: [AmericanFootballActionParticipant]
  americanFootballEventState: AmericanFootballEventState! @db(name: \\"american_football_event_state_id\\")
  comment: String
  driveResult: String @db(name: \\"drive_result\\")
  playType: String @db(name: \\"play_type\\")
  points: Int
  scoreAttemptType: String @db(name: \\"score_attempt_type\\")
}

type AmericanFootballDefensiveStat @db(name: \\"american_football_defensive_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_defensive_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  interceptionsAverage: String @db(name: \\"interceptions_average\\")
  interceptionsLongest: String @db(name: \\"interceptions_longest\\")
  interceptionsTotal: String @db(name: \\"interceptions_total\\")
  interceptionsTouchdown: String @db(name: \\"interceptions_touchdown\\")
  interceptionsYards: String @db(name: \\"interceptions_yards\\")
  passesDefensed: String @db(name: \\"passes_defensed\\")
  quarterbackHurries: String @db(name: \\"quarterback_hurries\\")
  sacksTotal: String @db(name: \\"sacks_total\\")
  sacksYards: String @db(name: \\"sacks_yards\\")
  tacklesAssists: String @db(name: \\"tackles_assists\\")
  tacklesSolo: String @db(name: \\"tackles_solo\\")
  tacklesTotal: String @db(name: \\"tackles_total\\")
}

type AmericanFootballDownProgressStat @db(name: \\"american_football_down_progress_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_down_progress_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  conversionsFourthDown: String @db(name: \\"conversions_fourth_down\\")
  conversionsFourthDownAttempts: String @db(name: \\"conversions_fourth_down_attempts\\")
  conversionsFourthDownPercentage: String @db(name: \\"conversions_fourth_down_percentage\\")
  conversionsThirdDown: String @db(name: \\"conversions_third_down\\")
  conversionsThirdDownAttempts: String @db(name: \\"conversions_third_down_attempts\\")
  conversionsThirdDownPercentage: String @db(name: \\"conversions_third_down_percentage\\")
  firstDownsPass: String @db(name: \\"first_downs_pass\\")
  firstDownsPenalty: String @db(name: \\"first_downs_penalty\\")
  firstDownsRun: String @db(name: \\"first_downs_run\\")
  firstDownsTotal: String @db(name: \\"first_downs_total\\")
}

type AmericanFootballEventState @db(name: \\"american_football_event_states\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_event_states_id_seq\\", initialValue: 1, allocationSize: 1)
  americanFootballActionPlays: [AmericanFootballActionPlay]
  clockState: String @db(name: \\"clock_state\\")
  context: String
  currentState: Int @db(name: \\"current_state\\")
  distanceFor1stDown: Int @db(name: \\"distance_for_1st_down\\")
  down: Int
  event: Event! @db(name: \\"event_id\\")
  fieldLine: Int @db(name: \\"field_line\\")
  fieldSide: String @db(name: \\"field_side\\")
  periodTimeElapsed: String @db(name: \\"period_time_elapsed\\")
  periodTimeRemaining: String @db(name: \\"period_time_remaining\\")
  periodValue: Int @db(name: \\"period_value\\")
  sequenceNumber: Int @db(name: \\"sequence_number\\")
  teamInPossession: Team @db(name: \\"team_in_possession_id\\")
}

type AmericanFootballFumblesStat @db(name: \\"american_football_fumbles_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_fumbles_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  fumblesCommitted: String @db(name: \\"fumbles_committed\\")
  fumblesForced: String @db(name: \\"fumbles_forced\\")
  fumblesLost: String @db(name: \\"fumbles_lost\\")
  fumblesOpposingCommitted: String @db(name: \\"fumbles_opposing_committed\\")
  fumblesOpposingLost: String @db(name: \\"fumbles_opposing_lost\\")
  fumblesOpposingRecovered: String @db(name: \\"fumbles_opposing_recovered\\")
  fumblesOpposingYardsGained: String @db(name: \\"fumbles_opposing_yards_gained\\")
  fumblesOwnCommitted: String @db(name: \\"fumbles_own_committed\\")
  fumblesOwnLost: String @db(name: \\"fumbles_own_lost\\")
  fumblesOwnRecovered: String @db(name: \\"fumbles_own_recovered\\")
  fumblesOwnYardsGained: String @db(name: \\"fumbles_own_yards_gained\\")
  fumblesRecovered: String @db(name: \\"fumbles_recovered\\")
  fumblesYardsGained: String @db(name: \\"fumbles_yards_gained\\")
}

type AmericanFootballOffensiveStat @db(name: \\"american_football_offensive_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_offensive_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  offensivePlaysAverageYardsPer: String @db(name: \\"offensive_plays_average_yards_per\\")
  offensivePlaysNumber: String @db(name: \\"offensive_plays_number\\")
  offensivePlaysYards: String @db(name: \\"offensive_plays_yards\\")
  possessionDuration: String @db(name: \\"possession_duration\\")
  turnoversGiveaway: String @db(name: \\"turnovers_giveaway\\")
}

type AmericanFootballPassingStat @db(name: \\"american_football_passing_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_passing_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  passerRating: String @db(name: \\"passer_rating\\")
  passesAttempts: String @db(name: \\"passes_attempts\\")
  passesAverageYardsPer: String @db(name: \\"passes_average_yards_per\\")
  passesCompletions: String @db(name: \\"passes_completions\\")
  passesInterceptions: String @db(name: \\"passes_interceptions\\")
  passesInterceptionsPercentage: String @db(name: \\"passes_interceptions_percentage\\")
  passesLongest: String @db(name: \\"passes_longest\\")
  passesPercentage: String @db(name: \\"passes_percentage\\")
  passesTouchdowns: String @db(name: \\"passes_touchdowns\\")
  passesTouchdownsPercentage: String @db(name: \\"passes_touchdowns_percentage\\")
  passesYardsGross: String @db(name: \\"passes_yards_gross\\")
  passesYardsLost: String @db(name: \\"passes_yards_lost\\")
  passesYardsNet: String @db(name: \\"passes_yards_net\\")
  receptionsAverageYardsPer: String @db(name: \\"receptions_average_yards_per\\")
  receptionsFirstDown: String @db(name: \\"receptions_first_down\\")
  receptionsLongest: String @db(name: \\"receptions_longest\\")
  receptionsTotal: String @db(name: \\"receptions_total\\")
  receptionsTouchdowns: String @db(name: \\"receptions_touchdowns\\")
  receptionsYards: String @db(name: \\"receptions_yards\\")
}

type AmericanFootballPenaltiesStat @db(name: \\"american_football_penalties_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_penalties_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  penaltiesTotal: String @db(name: \\"penalties_total\\")
  penaltyFirstDowns: String @db(name: \\"penalty_first_downs\\")
  penaltyYards: String @db(name: \\"penalty_yards\\")
}

type AmericanFootballRushingStat @db(name: \\"american_football_rushing_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_rushing_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  rushesAttempts: String @db(name: \\"rushes_attempts\\")
  rushesFirstDown: String @db(name: \\"rushes_first_down\\")
  rushesLongest: String @db(name: \\"rushes_longest\\")
  rushesTouchdowns: String @db(name: \\"rushes_touchdowns\\")
  rushesYards: String @db(name: \\"rushes_yards\\")
  rushingAverageYardsPer: String @db(name: \\"rushing_average_yards_per\\")
}

type AmericanFootballSacksAgainstStat @db(name: \\"american_football_sacks_against_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_sacks_against_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  sacksAgainstTotal: String @db(name: \\"sacks_against_total\\")
  sacksAgainstYards: String @db(name: \\"sacks_against_yards\\")
}

type AmericanFootballScoringStat @db(name: \\"american_football_scoring_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_scoring_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  extraPointsAttempts: String @db(name: \\"extra_points_attempts\\")
  extraPointsBlocked: String @db(name: \\"extra_points_blocked\\")
  extraPointsMade: String @db(name: \\"extra_points_made\\")
  extraPointsMissed: String @db(name: \\"extra_points_missed\\")
  fieldGoalAttempts: String @db(name: \\"field_goal_attempts\\")
  fieldGoalsBlocked: String @db(name: \\"field_goals_blocked\\")
  fieldGoalsMade: String @db(name: \\"field_goals_made\\")
  fieldGoalsMissed: String @db(name: \\"field_goals_missed\\")
  safetiesAgainst: String @db(name: \\"safeties_against\\")
  touchbacksTotal: String @db(name: \\"touchbacks_total\\")
  touchdownsDefensive: String @db(name: \\"touchdowns_defensive\\")
  touchdownsPassing: String @db(name: \\"touchdowns_passing\\")
  touchdownsRushing: String @db(name: \\"touchdowns_rushing\\")
  touchdownsSpecialTeams: String @db(name: \\"touchdowns_special_teams\\")
  touchdownsTotal: String @db(name: \\"touchdowns_total\\")
  twoPointConversionsAttempts: String @db(name: \\"two_point_conversions_attempts\\")
  twoPointConversionsMade: String @db(name: \\"two_point_conversions_made\\")
}

type AmericanFootballSpecialTeamsStat @db(name: \\"american_football_special_teams_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"american_football_special_teams_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  fairCatches: String @db(name: \\"fair_catches\\")
  puntsAverage: String @db(name: \\"punts_average\\")
  puntsBlocked: String @db(name: \\"punts_blocked\\")
  puntsInside20: String @db(name: \\"punts_inside_20\\")
  puntsInside20Percentage: String @db(name: \\"punts_inside_20_percentage\\")
  puntsLongest: String @db(name: \\"punts_longest\\")
  puntsTotal: String @db(name: \\"punts_total\\")
  puntsYardsGross: String @db(name: \\"punts_yards_gross\\")
  puntsYardsNet: String @db(name: \\"punts_yards_net\\")
  returnsKickoffAverage: String @db(name: \\"returns_kickoff_average\\")
  returnsKickoffLongest: String @db(name: \\"returns_kickoff_longest\\")
  returnsKickoffTotal: String @db(name: \\"returns_kickoff_total\\")
  returnsKickoffTouchdown: String @db(name: \\"returns_kickoff_touchdown\\")
  returnsKickoffYards: String @db(name: \\"returns_kickoff_yards\\")
  returnsPuntAverage: String @db(name: \\"returns_punt_average\\")
  returnsPuntLongest: String @db(name: \\"returns_punt_longest\\")
  returnsPuntTotal: String @db(name: \\"returns_punt_total\\")
  returnsPuntTouchdown: String @db(name: \\"returns_punt_touchdown\\")
  returnsPuntYards: String @db(name: \\"returns_punt_yards\\")
  returnsTotal: String @db(name: \\"returns_total\\")
  returnsYards: String @db(name: \\"returns_yards\\")
  touchbacksInterceptions: String @db(name: \\"touchbacks_interceptions\\")
  touchbacksInterceptionsPercentage: String @db(name: \\"touchbacks_interceptions_percentage\\")
  touchbacksKickoffs: String @db(name: \\"touchbacks_kickoffs\\")
  touchbacksKickoffsPercentage: String @db(name: \\"touchbacks_kickoffs_percentage\\")
  touchbacksPunts: String @db(name: \\"touchbacks_punts\\")
  touchbacksPuntsPercentage: String @db(name: \\"touchbacks_punts_percentage\\")
  touchbacksTotal: String @db(name: \\"touchbacks_total\\")
  touchbacksTotalPercentage: String @db(name: \\"touchbacks_total_percentage\\")
}

type BaseballActionContactDetail @db(name: \\"baseball_action_contact_details\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"baseball_action_contact_details_id_seq\\", initialValue: 1, allocationSize: 1)
  baseballActionPitch: BaseballActionPitch! @db(name: \\"baseball_action_pitch_id\\")
  comment: String
  location: String
  strength: String
  trajectoryCoordinates: String @db(name: \\"trajectory_coordinates\\")
  trajectoryFormula: String @db(name: \\"trajectory_formula\\")
  velocity: Int
}

type BaseballActionPitch @db(name: \\"baseball_action_pitches\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"baseball_action_pitches_id_seq\\", initialValue: 1, allocationSize: 1)
  ballType: String @db(name: \\"ball_type\\")
  baseballActionContactDetails: [BaseballActionContactDetail]
  baseballActionPlay: BaseballActionPlay! @db(name: \\"baseball_action_play_id\\")
  baseballDefensiveGroup: BaseballDefensiveGroup @db(name: \\"baseball_defensive_group_id\\")
  comment: String
  pitchLocation: String @db(name: \\"pitch_location\\")
  pitchType: String @db(name: \\"pitch_type\\")
  pitchVelocity: Int @db(name: \\"pitch_velocity\\")
  sequenceNumber: Int @db(name: \\"sequence_number\\")
  strikeType: String @db(name: \\"strike_type\\")
  trajectoryCoordinates: String @db(name: \\"trajectory_coordinates\\")
  trajectoryFormula: String @db(name: \\"trajectory_formula\\")
  umpireCall: String @db(name: \\"umpire_call\\")
}

type BaseballActionPlay @db(name: \\"baseball_action_plays\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"baseball_action_plays_id_seq\\", initialValue: 1, allocationSize: 1)
  baseballActionPitches: [BaseballActionPitch]
  baseballDefensiveGroupId: Int @db(name: \\"baseball_defensive_group_id\\")
  baseballEventState: BaseballEventState! @db(name: \\"baseball_event_state_id\\")
  comment: String
  earnedRunsScored: String @db(name: \\"earned_runs_scored\\")
  notation: String
  notationYaml: String @db(name: \\"notation_yaml\\")
  outsRecorded: Int @db(name: \\"outs_recorded\\")
  playType: String @db(name: \\"play_type\\")
  rbi: Int
  runnerOnFirstAdvance: Int @db(name: \\"runner_on_first_advance\\")
  runnerOnSecondAdvance: Int @db(name: \\"runner_on_second_advance\\")
  runnerOnThirdAdvance: Int @db(name: \\"runner_on_third_advance\\")
  runsScored: Int @db(name: \\"runs_scored\\")
}

type BaseballActionSubstitution @db(name: \\"baseball_action_substitutions\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"baseball_action_substitutions_id_seq\\", initialValue: 1, allocationSize: 1)
  baseballEventState: BaseballEventState! @db(name: \\"baseball_event_state_id\\")
  comment: String
  personOriginal: Person @db(name: \\"person_original_id\\") @relation(name: \\"BaseballActionSubstitutionPersonOriginalToPersonBaseballActionSubstitutions\\")
  personOriginalLineupSlot: Int @db(name: \\"person_original_lineup_slot\\")
  personOriginalPosition: Position @db(name: \\"person_original_position_id\\") @relation(name: \\"BaseballActionSubstitutionPersonOriginalPositionToPositionBaseballActionSubstitutions\\")
  personReplacing: Person @db(name: \\"person_replacing_id\\") @relation(name: \\"BaseballActionSubstitutionPersonReplacingToPersonBaseballActionSubstitutions\\")
  personReplacingLineupSlot: Int @db(name: \\"person_replacing_lineup_slot\\")
  personReplacingPosition: Position @db(name: \\"person_replacing_position_id\\") @relation(name: \\"BaseballActionSubstitutionPersonReplacingPositionToPositionBaseballActionSubstitutions\\")
  personType: String @db(name: \\"person_type\\")
  sequenceNumber: Int @db(name: \\"sequence_number\\")
  substitutionReason: String @db(name: \\"substitution_reason\\")
}

type BaseballDefensiveGroup @db(name: \\"baseball_defensive_group\\") @relationTable {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"baseball_defensive_group_id_seq\\", initialValue: 1, allocationSize: 1)
  baseballActionPitches: [BaseballActionPitch]
  baseballDefensivePlayers: [BaseballDefensivePlayer]
}

type BaseballDefensivePlayer @db(name: \\"baseball_defensive_players\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"baseball_defensive_players_id_seq\\", initialValue: 1, allocationSize: 1)
  baseballDefensiveGroup: BaseballDefensiveGroup! @db(name: \\"baseball_defensive_group_id\\")
  player: Person! @db(name: \\"player_id\\")
  position: Position! @db(name: \\"position_id\\")
}

type BaseballDefensiveStat @db(name: \\"baseball_defensive_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"baseball_defensive_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  assists: Int
  defensiveAverage: Float @db(name: \\"defensive_average\\")
  doublePlays: Int @db(name: \\"double_plays\\")
  errors: Int
  errorsCatchersInterference: Int @db(name: \\"errors_catchers_interference\\")
  errorsPassedBall: Int @db(name: \\"errors_passed_ball\\")
  fieldingPercentage: Float @db(name: \\"fielding_percentage\\")
  putouts: Int
  triplePlays: Int @db(name: \\"triple_plays\\")
}

type BaseballEventState @db(name: \\"baseball_event_states\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"baseball_event_states_id_seq\\", initialValue: 1, allocationSize: 1)
  atBatNumber: Int @db(name: \\"at_bat_number\\")
  balls: Int
  baseballActionPlays: [BaseballActionPlay]
  baseballActionSubstitutions: [BaseballActionSubstitution]
  batter: Person @db(name: \\"batter_id\\") @relation(name: \\"BaseballEventStateBatterToPersonBaseballEventStates\\")
  batterSide: String @db(name: \\"batter_side\\")
  context: String
  currentState: Int @db(name: \\"current_state\\")
  event: Event! @db(name: \\"event_id\\")
  inningHalf: String @db(name: \\"inning_half\\")
  inningValue: Int @db(name: \\"inning_value\\")
  outs: Int
  pitcher: Person @db(name: \\"pitcher_id\\") @relation(name: \\"BaseballEventStatePitcherToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  runner_on_first_id: Person @relation(name: \\"BaseballEventStateRunner_on_first_idToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  runner_on_second_id: Person @relation(name: \\"BaseballEventStateRunner_on_second_idToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  runner_on_third_id: Person @relation(name: \\"BaseballEventStateRunner_on_third_idToPersonBaseballEventStates\\")
  runnerOnFirst: Int @db(name: \\"runner_on_first\\")
  runnerOnSecond: Int @db(name: \\"runner_on_second\\")
  runnerOnThird: Int @db(name: \\"runner_on_third\\")
  runsThisInningHalf: Int @db(name: \\"runs_this_inning_half\\")
  sequenceNumber: Int @db(name: \\"sequence_number\\")
  strikes: Int
}

type BaseballOffensiveStat @db(name: \\"baseball_offensive_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"baseball_offensive_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  atBats: Int @db(name: \\"at_bats\\")
  atBatsPerHomeRun: Float @db(name: \\"at_bats_per_home_run\\")
  atBatsPerRbi: Float @db(name: \\"at_bats_per_rbi\\")
  average: Float
  basesOnBalls: Int @db(name: \\"bases_on_balls\\")
  defensiveInterferanceReaches: Int @db(name: \\"defensive_interferance_reaches\\")
  doubles: Int
  grandSlams: Int @db(name: \\"grand_slams\\")
  groundedIntoDoublePlay: Int @db(name: \\"grounded_into_double_play\\")
  hitByPitch: Int @db(name: \\"hit_by_pitch\\")
  hits: Int
  hitsExtraBase: Int @db(name: \\"hits_extra_base\\")
  homeRuns: Int @db(name: \\"home_runs\\")
  leftInScoringPosition: Int @db(name: \\"left_in_scoring_position\\")
  leftOnBase: Int @db(name: \\"left_on_base\\")
  movedUp: Int @db(name: \\"moved_up\\")
  onBasePercentage: Float @db(name: \\"on_base_percentage\\")
  onBasePlusSlugging: Float @db(name: \\"on_base_plus_slugging\\")
  plateAppearances: Int @db(name: \\"plate_appearances\\")
  plateAppearancesPerHomeRun: Float @db(name: \\"plate_appearances_per_home_run\\")
  plateAppearancesPerRbi: Float @db(name: \\"plate_appearances_per_rbi\\")
  rbi: Int
  runsScored: Int @db(name: \\"runs_scored\\")
  sacBunts: Int @db(name: \\"sac_bunts\\")
  sacFlies: Int @db(name: \\"sac_flies\\")
  singles: Int
  sluggingPercentage: Float @db(name: \\"slugging_percentage\\")
  stolenBases: Int @db(name: \\"stolen_bases\\")
  stolenBasesAverage: Float @db(name: \\"stolen_bases_average\\")
  stolenBasesCaught: Int @db(name: \\"stolen_bases_caught\\")
  strikeouts: Int
  totalBases: Int @db(name: \\"total_bases\\")
  triples: Int
}

type BaseballPitchingStat @db(name: \\"baseball_pitching_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"baseball_pitching_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  balks: Int
  basesOnBalls: Int @db(name: \\"bases_on_balls\\")
  basesOnBallsIntentional: Int @db(name: \\"bases_on_balls_intentional\\")
  doublesAllowed: Int @db(name: \\"doubles_allowed\\")
  earnedRuns: Int @db(name: \\"earned_runs\\")
  era: Float
  errorsHitWithPitch: Int @db(name: \\"errors_hit_with_pitch\\")
  errorsWildPitch: Int @db(name: \\"errors_wild_pitch\\")
  eventCredit: String @db(name: \\"event_credit\\")
  gamesComplete: Int @db(name: \\"games_complete\\")
  gamesFinished: Int @db(name: \\"games_finished\\")
  hits: Int
  homeRunsAllowed: Int @db(name: \\"home_runs_allowed\\")
  inheritedRunnersScored: Int @db(name: \\"inherited_runners_scored\\")
  inningsPitched: String @db(name: \\"innings_pitched\\")
  losses: Int
  numberOfPitches: Int @db(name: \\"number_of_pitches\\")
  pickOffs: Int @db(name: \\"pick_offs\\")
  runsAllowed: Int @db(name: \\"runs_allowed\\")
  saveCredit: String @db(name: \\"save_credit\\")
  saves: Int
  shutouts: Int
  singlesAllowed: Int @db(name: \\"singles_allowed\\")
  strikeouts: Int
  strikeoutToBbRatio: Float @db(name: \\"strikeout_to_bb_ratio\\")
  triplesAllowed: Int @db(name: \\"triples_allowed\\")
  unearnedRuns: Int @db(name: \\"unearned_runs\\")
  winningPercentage: Float @db(name: \\"winning_percentage\\")
  wins: Int
}

type BasketballDefensiveStat @db(name: \\"basketball_defensive_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"basketball_defensive_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  blocksPerGame: String @db(name: \\"blocks_per_game\\")
  blocksTotal: String @db(name: \\"blocks_total\\")
  stealsPerGame: String @db(name: \\"steals_per_game\\")
  stealsTotal: String @db(name: \\"steals_total\\")
}

type BasketballEventState @db(name: \\"basketball_event_states\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"basketball_event_states_id_seq\\", initialValue: 1, allocationSize: 1)
  context: String
  currentState: Int @db(name: \\"current_state\\")
  event: Event! @db(name: \\"event_id\\")
  periodTimeElapsed: String @db(name: \\"period_time_elapsed\\")
  periodTimeRemaining: String @db(name: \\"period_time_remaining\\")
  periodValue: String @db(name: \\"period_value\\")
  sequenceNumber: Int @db(name: \\"sequence_number\\")
}

type BasketballOffensiveStat @db(name: \\"basketball_offensive_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"basketball_offensive_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  assistsPerGame: String @db(name: \\"assists_per_game\\")
  assistsTotal: String @db(name: \\"assists_total\\")
  fieldGoalsAttempted: Int @db(name: \\"field_goals_attempted\\")
  fieldGoalsAttemptedPerGame: String @db(name: \\"field_goals_attempted_per_game\\")
  fieldGoalsMade: Int @db(name: \\"field_goals_made\\")
  fieldGoalsPercentage: String @db(name: \\"field_goals_percentage\\")
  fieldGoalsPercentageAdjusted: String @db(name: \\"field_goals_percentage_adjusted\\")
  fieldGoalsPerGame: String @db(name: \\"field_goals_per_game\\")
  freeThrowsAttempted: String @db(name: \\"free_throws_attempted\\")
  freeThrowsAttemptedPerGame: String @db(name: \\"free_throws_attempted_per_game\\")
  freeThrowsMade: String @db(name: \\"free_throws_made\\")
  freeThrowsPercentage: String @db(name: \\"free_throws_percentage\\")
  freeThrowsPerGame: String @db(name: \\"free_throws_per_game\\")
  pointsScoredInPaint: String @db(name: \\"points_scored_in_paint\\")
  pointsScoredOffTurnovers: String @db(name: \\"points_scored_off_turnovers\\")
  pointsScoredOnFastBreak: String @db(name: \\"points_scored_on_fast_break\\")
  pointsScoredOnSecondChance: String @db(name: \\"points_scored_on_second_chance\\")
  pointsScoredPerGame: String @db(name: \\"points_scored_per_game\\")
  pointsScoredTotal: String @db(name: \\"points_scored_total\\")
  threePointersAttempted: Int @db(name: \\"three_pointers_attempted\\")
  threePointersAttemptedPerGame: String @db(name: \\"three_pointers_attempted_per_game\\")
  threePointersMade: Int @db(name: \\"three_pointers_made\\")
  threePointersPercentage: String @db(name: \\"three_pointers_percentage\\")
  threePointersPerGame: String @db(name: \\"three_pointers_per_game\\")
  turnoversPerGame: String @db(name: \\"turnovers_per_game\\")
  turnoversTotal: String @db(name: \\"turnovers_total\\")
}

type BasketballReboundingStat @db(name: \\"basketball_rebounding_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"basketball_rebounding_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  reboundsDefensive: String @db(name: \\"rebounds_defensive\\")
  reboundsOffensive: String @db(name: \\"rebounds_offensive\\")
  reboundsPerGame: String @db(name: \\"rebounds_per_game\\")
  reboundsTotal: String @db(name: \\"rebounds_total\\")
  teamReboundsDefensive: String @db(name: \\"team_rebounds_defensive\\")
  teamReboundsOffensive: String @db(name: \\"team_rebounds_offensive\\")
  teamReboundsPerGame: String @db(name: \\"team_rebounds_per_game\\")
  teamReboundsTotal: String @db(name: \\"team_rebounds_total\\")
}

type BasketballTeamStat @db(name: \\"basketball_team_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"basketball_team_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  foulsTotal: String @db(name: \\"fouls_total\\")
  largestLead: String @db(name: \\"largest_lead\\")
  timeoutsLeft: String @db(name: \\"timeouts_left\\")
  turnoverMargin: String @db(name: \\"turnover_margin\\")
}

type Bookmaker @db(name: \\"bookmakers\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"bookmakers_id_seq\\", initialValue: 1, allocationSize: 1)
  bookmakerKey: String @db(name: \\"bookmaker_key\\")
  location: Location @db(name: \\"location_id\\")
  publisher: Publisher! @db(name: \\"publisher_id\\")
  wageringMoneylines: [WageringMoneyline]
  wageringOddsLines: [WageringOddsLine]
  wageringRunlines: [WageringRunline]
  wageringStraightSpreadLines: [WageringStraightSpreadLine]
  wageringTotalScoreLines: [WageringTotalScoreLine]
}

type CorePersonStat @db(name: \\"core_person_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"core_person_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  eventsPlayed: Int @db(name: \\"events_played\\")
  eventsStarted: Int @db(name: \\"events_started\\")
  position: Position @db(name: \\"position_id\\")
  timePlayedEvent: String @db(name: \\"time_played_event\\")
  timePlayedEventAverage: String @db(name: \\"time_played_event_average\\")
  timePlayedTotal: String @db(name: \\"time_played_total\\")
}

type CoreStat @db(name: \\"core_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"core_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  score: String
  scoreAttempts: String @db(name: \\"score_attempts\\")
  scoreAttemptsOpposing: String @db(name: \\"score_attempts_opposing\\")
  scoreOpposing: String @db(name: \\"score_opposing\\")
  scorePercentage: String @db(name: \\"score_percentage\\")
  scorePercentageOpposing: String @db(name: \\"score_percentage_opposing\\")
}

type DbInfo @db(name: \\"db_info\\") {
  version: String! @default(value: \\"16\\")
}

type DisplayName @db(name: \\"display_names\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"display_names_id_seq\\", initialValue: 1, allocationSize: 1)
  abbreviation: String
  alias: String
  entityId: Int! @db(name: \\"entity_id\\")
  entityType: String! @db(name: \\"entity_type\\")
  firstName: String @db(name: \\"first_name\\")
  fullName: String @db(name: \\"full_name\\")
  language: String!
  lastName: String @db(name: \\"last_name\\")
  middleName: String @db(name: \\"middle_name\\")
  prefix: String
  shortName: String @db(name: \\"short_name\\")
  suffix: String
}

type Document @db(name: \\"documents\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"documents_id_seq\\", initialValue: 1, allocationSize: 1)
  affiliationsDocuments: [AffiliationsDocument]
  dateTime: DateTime @db(name: \\"date_time\\")
  dbLoadingDateTime: DateTime @db(name: \\"db_loading_date_time\\")
  docId: String! @db(name: \\"doc_id\\")
  documentContents: [DocumentContent]
  documentFixture: DocumentFixture! @db(name: \\"document_fixture_id\\")
  documentFixturesEvents: [DocumentFixturesEvent]
  documentPackageEntry: [DocumentPackageEntry]
  documentsMedia: [DocumentsMedia]
  eventsDocuments: [EventsDocument]
  language: String
  latestRevisions: [LatestRevision]
  personsDocuments: [PersonsDocument]
  priority: String
  publisher: Publisher! @db(name: \\"publisher_id\\") @relation(name: \\"DocumentPublisherToPublisherDocuments\\")
  revisionId: String @db(name: \\"revision_id\\")
  source: Publisher @db(name: \\"source_id\\") @relation(name: \\"DocumentSourceToPublisherDocuments\\")
  statsCoverage: String @db(name: \\"stats_coverage\\")
  teamsDocuments: [TeamsDocument]
  title: String
}

type DocumentClass @db(name: \\"document_classes\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"document_classes_id_seq\\", initialValue: 1, allocationSize: 1)
  documentFixtures: [DocumentFixture]
  name: String
}

type DocumentContent @db(name: \\"document_contents\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"document_contents_id_seq\\", initialValue: 1, allocationSize: 1)
  abstract: String
  document: Document! @db(name: \\"document_id\\")
  sportsml: String
}

type DocumentFixture @db(name: \\"document_fixtures\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"document_fixtures_id_seq\\", initialValue: 1, allocationSize: 1)
  documentClass: DocumentClass! @db(name: \\"document_class_id\\")
  documentFixturesEvents: [DocumentFixturesEvent]
  documents: [Document]
  fixtureKey: String @db(name: \\"fixture_key\\")
  name: String
  publisher: Publisher! @db(name: \\"publisher_id\\")
}

type DocumentFixturesEvent @db(name: \\"document_fixtures_events\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"document_fixtures_events_id_seq\\", initialValue: 1, allocationSize: 1)
  documentFixture: DocumentFixture! @db(name: \\"document_fixture_id\\")
  event: Event! @db(name: \\"event_id\\")
  lastUpdate: DateTime @db(name: \\"last_update\\")
  latestDocument: Document! @db(name: \\"latest_document_id\\")
}

type DocumentPackage @db(name: \\"document_packages\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"document_packages_id_seq\\", initialValue: 1, allocationSize: 1)
  dateTime: DateTime @db(name: \\"date_time\\")
  documentPackageEntry: [DocumentPackageEntry]
  packageKey: String @db(name: \\"package_key\\")
  packageName: String @db(name: \\"package_name\\")
}

type DocumentPackageEntry @db(name: \\"document_package_entry\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"document_package_entry_id_seq\\", initialValue: 1, allocationSize: 1)
  document: Document! @db(name: \\"document_id\\")
  documentPackage: DocumentPackage! @db(name: \\"document_package_id\\")
  headline: String
  rank: String
  shortHeadline: String @db(name: \\"short_headline\\")
}

type DocumentsMedia @db(name: \\"documents_media\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"documents_media_id_seq\\", initialValue: 1, allocationSize: 1)
  document: Document! @db(name: \\"document_id\\")
  media: Media! @db(name: \\"media_id\\")
  mediaCaption: MediaCaption! @db(name: \\"media_caption_id\\")
}

type Event @db(name: \\"events\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"events_id_seq\\", initialValue: 1, allocationSize: 1)
  affiliationsEvents: [AffiliationsEvent]
  americanFootballEventStates: [AmericanFootballEventState]
  attendance: String
  baseballEventStates: [BaseballEventState]
  basketballEventStates: [BasketballEventState]
  documentFixturesEvents: [DocumentFixturesEvent]
  duration: String
  eventKey: String! @db(name: \\"event_key\\")
  eventsDocuments: [EventsDocument]
  eventsMedia: [EventsMedia]
  eventsSubSeasons: [EventsSubSeason]
  eventStatus: String @db(name: \\"event_status\\")
  iceHockeyEventStates: [IceHockeyEventState]
  lastUpdate: DateTime @db(name: \\"last_update\\")
  motorRacingEventStates: [MotorRacingEventState]
  participantsEvents: [ParticipantsEvent]
  personEventMetadata: [PersonEventMetadatum]
  publisher: Publisher! @db(name: \\"publisher_id\\")
  site: Site @db(name: \\"site_id\\")
  siteAlignment: String @db(name: \\"site_alignment\\")
  soccerEventStates: [SoccerEventState]
  startDateTime: DateTime @db(name: \\"start_date_time\\")
  tennisEventStates: [TennisEventState]
  wageringMoneylines: [WageringMoneyline]
  wageringOddsLines: [WageringOddsLine]
  wageringRunlines: [WageringRunline]
  wageringStraightSpreadLines: [WageringStraightSpreadLine]
  wageringTotalScoreLines: [WageringTotalScoreLine]
  weatherConditions: [WeatherCondition]
}

type EventsDocument @db(name: \\"events_documents\\") @relationTable {
  document: Document! @db(name: \\"document_id\\")
  event: Event! @db(name: \\"event_id\\")
}

type EventsMedia @db(name: \\"events_media\\") @relationTable {
  event: Event! @db(name: \\"event_id\\")
  media: Media! @db(name: \\"media_id\\")
}

type EventsSubSeason @db(name: \\"events_sub_seasons\\") @relationTable {
  event: Event! @db(name: \\"event_id\\")
  subSeason: SubSeason! @db(name: \\"sub_season_id\\")
}

type IceHockeyActionParticipant @db(name: \\"ice_hockey_action_participants\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"ice_hockey_action_participants_id_seq\\", initialValue: 1, allocationSize: 1)
  iceHockeyActionPlayId: Int! @db(name: \\"ice_hockey_action_play_id\\")
  participantRole: String! @db(name: \\"participant_role\\")
  personId: Int! @db(name: \\"person_id\\")
  pointCredit: Int @db(name: \\"point_credit\\")
}

type IceHockeyActionPlay @db(name: \\"ice_hockey_action_plays\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"ice_hockey_action_plays_id_seq\\", initialValue: 1, allocationSize: 1)
  comment: String
  iceHockeyEventStateId: Int! @db(name: \\"ice_hockey_event_state_id\\")
  playResult: String @db(name: \\"play_result\\")
  playType: String @db(name: \\"play_type\\")
  scoreAttemptType: String @db(name: \\"score_attempt_type\\")
}

type IceHockeyDefensiveStat @db(name: \\"ice_hockey_defensive_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"ice_hockey_defensive_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  goalsAgainstAverage: String @db(name: \\"goals_against_average\\")
  goalsEmptyNetAllowed: String @db(name: \\"goals_empty_net_allowed\\")
  goalsPenaltyShotAllowed: String @db(name: \\"goals_penalty_shot_allowed\\")
  goalsPowerPlayAllowed: String @db(name: \\"goals_power_play_allowed\\")
  goalsShootoutAllowed: String @db(name: \\"goals_shootout_allowed\\")
  goalsShortHandedAllowed: String @db(name: \\"goals_short_handed_allowed\\")
  hits: String
  minutesPenaltyKilling: String @db(name: \\"minutes_penalty_killing\\")
  penaltyKillingAmount: String @db(name: \\"penalty_killing_amount\\")
  penaltyKillingPercentage: String @db(name: \\"penalty_killing_percentage\\")
  savePercentage: String @db(name: \\"save_percentage\\")
  saves: String
  shotsBlocked: String @db(name: \\"shots_blocked\\")
  shotsPenaltyShotAllowed: String @db(name: \\"shots_penalty_shot_allowed\\")
  shotsPowerPlayAllowed: String @db(name: \\"shots_power_play_allowed\\")
  shotsShootoutAllowed: String @db(name: \\"shots_shootout_allowed\\")
  shutouts: String
  takeaways: String
}

type IceHockeyEventState @db(name: \\"ice_hockey_event_states\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"ice_hockey_event_states_id_seq\\", initialValue: 1, allocationSize: 1)
  context: String
  currentState: Int @db(name: \\"current_state\\")
  event: Event! @db(name: \\"event_id\\")
  periodTimeElapsed: String @db(name: \\"period_time_elapsed\\")
  periodTimeRemaining: String @db(name: \\"period_time_remaining\\")
  periodValue: String @db(name: \\"period_value\\")
  sequenceNumber: Int @db(name: \\"sequence_number\\")
}

type IceHockeyOffensiveStat @db(name: \\"ice_hockey_offensive_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"ice_hockey_offensive_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  assists: String
  faceoffLosses: String @db(name: \\"faceoff_losses\\")
  faceoffWinPercentage: String @db(name: \\"faceoff_win_percentage\\")
  faceoffWins: String @db(name: \\"faceoff_wins\\")
  giveaways: String
  goalsEmptyNet: String @db(name: \\"goals_empty_net\\")
  goalsEvenStrength: String @db(name: \\"goals_even_strength\\")
  goalsGameTying: String @db(name: \\"goals_game_tying\\")
  goalsGameWinning: String @db(name: \\"goals_game_winning\\")
  goalsOvertime: String @db(name: \\"goals_overtime\\")
  goalsPenaltyShot: String @db(name: \\"goals_penalty_shot\\")
  goalsPowerPlay: String @db(name: \\"goals_power_play\\")
  goalsShootout: String @db(name: \\"goals_shootout\\")
  goalsShortHanded: String @db(name: \\"goals_short_handed\\")
  minutesPowerPlay: String @db(name: \\"minutes_power_play\\")
  points: String
  powerPlayAmount: String @db(name: \\"power_play_amount\\")
  powerPlayPercentage: String @db(name: \\"power_play_percentage\\")
  scoringChances: String @db(name: \\"scoring_chances\\")
  shotsPenaltyShotMissed: String @db(name: \\"shots_penalty_shot_missed\\")
  shotsPenaltyShotPercentage: String @db(name: \\"shots_penalty_shot_percentage\\")
  shotsPenaltyShotTaken: String @db(name: \\"shots_penalty_shot_taken\\")
}

type IceHockeyPlayerStat @db(name: \\"ice_hockey_player_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"ice_hockey_player_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  plusMinus: String @db(name: \\"plus_minus\\")
}

type InjuryPhase @db(name: \\"injury_phases\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"injury_phases_id_seq\\", initialValue: 1, allocationSize: 1)
  disabledList: String @db(name: \\"disabled_list\\")
  endDateTime: DateTime @db(name: \\"end_date_time\\")
  injuryComment: String @db(name: \\"injury_comment\\")
  injurySide: String @db(name: \\"injury_side\\")
  injuryStatus: String @db(name: \\"injury_status\\")
  injuryType: String @db(name: \\"injury_type\\")
  person: Person! @db(name: \\"person_id\\")
  phaseType: String @db(name: \\"phase_type\\")
  season: Season @db(name: \\"season_id\\")
  startDateTime: DateTime @db(name: \\"start_date_time\\")
}

type KeyAlias @db(name: \\"key_aliases\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"key_aliases_id_seq\\", initialValue: 1, allocationSize: 1)
  keyId: Int! @db(name: \\"key_id\\")
  keyRoot: KeyRoot! @db(name: \\"key_root_id\\")
}

type KeyRoot @db(name: \\"key_roots\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"key_roots_id_seq\\", initialValue: 1, allocationSize: 1)
  keyAliases: [KeyAlias]
  keyType: String @db(name: \\"key_type\\")
}

type LatestRevision @db(name: \\"latest_revisions\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"latest_revisions_id_seq\\", initialValue: 1, allocationSize: 1)
  latestDocument: Document! @db(name: \\"latest_document_id\\")
  revisionId: String! @db(name: \\"revision_id\\")
}

type Location @db(name: \\"locations\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"locations_id_seq\\", initialValue: 1, allocationSize: 1)
  addresses: [Address]
  bookmakers: [Bookmaker]
  countryCode: String @db(name: \\"country_code\\")
  latitude: String
  longitude: String
  media: [Media]
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Person.birthLocation.
  # persons: [Person] @relation(name: \\"LocationPersonsToPersonBirthLocation\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Person.deathLocation.
  # persons: [Person] @relation(name: \\"LocationPersonsToPersonDeathLocation\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Person.hometownLocation.
  # persons: [Person] @relation(name: \\"LocationPersonsToPersonHometownLocation\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Person.residenceLocation.
  # persons: [Person] @relation(name: \\"LocationPersonsToPersonResidenceLocation\\")
  sites: [Site]
  timezone: String
}

type Media @db(name: \\"media\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"media_id_seq\\", initialValue: 1, allocationSize: 1)
  affiliationsMedia: [AffiliationsMedia]
  creationLocation: Location! @db(name: \\"creation_location_id\\")
  credit: Person! @db(name: \\"credit_id\\")
  dateTime: String @db(name: \\"date_time\\")
  dbLoadingDateTime: DateTime @db(name: \\"db_loading_date_time\\")
  documentsMedia: [DocumentsMedia]
  eventsMedia: [EventsMedia]
  mediaCaptions: [MediaCaption]
  mediaContents: [MediaContent]
  mediaKeywords: [MediaKeyword]
  mediaType: String @db(name: \\"media_type\\")
  objectId: Int @db(name: \\"object_id\\")
  personsMedia: [PersonsMedia]
  publisher: Publisher! @db(name: \\"publisher_id\\")
  revisionId: Int @db(name: \\"revision_id\\")
  sourceId: Int @db(name: \\"source_id\\")
  teamsMedia: [TeamsMedia]
}

type MediaCaption @db(name: \\"media_captions\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"media_captions_id_seq\\", initialValue: 1, allocationSize: 1)
  caption: String
  captionAuthor: Person! @db(name: \\"caption_author_id\\")
  captionSize: String @db(name: \\"caption_size\\")
  captionType: String @db(name: \\"caption_type\\")
  documentsMedia: [DocumentsMedia]
  language: String
  media: Media! @db(name: \\"media_id\\")
}

type MediaContent @db(name: \\"media_contents\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"media_contents_id_seq\\", initialValue: 1, allocationSize: 1)
  duration: String
  fileSize: String @db(name: \\"file_size\\")
  format: String
  height: String
  media: Media! @db(name: \\"media_id\\")
  mimeType: String @db(name: \\"mime_type\\")
  object: String
  resolution: String
  width: String
}

type MediaKeyword @db(name: \\"media_keywords\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"media_keywords_id_seq\\", initialValue: 1, allocationSize: 1)
  keyword: String
  media: Media! @db(name: \\"media_id\\")
}

type MotorRacingEventState @db(name: \\"motor_racing_event_states\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"motor_racing_event_states_id_seq\\", initialValue: 1, allocationSize: 1)
  context: String
  currentState: Int @db(name: \\"current_state\\")
  event: Event! @db(name: \\"event_id\\")
  flagState: String @db(name: \\"flag_state\\")
  lap: String
  lapsRemaining: String @db(name: \\"laps_remaining\\")
  sequenceNumber: Int @db(name: \\"sequence_number\\")
  timeElapsed: String @db(name: \\"time_elapsed\\")
}

type MotorRacingQualifyingStat @db(name: \\"motor_racing_qualifying_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"motor_racing_qualifying_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  grid: String
  polePosition: String @db(name: \\"pole_position\\")
  poleWins: String @db(name: \\"pole_wins\\")
  qualifyingPosition: String @db(name: \\"qualifying_position\\")
  qualifyingSpeed: String @db(name: \\"qualifying_speed\\")
  qualifyingSpeedUnits: String @db(name: \\"qualifying_speed_units\\")
  qualifyingTime: String @db(name: \\"qualifying_time\\")
}

type MotorRacingRaceStat @db(name: \\"motor_racing_race_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"motor_racing_race_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  bonus: String
  distanceCompleted: String @db(name: \\"distance_completed\\")
  distanceLeading: String @db(name: \\"distance_leading\\")
  distanceUnits: String @db(name: \\"distance_units\\")
  finishes: String
  finishesTop10: String @db(name: \\"finishes_top_10\\")
  finishesTop5: String @db(name: \\"finishes_top_5\\")
  lapsAheadFollower: String @db(name: \\"laps_ahead_follower\\")
  lapsBehindLeader: String @db(name: \\"laps_behind_leader\\")
  lapsCompleted: String @db(name: \\"laps_completed\\")
  lapsLeadingTotal: String @db(name: \\"laps_leading_total\\")
  leadsTotal: String @db(name: \\"leads_total\\")
  money: String
  moneyUnits: String @db(name: \\"money_units\\")
  nonFinishes: String @db(name: \\"non_finishes\\")
  points: String
  pointsRookie: String @db(name: \\"points_rookie\\")
  racesLeading: String @db(name: \\"races_leading\\")
  speedAverage: String @db(name: \\"speed_average\\")
  speedUnits: String @db(name: \\"speed_units\\")
  starts: String
  status: String
  time: String
  timeAheadFollower: String @db(name: \\"time_ahead_follower\\")
  timeBehindLeader: String @db(name: \\"time_behind_leader\\")
  wins: String
}

type OutcomeTotal @db(name: \\"outcome_totals\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"outcome_totals_id_seq\\", initialValue: 1, allocationSize: 1)
  losses: String
  outcomeHolderId: Int @db(name: \\"outcome_holder_id\\")
  outcomeHolderType: String @db(name: \\"outcome_holder_type\\")
  pointsDifference: String @db(name: \\"points_difference\\")
  pointsScoredAgainst: String @db(name: \\"points_scored_against\\")
  pointsScoredFor: String @db(name: \\"points_scored_for\\")
  rank: String
  standingPoints: String @db(name: \\"standing_points\\")
  standingSubgroup: StandingSubgroup! @db(name: \\"standing_subgroup_id\\")
  streakDuration: String @db(name: \\"streak_duration\\")
  streakEnd: DateTime @db(name: \\"streak_end\\")
  streakStart: DateTime @db(name: \\"streak_start\\")
  streakTotal: String @db(name: \\"streak_total\\")
  streakType: String @db(name: \\"streak_type\\")
  ties: String
  undecideds: String
  winningPercentage: String @db(name: \\"winning_percentage\\")
  wins: String
}

type ParticipantsEvent @db(name: \\"participants_events\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"participants_events_id_seq\\", initialValue: 1, allocationSize: 1)
  alignment: String
  event: Event! @db(name: \\"event_id\\")
  eventOutcome: String @db(name: \\"event_outcome\\")
  participantId: Int! @db(name: \\"participant_id\\")
  participantType: String! @db(name: \\"participant_type\\")
  periods: [Period]
  rank: Int
  score: String
}

type Period @db(name: \\"periods\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"periods_id_seq\\", initialValue: 1, allocationSize: 1)
  participantEvent: ParticipantsEvent! @db(name: \\"participant_event_id\\")
  periodValue: String @db(name: \\"period_value\\")
  score: String
  subPeriods: [SubPeriod]
}

type Person @db(name: \\"persons\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"persons_id_seq\\", initialValue: 1, allocationSize: 1)
  americanFootballActionParticipants: [AmericanFootballActionParticipant]
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballActionSubstitution.personOriginal.
  # baseballActionSubstitutions: [BaseballActionSubstitution] @relation(name: \\"BaseballActionSubstitutionPersonOriginalToPersonBaseballActionSubstitutions\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballActionSubstitution.personReplacing.
  # baseballActionSubstitutions: [BaseballActionSubstitution] @relation(name: \\"BaseballActionSubstitutionPersonReplacingToPersonBaseballActionSubstitutions\\")
  baseballDefensivePlayers: [BaseballDefensivePlayer]
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballEventState.batter.
  # baseballEventStates: [BaseballEventState] @relation(name: \\"BaseballEventStateBatterToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballEventState.pitcher.
  # baseballEventStates: [BaseballEventState] @relation(name: \\"BaseballEventStatePitcherToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballEventState.runner_on_first_id.
  # baseballEventStates: [BaseballEventState] @relation(name: \\"BaseballEventStateRunner_on_first_idToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballEventState.runner_on_second_id.
  # baseballEventStates: [BaseballEventState] @relation(name: \\"BaseballEventStateRunner_on_second_idToPersonBaseballEventStates\\")
  # Field name normalization failed because of a conflicting field name.
  baseballEventStates: [BaseballEventState] @relation(name: \\"BaseballEventStateRunner_on_third_idToPersonBaseballEventStates\\")
  birthDate: String @db(name: \\"birth_date\\")
  birthLocation: Location @db(name: \\"birth_location_id\\") @relation(name: \\"LocationPersonsToPersonBirthLocation\\")
  deathDate: String @db(name: \\"death_date\\")
  deathLocation: Location @db(name: \\"death_location_id\\") @relation(name: \\"LocationPersonsToPersonDeathLocation\\")
  gender: String
  hometownLocation: Location @db(name: \\"hometown_location_id\\") @relation(name: \\"LocationPersonsToPersonHometownLocation\\")
  injuryPhases: [InjuryPhase]
  media: [Media]
  mediaCaptions: [MediaCaption]
  personEventMetadata: [PersonEventMetadatum]
  personKey: String! @db(name: \\"person_key\\")
  personPhases: [PersonPhase]
  personsDocuments: [PersonsDocument]
  personsMedia: [PersonsMedia]
  publisher: Publisher! @db(name: \\"publisher_id\\")
  residenceLocation: Location @db(name: \\"residence_location_id\\") @relation(name: \\"LocationPersonsToPersonResidenceLocation\\")
}

type PersonEventMetadatum @db(name: \\"person_event_metadata\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"person_event_metadata_id_seq\\", initialValue: 1, allocationSize: 1)
  event: Event! @db(name: \\"event_id\\")
  health: String
  lineupSlot: Int @db(name: \\"lineup_slot\\")
  lineupSlotSequence: Int @db(name: \\"lineup_slot_sequence\\")
  person: Person! @db(name: \\"person_id\\")
  position: Position @db(name: \\"position_id\\")
  role: Role @db(name: \\"role_id\\")
  status: String
  team: Team @db(name: \\"team_id\\")
  weight: String
}

type PersonPhase @db(name: \\"person_phases\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"person_phases_id_seq\\", initialValue: 1, allocationSize: 1)
  endDateTime: DateTime @db(name: \\"end_date_time\\")
  endSeason: Season @db(name: \\"end_season_id\\") @relation(name: \\"PersonPhaseEndSeasonToSeasonPersonPhases\\")
  entryReason: String @db(name: \\"entry_reason\\")
  exitReason: String @db(name: \\"exit_reason\\")
  height: String
  membershipId: Int! @db(name: \\"membership_id\\")
  membershipType: String! @db(name: \\"membership_type\\")
  person: Person! @db(name: \\"person_id\\")
  phaseStatus: String @db(name: \\"phase_status\\")
  regularPosition: Position @db(name: \\"regular_position_id\\")
  regularPositionDepth: String @db(name: \\"regular_position_depth\\")
  role: Role @db(name: \\"role_id\\")
  roleStatus: String @db(name: \\"role_status\\")
  selectionLevel: Int @db(name: \\"selection_level\\")
  selectionOverall: Int @db(name: \\"selection_overall\\")
  selectionSublevel: Int @db(name: \\"selection_sublevel\\")
  startDateTime: DateTime @db(name: \\"start_date_time\\")
  startSeason: Season @db(name: \\"start_season_id\\") @relation(name: \\"PersonPhaseStartSeasonToSeasonPersonPhases\\")
  uniformNumber: String @db(name: \\"uniform_number\\")
  weight: String
}

type PersonsDocument @db(name: \\"persons_documents\\") @relationTable {
  document: Document! @db(name: \\"document_id\\")
  person: Person! @db(name: \\"person_id\\")
}

type PersonsMedia @db(name: \\"persons_media\\") @relationTable {
  media: Media! @db(name: \\"media_id\\")
  person: Person! @db(name: \\"person_id\\")
}

type Position @db(name: \\"positions\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"positions_id_seq\\", initialValue: 1, allocationSize: 1)
  abbreviation: String!
  affiliation: Affiliation! @db(name: \\"affiliation_id\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballActionSubstitution.personOriginalPosition.
  # baseballActionSubstitutions: [BaseballActionSubstitution] @relation(name: \\"BaseballActionSubstitutionPersonOriginalPositionToPositionBaseballActionSubstitutions\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references BaseballActionSubstitution.personReplacingPosition.
  # baseballActionSubstitutions: [BaseballActionSubstitution] @relation(name: \\"BaseballActionSubstitutionPersonReplacingPositionToPositionBaseballActionSubstitutions\\")
  baseballDefensivePlayers: [BaseballDefensivePlayer]
  corePersonStats: [CorePersonStat]
  personEventMetadata: [PersonEventMetadatum]
  personPhases: [PersonPhase]
}

type Publisher @db(name: \\"publishers\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"publishers_id_seq\\", initialValue: 1, allocationSize: 1)
  affiliations: [Affiliation]
  bookmakers: [Bookmaker]
  documentFixtures: [DocumentFixture]
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Document.publisher.
  # documents: [Document] @relation(name: \\"DocumentPublisherToPublisherDocuments\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references Document.source.
  # documents: [Document] @relation(name: \\"DocumentSourceToPublisherDocuments\\")
  events: [Event]
  media: [Media]
  persons: [Person]
  publisherKey: String! @db(name: \\"publisher_key\\")
  publisherName: String @db(name: \\"publisher_name\\")
  seasons: [Season]
  sites: [Site]
  standings: [Standing]
  teams: [Team]
}

type Role @db(name: \\"roles\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"roles_id_seq\\", initialValue: 1, allocationSize: 1)
  comment: String
  personEventMetadata: [PersonEventMetadatum]
  personPhases: [PersonPhase]
  roleKey: String! @db(name: \\"role_key\\")
  roleName: String @db(name: \\"role_name\\")
  teamPhases: [TeamPhase]
}

type Season @db(name: \\"seasons\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"seasons_id_seq\\", initialValue: 1, allocationSize: 1)
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references AffiliationPhase.endSeason.
  # affiliationPhases: [AffiliationPhase] @relation(name: \\"AffiliationPhaseEndSeasonToSeasonAffiliationPhases\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references AffiliationPhase.startSeason.
  # affiliationPhases: [AffiliationPhase] @relation(name: \\"AffiliationPhaseStartSeasonToSeasonAffiliationPhases\\")
  endDateTime: DateTime @db(name: \\"end_date_time\\")
  injuryPhases: [InjuryPhase]
  league: Affiliation! @db(name: \\"league_id\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references PersonPhase.endSeason.
  # personPhases: [PersonPhase] @relation(name: \\"PersonPhaseEndSeasonToSeasonPersonPhases\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references PersonPhase.startSeason.
  # personPhases: [PersonPhase] @relation(name: \\"PersonPhaseStartSeasonToSeasonPersonPhases\\")
  publisher: Publisher! @db(name: \\"publisher_id\\")
  seasonKey: Int! @db(name: \\"season_key\\")
  startDateTime: DateTime @db(name: \\"start_date_time\\")
  subSeasons: [SubSeason]
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references TeamPhase.endSeason.
  # teamPhases: [TeamPhase] @relation(name: \\"SeasonTeamPhasesToTeamPhaseEndSeason\\")
  # Field name normalization failed because of a conflicting field name.
  # Could not auto-generate backwards relation field, field name would be ambiguous.
  # Please specify the name of this field and the name of the relation manually.
  # It references TeamPhase.startSeason.
  # teamPhases: [TeamPhase] @relation(name: \\"SeasonTeamPhasesToTeamPhaseStartSeason\\")
}

type Site @db(name: \\"sites\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"sites_id_seq\\", initialValue: 1, allocationSize: 1)
  events: [Event]
  location: Location @db(name: \\"location_id\\")
  publisher: Publisher! @db(name: \\"publisher_id\\")
  siteKey: Int! @db(name: \\"site_key\\")
  teams: [Team]
}

type SoccerDefensiveStat @db(name: \\"soccer_defensive_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"soccer_defensive_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  catchesPunches: String @db(name: \\"catches_punches\\")
  goalsAgainstAverage: String @db(name: \\"goals_against_average\\")
  goalsAgainstTotal: String @db(name: \\"goals_against_total\\")
  goalsPenaltyShotAllowed: String @db(name: \\"goals_penalty_shot_allowed\\")
  savePercentage: String @db(name: \\"save_percentage\\")
  saves: String
  shotsBlocked: String @db(name: \\"shots_blocked\\")
  shotsOnGoalTotal: String @db(name: \\"shots_on_goal_total\\")
  shotsPenaltyShotAllowed: String @db(name: \\"shots_penalty_shot_allowed\\")
  shotsShootoutAllowed: String @db(name: \\"shots_shootout_allowed\\")
  shotsShootoutTotal: String @db(name: \\"shots_shootout_total\\")
  shutouts: String
}

type SoccerEventState @db(name: \\"soccer_event_states\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"soccer_event_states_id_seq\\", initialValue: 1, allocationSize: 1)
  context: String
  currentState: Int @db(name: \\"current_state\\")
  event: Event! @db(name: \\"event_id\\")
  minutesElapsed: String @db(name: \\"minutes_elapsed\\")
  periodMinuteElapsed: String @db(name: \\"period_minute_elapsed\\")
  periodTimeElapsed: String @db(name: \\"period_time_elapsed\\")
  periodTimeRemaining: String @db(name: \\"period_time_remaining\\")
  periodValue: String @db(name: \\"period_value\\")
  sequenceNumber: Int @db(name: \\"sequence_number\\")
}

type SoccerFoulStat @db(name: \\"soccer_foul_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"soccer_foul_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  cautionPointsPending: String @db(name: \\"caution_points_pending\\")
  cautionPointsTotal: String @db(name: \\"caution_points_total\\")
  cautionsPending: String @db(name: \\"cautions_pending\\")
  cautionsTotal: String @db(name: \\"cautions_total\\")
  ejectionsTotal: String @db(name: \\"ejections_total\\")
  foulsCommited: String @db(name: \\"fouls_commited\\")
  foulsSuffered: String @db(name: \\"fouls_suffered\\")
}

type SoccerOffensiveStat @db(name: \\"soccer_offensive_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"soccer_offensive_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  assistsGameTying: String @db(name: \\"assists_game_tying\\")
  assistsGameWinning: String @db(name: \\"assists_game_winning\\")
  assistsOvertime: String @db(name: \\"assists_overtime\\")
  assistsTotal: String @db(name: \\"assists_total\\")
  cornerKicks: String @db(name: \\"corner_kicks\\")
  giveaways: String
  goalsGameTying: String @db(name: \\"goals_game_tying\\")
  goalsGameWinning: String @db(name: \\"goals_game_winning\\")
  goalsOvertime: String @db(name: \\"goals_overtime\\")
  goalsShootout: String @db(name: \\"goals_shootout\\")
  goalsTotal: String @db(name: \\"goals_total\\")
  hatTricks: String @db(name: \\"hat_tricks\\")
  offsides: String
  points: String
  shotsHitFrame: String @db(name: \\"shots_hit_frame\\")
  shotsOnGoalTotal: String @db(name: \\"shots_on_goal_total\\")
  shotsPenaltyShotMissed: String @db(name: \\"shots_penalty_shot_missed\\")
  shotsPenaltyShotPercentage: String @db(name: \\"shots_penalty_shot_percentage\\")
  shotsPenaltyShotScored: String @db(name: \\"shots_penalty_shot_scored\\")
  shotsPenaltyShotTaken: String @db(name: \\"shots_penalty_shot_taken\\")
  shotsShootoutMissed: String @db(name: \\"shots_shootout_missed\\")
  shotsShootoutPercentage: String @db(name: \\"shots_shootout_percentage\\")
  shotsShootoutScored: String @db(name: \\"shots_shootout_scored\\")
  shotsShootoutTaken: String @db(name: \\"shots_shootout_taken\\")
  shotsTotal: String @db(name: \\"shots_total\\")
}

type Standing @db(name: \\"standings\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"standings_id_seq\\", initialValue: 1, allocationSize: 1)
  affiliation: Affiliation! @db(name: \\"affiliation_id\\")
  alignmentScope: String @db(name: \\"alignment_scope\\")
  competitionScope: String @db(name: \\"competition_scope\\")
  competitionScopeId: String @db(name: \\"competition_scope_id\\")
  durationScope: String @db(name: \\"duration_scope\\")
  lastUpdated: String @db(name: \\"last_updated\\")
  publisher: Publisher! @db(name: \\"publisher_id\\")
  scopingLabel: String @db(name: \\"scoping_label\\")
  siteScope: String @db(name: \\"site_scope\\")
  source: String
  standingSubgroups: [StandingSubgroup]
  standingType: String @db(name: \\"standing_type\\")
  subSeason: SubSeason! @db(name: \\"sub_season_id\\")
}

type StandingSubgroup @db(name: \\"standing_subgroups\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"standing_subgroups_id_seq\\", initialValue: 1, allocationSize: 1)
  affiliation: Affiliation! @db(name: \\"affiliation_id\\")
  outcomeTotals: [OutcomeTotal]
  standing: Standing! @db(name: \\"standing_id\\")
}

type Stat @db(name: \\"stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"stats_id_seq\\", initialValue: 1, allocationSize: 1)
  context: String!
  statCoverageId: Int @db(name: \\"stat_coverage_id\\")
  statCoverageType: String @db(name: \\"stat_coverage_type\\")
  statHolderId: Int @db(name: \\"stat_holder_id\\")
  statHolderType: String @db(name: \\"stat_holder_type\\")
  statRepositoryId: Int! @db(name: \\"stat_repository_id\\")
  statRepositoryType: String @db(name: \\"stat_repository_type\\")
}

type SubPeriod @db(name: \\"sub_periods\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"sub_periods_id_seq\\", initialValue: 1, allocationSize: 1)
  period: Period! @db(name: \\"period_id\\")
  score: String
  subPeriodValue: String @db(name: \\"sub_period_value\\")
}

type SubSeason @db(name: \\"sub_seasons\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"sub_seasons_id_seq\\", initialValue: 1, allocationSize: 1)
  endDateTime: DateTime @db(name: \\"end_date_time\\")
  eventsSubSeasons: [EventsSubSeason]
  season: Season! @db(name: \\"season_id\\")
  standings: [Standing]
  startDateTime: DateTime @db(name: \\"start_date_time\\")
  subSeasonKey: String! @db(name: \\"sub_season_key\\")
  subSeasonType: String! @db(name: \\"sub_season_type\\")
}

type Team @db(name: \\"teams\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"teams_id_seq\\", initialValue: 1, allocationSize: 1)
  americanFootballEventStates: [AmericanFootballEventState]
  homeSite: Site @db(name: \\"home_site_id\\")
  personEventMetadata: [PersonEventMetadatum]
  publisher: Publisher! @db(name: \\"publisher_id\\")
  teamKey: String! @db(name: \\"team_key\\")
  teamPhases: [TeamPhase]
  teamsDocuments: [TeamsDocument]
  teamsMedia: [TeamsMedia]
  wageringMoneylines: [WageringMoneyline]
  wageringOddsLines: [WageringOddsLine]
  wageringRunlines: [WageringRunline]
  wageringStraightSpreadLines: [WageringStraightSpreadLine]
  wageringTotalScoreLines: [WageringTotalScoreLine]
}

type TeamAmericanFootballStat @db(name: \\"team_american_football_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"team_american_football_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  averageStartingPosition: String @db(name: \\"average_starting_position\\")
  timeOfPossession: String @db(name: \\"time_of_possession\\")
  timeouts: String
  turnoverRatio: String @db(name: \\"turnover_ratio\\")
  yardsPerAttempt: String @db(name: \\"yards_per_attempt\\")
}

type TeamPhase @db(name: \\"team_phases\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"team_phases_id_seq\\", initialValue: 1, allocationSize: 1)
  affiliation: Affiliation! @db(name: \\"affiliation_id\\")
  endDateTime: String @db(name: \\"end_date_time\\")
  endSeason: Season @db(name: \\"end_season_id\\") @relation(name: \\"SeasonTeamPhasesToTeamPhaseEndSeason\\")
  phaseStatus: String @db(name: \\"phase_status\\")
  role: Role @db(name: \\"role_id\\")
  startDateTime: String @db(name: \\"start_date_time\\")
  startSeason: Season @db(name: \\"start_season_id\\") @relation(name: \\"SeasonTeamPhasesToTeamPhaseStartSeason\\")
  team: Team! @db(name: \\"team_id\\")
}

type TeamsDocument @db(name: \\"teams_documents\\") @relationTable {
  document: Document! @db(name: \\"document_id\\")
  team: Team! @db(name: \\"team_id\\")
}

type TeamsMedia @db(name: \\"teams_media\\") @relationTable {
  media: Media! @db(name: \\"media_id\\")
  team: Team! @db(name: \\"team_id\\")
}

type TennisActionPoint @db(name: \\"tennis_action_points\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tennis_action_points_id_seq\\", initialValue: 1, allocationSize: 1)
  sequenceNumber: String @db(name: \\"sequence_number\\")
  subPeriodId: String @db(name: \\"sub_period_id\\")
  winType: String @db(name: \\"win_type\\")
}

type TennisActionVolley @db(name: \\"tennis_action_volleys\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tennis_action_volleys_id_seq\\", initialValue: 1, allocationSize: 1)
  landingLocation: String @db(name: \\"landing_location\\")
  result: String
  sequenceNumber: String @db(name: \\"sequence_number\\")
  spinType: String @db(name: \\"spin_type\\")
  swingType: String @db(name: \\"swing_type\\")
  tennisActionPointsId: Int @db(name: \\"tennis_action_points_id\\")
  trajectoryDetails: String @db(name: \\"trajectory_details\\")
}

type TennisEventState @db(name: \\"tennis_event_states\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tennis_event_states_id_seq\\", initialValue: 1, allocationSize: 1)
  context: String
  currentState: Int @db(name: \\"current_state\\")
  event: Event! @db(name: \\"event_id\\")
  game: String
  receiverPersonId: Int @db(name: \\"receiver_person_id\\")
  receiverScore: String @db(name: \\"receiver_score\\")
  sequenceNumber: Int @db(name: \\"sequence_number\\")
  serverPersonId: Int @db(name: \\"server_person_id\\")
  serverScore: String @db(name: \\"server_score\\")
  serviceNumber: String @db(name: \\"service_number\\")
  tennisSet: String @db(name: \\"tennis_set\\")
}

type TennisReturnStat @db(name: \\"tennis_return_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tennis_return_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  breakPointsConverted: String @db(name: \\"break_points_converted\\")
  breakPointsConvertedPct: String @db(name: \\"break_points_converted_pct\\")
  breakPointsPlayed: String @db(name: \\"break_points_played\\")
  firstServiceReturnPointsWon: String @db(name: \\"first_service_return_points_won\\")
  firstServiceReturnPointsWonPct: String @db(name: \\"first_service_return_points_won_pct\\")
  matchesPlayed: String @db(name: \\"matches_played\\")
  returnGamesPlayed: String @db(name: \\"return_games_played\\")
  returnGamesWon: String @db(name: \\"return_games_won\\")
  returnGamesWonPct: String @db(name: \\"return_games_won_pct\\")
  returnsPlayed: String @db(name: \\"returns_played\\")
  secondServiceReturnPointsWon: String @db(name: \\"second_service_return_points_won\\")
  secondServiceReturnPointsWonPct: String @db(name: \\"second_service_return_points_won_pct\\")
}

type TennisServiceStat @db(name: \\"tennis_service_stats\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"tennis_service_stats_id_seq\\", initialValue: 1, allocationSize: 1)
  aces: String
  breakPointsPlayed: String @db(name: \\"break_points_played\\")
  breakPointsSaved: String @db(name: \\"break_points_saved\\")
  breakPointsSavedPct: String @db(name: \\"break_points_saved_pct\\")
  firstServicePointsWon: String @db(name: \\"first_service_points_won\\")
  firstServicePointsWonPct: String @db(name: \\"first_service_points_won_pct\\")
  firstServicesGood: String @db(name: \\"first_services_good\\")
  firstServicesGoodPct: String @db(name: \\"first_services_good_pct\\")
  matchesPlayed: String @db(name: \\"matches_played\\")
  secondServicePointsWon: String @db(name: \\"second_service_points_won\\")
  secondServicePointsWonPct: String @db(name: \\"second_service_points_won_pct\\")
  serviceGamesPlayed: String @db(name: \\"service_games_played\\")
  serviceGamesWon: String @db(name: \\"service_games_won\\")
  serviceGamesWonPct: String @db(name: \\"service_games_won_pct\\")
  servicesPlayed: String @db(name: \\"services_played\\")
}

type WageringMoneyline @db(name: \\"wagering_moneylines\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"wagering_moneylines_id_seq\\", initialValue: 1, allocationSize: 1)
  bookmaker: Bookmaker! @db(name: \\"bookmaker_id\\")
  comment: String
  dateTime: DateTime @db(name: \\"date_time\\")
  event: Event! @db(name: \\"event_id\\")
  line: String
  lineOpening: String @db(name: \\"line_opening\\")
  personId: Int @db(name: \\"person_id\\")
  prediction: String
  rotationKey: String @db(name: \\"rotation_key\\")
  team: Team! @db(name: \\"team_id\\")
  vigorish: String
}

type WageringOddsLine @db(name: \\"wagering_odds_lines\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"wagering_odds_lines_id_seq\\", initialValue: 1, allocationSize: 1)
  bookmaker: Bookmaker! @db(name: \\"bookmaker_id\\")
  comment: String
  dateTime: DateTime @db(name: \\"date_time\\")
  denominator: String
  event: Event! @db(name: \\"event_id\\")
  numerator: String
  payoutAmount: String @db(name: \\"payout_amount\\")
  payoutCalculation: String @db(name: \\"payout_calculation\\")
  personId: Int @db(name: \\"person_id\\")
  prediction: String
  rotationKey: String @db(name: \\"rotation_key\\")
  team: Team! @db(name: \\"team_id\\")
}

type WageringRunline @db(name: \\"wagering_runlines\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"wagering_runlines_id_seq\\", initialValue: 1, allocationSize: 1)
  bookmaker: Bookmaker! @db(name: \\"bookmaker_id\\")
  comment: String
  dateTime: DateTime @db(name: \\"date_time\\")
  event: Event! @db(name: \\"event_id\\")
  line: String
  lineOpening: String @db(name: \\"line_opening\\")
  lineValue: String @db(name: \\"line_value\\")
  personId: Int @db(name: \\"person_id\\")
  prediction: String
  rotationKey: String @db(name: \\"rotation_key\\")
  team: Team! @db(name: \\"team_id\\")
  vigorish: String
}

type WageringStraightSpreadLine @db(name: \\"wagering_straight_spread_lines\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"wagering_straight_spread_lines_id_seq\\", initialValue: 1, allocationSize: 1)
  bookmaker: Bookmaker! @db(name: \\"bookmaker_id\\")
  comment: String
  dateTime: DateTime @db(name: \\"date_time\\")
  event: Event! @db(name: \\"event_id\\")
  lineValue: String @db(name: \\"line_value\\")
  lineValueOpening: String @db(name: \\"line_value_opening\\")
  personId: Int @db(name: \\"person_id\\")
  prediction: String
  rotationKey: String @db(name: \\"rotation_key\\")
  team: Team! @db(name: \\"team_id\\")
  vigorish: String
}

type WageringTotalScoreLine @db(name: \\"wagering_total_score_lines\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"wagering_total_score_lines_id_seq\\", initialValue: 1, allocationSize: 1)
  bookmaker: Bookmaker! @db(name: \\"bookmaker_id\\")
  comment: String
  dateTime: DateTime @db(name: \\"date_time\\")
  event: Event! @db(name: \\"event_id\\")
  lineOver: String @db(name: \\"line_over\\")
  lineUnder: String @db(name: \\"line_under\\")
  personId: Int @db(name: \\"person_id\\")
  prediction: String
  rotationKey: String @db(name: \\"rotation_key\\")
  team: Team! @db(name: \\"team_id\\")
  total: String
  totalOpening: String @db(name: \\"total_opening\\")
  vigorish: String
}

type WeatherCondition @db(name: \\"weather_conditions\\") {
  id: Int! @id(strategy: SEQUENCE) @sequence(name: \\"weather_conditions_id_seq\\", initialValue: 1, allocationSize: 1)
  clouds: String
  event: Event! @db(name: \\"event_id\\")
  humidity: String
  temperature: String
  temperatureUnits: String @db(name: \\"temperature_units\\")
  weatherCode: String @db(name: \\"weather_code\\")
  windDirection: String @db(name: \\"wind_direction\\")
  windVelocity: String @db(name: \\"wind_velocity\\")
}"
`;
