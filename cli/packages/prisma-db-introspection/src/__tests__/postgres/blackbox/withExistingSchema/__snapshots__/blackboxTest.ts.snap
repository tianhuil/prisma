// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Introspects defaultValue/relational correctly 1`] = `
"type A {
  a: Int @default(value: 10) @unique
  b: Int! @default(value: 10)
  c: String! @unique
  createdAt: DateTime!
  d: String @default(value: \\"Hello\\")
  id: ID! @unique
  updatedAt: DateTime!
}

type AWithId {
  a: Int @default(value: 10) @unique
  b: Int! @default(value: 10)
  b2: B!
  c: String! @unique
  createdAt: DateTime!
  d: String @default(value: \\"Hello\\")
  id: ID! @unique
  updatedAt: DateTime!
}

type B {
  a: [A]
  a2: AWithId
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
}"
`;

exports[`Introspects defaultValue/relational correctly 2`] = `
"type A {
  a: Int @default(value: 10) @unique
  b: Int! @default(value: 10)
  c: String! @unique
  createdAt: DateTime! @createdAt
  d: String @default(value: \\"Hello\\")
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type AWithId {
  a: Int @default(value: 10) @unique
  b: Int! @default(value: 10)
  b2: B! @relation(link: TABLE)
  c: String! @unique
  createdAt: DateTime! @createdAt
  d: String @default(value: \\"Hello\\")
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type B {
  a: [A]
  a2: AWithId
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}"
`;

exports[`Introspects embedded/relational correctly 1`] = `
"type Child {
  c: String @unique
  createdAt: DateTime!
  friendsOpt: [Friend]
  id: ID! @unique
  jointOpt: Joint!
  updatedAt: DateTime!
}

type Friend {
  createdAt: DateTime!
  f: String @unique
  id: ID! @unique
  test: String
  updatedAt: DateTime!
}

type Joint {
  createdAt: DateTime!
  id: ID! @unique
  j: String
  updatedAt: DateTime!
}

type Parent {
  children: [Child]
  createdAt: DateTime!
  id: ID! @unique
  j: [Joint]
  p: String @unique
  updatedAt: DateTime!
}"
`;

exports[`Introspects embedded/relational correctly 2`] = `
"type Child {
  c: String @unique
  createdAt: DateTime! @createdAt
  friendsOpt: [Friend]
  id: ID! @id
  jointOpt: Joint! @relation(link: TABLE)
  updatedAt: DateTime! @updatedAt
}

type Friend {
  createdAt: DateTime! @createdAt
  f: String @unique
  id: ID! @id
  test: String
  updatedAt: DateTime! @updatedAt
}

type Joint {
  createdAt: DateTime! @createdAt
  id: ID! @id
  j: String
  updatedAt: DateTime! @updatedAt
}

type Parent {
  children: [Child]
  createdAt: DateTime! @createdAt
  id: ID! @id
  j: [Joint]
  p: String @unique
  updatedAt: DateTime! @updatedAt
}"
`;

exports[`Introspects emptyTypes/relational correctly 1`] = `
"type OnlyDate {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
}

type OnlyId {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
}

type OnlyIdAndARelation {
  createdAt: DateTime!
  id: ID! @unique
  ref: OnlyId!
  updatedAt: DateTime!
}

type OnlyIdAndARelation2 {
  createdAt: DateTime!
  id: ID! @unique
  ref: OnlyId
  updatedAt: DateTime!
}

type OnlyRelation {
  createdAt: DateTime!
  id: ID! @unique
  ref: [OnlyDate]
  updatedAt: DateTime!
}

type OnlyRelationA {
  createdAt: DateTime!
  id: ID! @unique
  ref: OnlyRelationA!
  updatedAt: DateTime!
}

type OnlyRelationB {
  createdAt: DateTime!
  id: ID! @unique
  ref: OnlyRelationB
  updatedAt: DateTime!
}"
`;

exports[`Introspects emptyTypes/relational correctly 2`] = `
"type OnlyDate {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type OnlyId {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type OnlyIdAndARelation {
  createdAt: DateTime! @createdAt
  id: ID! @id
  ref: OnlyId! @relation(link: TABLE)
  updatedAt: DateTime! @updatedAt
}

type OnlyIdAndARelation2 {
  createdAt: DateTime! @createdAt
  id: ID! @id
  ref: OnlyId @relation(link: TABLE)
  updatedAt: DateTime! @updatedAt
}

type OnlyRelation {
  createdAt: DateTime! @createdAt
  id: ID! @id
  ref: [OnlyDate]
  updatedAt: DateTime! @updatedAt
}

type OnlyRelationA {
  createdAt: DateTime! @createdAt
  id: ID! @id
  ref: OnlyRelationA! @relation(link: TABLE)
  updatedAt: DateTime! @updatedAt
}

type OnlyRelationB {
  createdAt: DateTime! @createdAt
  id: ID! @id
  ref: OnlyRelationB @relation(link: TABLE)
  updatedAt: DateTime! @updatedAt
}"
`;

exports[`Introspects enum/relational correctly 1`] = `
"type A {
  b: B!
  createdAt: DateTime!
  fieldA: UsedEnum
  fieldB: UsedEnum!
  fieldC: [UsedEnum]
  id: ID! @unique
  updatedAt: DateTime!
}

type AWithId {
  c: C
  createdAt: DateTime!
  fieldA: UsedEnum
  fieldB: UsedEnum!
  fieldC: [UsedEnum]
  id: ID! @unique
  updatedAt: DateTime!
}

type B {
  a: [A]
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
}

type C {
  a: AWithId!
  createdAt: DateTime!
  field: [Int]
  id: ID! @unique
  updatedAt: DateTime!
}

type D {
  a: AWithId!
  createdAt: DateTime!
  field: [DateTime]
  id: ID! @unique
  updatedAt: DateTime!
}

type E {
  a: [A]
  createdAt: DateTime!
  field: Json
  id: ID! @unique
  updatedAt: DateTime!
}

enum UnusedEnum {
  X
  Y
  Z
}

enum UsedEnum {
  A
  B
  C
  D
}"
`;

exports[`Introspects enum/relational correctly 2`] = `
"type A {
  b: B! @relation(link: TABLE)
  createdAt: DateTime! @createdAt
  fieldA: UsedEnum
  fieldB: UsedEnum!
  fieldC: [UsedEnum] @scalarList(strategy: RELATION)
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type AWithId {
  c: C @relation(link: TABLE)
  createdAt: DateTime! @createdAt
  fieldA: UsedEnum
  fieldB: UsedEnum!
  fieldC: [UsedEnum] @scalarList(strategy: RELATION)
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type B {
  a: [A]
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type C {
  a: AWithId!
  createdAt: DateTime! @createdAt
  field: [Int] @scalarList(strategy: RELATION)
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type D {
  a: AWithId! @relation(link: TABLE)
  createdAt: DateTime! @createdAt
  field: [DateTime] @scalarList(strategy: RELATION)
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type E {
  a: [A]
  createdAt: DateTime! @createdAt
  field: Json
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

enum UnusedEnum {
  X
  Y
  Z
}

enum UsedEnum {
  A
  B
  C
  D
}"
`;

exports[`Introspects financial/relational correctly 1`] = `
"type Campus {
  accounts: [FinancialAccount]
  createdAt: DateTime!
  description: String
  id: ID! @unique
  isActive: Boolean
  location: Location
  name: String!
  organization: Group
  phoneNumbers: [PhoneNumber]
  updatedAt: DateTime!
}

type FinancialAccount {
  campuses: [Campus]
  createdAt: DateTime!
  description: String!
  id: ID! @unique
  isActive: Boolean!
  key: String @unique
  name: String
  updatedAt: DateTime!
}

type FinancialPaymentDetail {
  accountNumberMasked: String!
  achType: ACH_TYPE
  billingLocation: Location
  createdAt: DateTime!
  creditCardType: CREDIT_CARD
  currencyType: CURRENCY_TYPE
  expirationDate: DateTime!
  id: ID! @unique
  nameOnCard: String
  updatedAt: DateTime!
}

type FinancialScheduledTransaction {
  account: FinancialAccount
  amount: Float!
  createdAt: DateTime!
  endDate: DateTime
  frequency: TRANSACTION_FREQUENCY
  id: ID! @unique
  isActive: Boolean!
  payment: FinancialPaymentDetail
  person: Person
  startDate: DateTime
  transactions: [FinancialTransaction]
  updatedAt: DateTime!
}

type FinancialTransaction {
  account: FinancialAccount
  amount: Float!
  createdAt: DateTime!
  id: ID! @unique
  organization: Group!
  payment: FinancialPaymentDetail
  person: Person
  processedDate: DateTime
  scheduledTransaction: FinancialScheduledTransaction
  status: TRANSACTION_STATUS!
  transactionDate: DateTime
  updatedAt: DateTime!
}

type Group {
  createdAt: DateTime!
  description: String
  id: ID! @unique
  invites: [GroupInvite]
  isActive: Boolean!
  key: String @unique
  members: [GroupMember]
  name: String!
  organization: Group
  type: GroupType!
  updatedAt: DateTime!
}

type GroupInvite {
  createdAt: DateTime!
  email: String!
  group: Group!
  groupRole: GroupRole
  id: ID! @unique
  status: GROUP_INVITE_STATUS!
  updatedAt: DateTime!
}

type GroupMember {
  createdAt: DateTime!
  group: Group
  id: ID! @unique
  person: Person
  role: GroupRole
  updatedAt: DateTime!
}

type GroupRole {
  canEdit: Boolean!
  canView: Boolean!
  createdAt: DateTime!
  description: String!
  groupType: GroupType
  id: ID! @unique
  isLeader: Boolean
  name: String! @unique
  type: GROUP_ROLE_TYPE
  updatedAt: DateTime!
}

type GroupType {
  createdAt: DateTime!
  description: String
  groups: [Group]
  id: ID! @unique
  name: String! @unique
  roles: [GroupRole]
  updatedAt: DateTime!
}

type Location {
  city: String
  createdAt: DateTime!
  id: ID! @unique
  locationType: LOCATION_TYPE
  postalCode: String
  state: String
  street1: String
  street2: String
  updatedAt: DateTime!
}

type Person {
  createdAt: DateTime!
  email: String
  firstName: String
  id: ID! @unique
  lastName: String
  phoneNumbers: [PhoneNumber]
  scheduledTransactions: [FinancialScheduledTransaction]
  transactions: [FinancialTransaction]
  updatedAt: DateTime!
  user: User
}

type PhoneNumber {
  createdAt: DateTime!
  id: ID! @unique
  number: String!
  updatedAt: DateTime!
}

type User {
  createdAt: DateTime!
  id: ID! @unique
  person: Person!
  updatedAt: DateTime!
}

enum ACH_TYPE {
  SAVINGS
  CHECKING
}

enum CREDIT_CARD {
  VISA
  MASTERCARD
  AMEX
  DISCOVER
}

enum CURRENCY_TYPE {
  ACH
  CC
}

enum GROUP_INVITE_STATUS {
  PENDING
  JOINED
}

enum GROUP_ROLE_TYPE {
  ADMIN
  OWNER
  MEMBER
}

enum LOCATION_TYPE {
  HOME
  WORK
}

enum TRANSACTION_FREQUENCY {
  DAILY
  MONTHLY
  BIWEEKLY
  CUSTOM
}

enum TRANSACTION_STATUS {
  PENDING
  SUCCESS
  FAILED
}"
`;

exports[`Introspects financial/relational correctly 2`] = `
"type Campus {
  accounts: [FinancialAccount]
  createdAt: DateTime! @createdAt
  description: String
  id: ID! @id
  isActive: Boolean
  location: Location @relation(link: TABLE)
  name: String!
  organization: Group @relation(link: TABLE)
  phoneNumbers: [PhoneNumber]
  updatedAt: DateTime! @updatedAt
}

type FinancialAccount {
  campuses: [Campus]
  createdAt: DateTime! @createdAt
  description: String!
  id: ID! @id
  isActive: Boolean!
  key: String @unique
  name: String
  updatedAt: DateTime! @updatedAt
}

type FinancialPaymentDetail {
  accountNumberMasked: String!
  achType: ACH_TYPE
  billingLocation: Location @relation(link: TABLE)
  createdAt: DateTime! @createdAt
  creditCardType: CREDIT_CARD
  currencyType: CURRENCY_TYPE
  expirationDate: DateTime!
  id: ID! @id
  nameOnCard: String
  updatedAt: DateTime! @updatedAt
}

type FinancialScheduledTransaction {
  account: FinancialAccount @relation(link: TABLE)
  amount: Float!
  createdAt: DateTime! @createdAt
  endDate: DateTime
  frequency: TRANSACTION_FREQUENCY
  id: ID! @id
  isActive: Boolean!
  payment: FinancialPaymentDetail @relation(link: TABLE)
  person: Person @relation(link: TABLE)
  startDate: DateTime
  transactions: [FinancialTransaction]
  updatedAt: DateTime! @updatedAt
}

type FinancialTransaction {
  account: FinancialAccount @relation(link: TABLE)
  amount: Float!
  createdAt: DateTime! @createdAt
  id: ID! @id
  organization: Group! @relation(link: TABLE)
  payment: FinancialPaymentDetail @relation(link: TABLE)
  person: Person @relation(link: TABLE)
  processedDate: DateTime
  scheduledTransaction: FinancialScheduledTransaction @relation(link: TABLE)
  status: TRANSACTION_STATUS!
  transactionDate: DateTime
  updatedAt: DateTime! @updatedAt
}

type Group {
  createdAt: DateTime! @createdAt
  description: String
  id: ID! @id
  invites: [GroupInvite]
  isActive: Boolean!
  key: String @unique
  members: [GroupMember]
  name: String!
  organization: Group @relation(link: TABLE)
  type: GroupType! @relation(link: TABLE)
  updatedAt: DateTime! @updatedAt
}

type GroupInvite {
  createdAt: DateTime! @createdAt
  email: String!
  group: Group! @relation(link: TABLE)
  groupRole: GroupRole @relation(link: TABLE)
  id: ID! @id
  status: GROUP_INVITE_STATUS!
  updatedAt: DateTime! @updatedAt
}

type GroupMember {
  createdAt: DateTime! @createdAt
  group: Group @relation(link: TABLE)
  id: ID! @id
  person: Person @relation(link: TABLE)
  role: GroupRole @relation(link: TABLE)
  updatedAt: DateTime! @updatedAt
}

type GroupRole {
  canEdit: Boolean!
  canView: Boolean!
  createdAt: DateTime! @createdAt
  description: String!
  groupType: GroupType @relation(link: TABLE)
  id: ID! @id
  isLeader: Boolean
  name: String! @unique
  type: GROUP_ROLE_TYPE
  updatedAt: DateTime! @updatedAt
}

type GroupType {
  createdAt: DateTime! @createdAt
  description: String
  groups: [Group]
  id: ID! @id
  name: String! @unique
  roles: [GroupRole]
  updatedAt: DateTime! @updatedAt
}

type Location {
  city: String
  createdAt: DateTime! @createdAt
  id: ID! @id
  locationType: LOCATION_TYPE
  postalCode: String
  state: String
  street1: String
  street2: String
  updatedAt: DateTime! @updatedAt
}

type Person {
  createdAt: DateTime! @createdAt
  email: String
  firstName: String
  id: ID! @id
  lastName: String
  phoneNumbers: [PhoneNumber]
  scheduledTransactions: [FinancialScheduledTransaction]
  transactions: [FinancialTransaction]
  updatedAt: DateTime! @updatedAt
  user: User
}

type PhoneNumber {
  createdAt: DateTime! @createdAt
  id: ID! @id
  number: String!
  updatedAt: DateTime! @updatedAt
}

type User {
  createdAt: DateTime! @createdAt
  id: ID! @id
  person: Person! @relation(link: TABLE)
  updatedAt: DateTime! @updatedAt
}

enum ACH_TYPE {
  SAVINGS
  CHECKING
}

enum CREDIT_CARD {
  VISA
  MASTERCARD
  AMEX
  DISCOVER
}

enum CURRENCY_TYPE {
  ACH
  CC
}

enum GROUP_INVITE_STATUS {
  PENDING
  JOINED
}

enum GROUP_ROLE_TYPE {
  ADMIN
  OWNER
  MEMBER
}

enum LOCATION_TYPE {
  HOME
  WORK
}

enum TRANSACTION_FREQUENCY {
  DAILY
  MONTHLY
  BIWEEKLY
  CUSTOM
}

enum TRANSACTION_STATUS {
  PENDING
  SUCCESS
  FAILED
}"
`;

exports[`Introspects flavian/relational correctly 1`] = `
"type Post {
  author: User!
  content: String
  createdAt: DateTime!
  id: ID! @unique
  published: Boolean! @default(value: false)
  title: String!
  updatedAt: DateTime!
}

type User {
  createdAt: DateTime!
  email: String! @unique
  id: ID! @unique
  name: String
  posts: [Post]
  updatedAt: DateTime!
}"
`;

exports[`Introspects flavian/relational correctly 2`] = `
"type Post {
  author: User! @relation(link: TABLE)
  content: String
  createdAt: DateTime! @createdAt
  id: ID! @id
  published: Boolean! @default(value: false)
  title: String!
  updatedAt: DateTime! @updatedAt
}

type User {
  createdAt: DateTime! @createdAt
  email: String! @unique
  id: ID! @id
  name: String
  posts: [Post]
  updatedAt: DateTime! @updatedAt
}"
`;

exports[`Introspects oneSidedConnection/relational correctly 1`] = `
"type A {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: TypeWithId!
  y: TypeWithoutId!
}

type B {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: TypeWithId
  y: TypeWithoutId
}

type C {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: [TypeWithId]
  y: [TypeWithoutId]
}

type D {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: TypeWithId!
  y: TypeWithoutId!
}

type E {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: TypeWithId
  y: TypeWithoutId
}

type F {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: [TypeWithId]
  y: [TypeWithoutId]
}

type TypeWithId {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
}

type TypeWithoutId {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
}"
`;

exports[`Introspects oneSidedConnection/relational correctly 2`] = `
"type A {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: TypeWithId! @relation(link: TABLE)
  y: TypeWithoutId! @relation(link: TABLE)
}

type B {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: TypeWithId @relation(link: TABLE)
  y: TypeWithoutId @relation(link: TABLE)
}

type C {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: [TypeWithId]
  y: [TypeWithoutId]
}

type D {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: TypeWithId! @relation(link: TABLE)
  y: TypeWithoutId! @relation(link: TABLE)
}

type E {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: TypeWithId @relation(link: TABLE)
  y: TypeWithoutId @relation(link: TABLE)
}

type F {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: [TypeWithId]
  y: [TypeWithoutId]
}

type TypeWithId {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type TypeWithoutId {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}"
`;

exports[`Introspects prisma-3143/relational correctly 1`] = `
"type Story {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
}

type UserSpace {
  createdAt: DateTime!
  id: ID! @unique
  stories: [Story] @relation(name: \\"StoriesByUserSpace\\")
  updatedAt: DateTime!
}"
`;

exports[`Introspects prisma-3143/relational correctly 2`] = `
"type Story {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type UserSpace {
  createdAt: DateTime! @createdAt
  id: ID! @id
  stories: [Story] @relation(name: \\"StoriesByUserSpace\\")
  updatedAt: DateTime! @updatedAt
}"
`;

exports[`Introspects relations-4424/relational correctly 1`] = `
"type Customer {
  cartItems: [CustomerCartItem] @relation(name: \\"CustomerCartItemsRelation\\")
  createdAt: DateTime!
  emailId: String! @unique
  id: ID! @unique
  mobileNumber: String
  name: String
  uid: String! @unique
  updatedAt: DateTime!
  wishlists: [CustomerWishlist] @relation(name: \\"CustomerWishlistsRelation\\")
}

type CustomerCartItem {
  addedAtPrice: Int!
  createdAt: DateTime!
  customer: Customer @relation(name: \\"CustomerCartItemsRelation\\")
  id: ID! @unique
  product: Product @relation(name: \\"ProductsInCartRelation\\")
  quantity: Int!
  savedForLater: Boolean! @default(value: false)
  updatedAt: DateTime!
}

type CustomerWishlist {
  customer: Customer @relation(name: \\"CustomerWishlistsRelation\\")
  id: ID! @unique
  listName: String!
}

type Post {
  createdAt: DateTime!
  id: ID! @unique
  text: String
  updatedAt: DateTime!
}

type PostsProductsRelation @relationTable {
  post: Post!
  product: Product!
}

type Product {
  brand: String!
  cartedIn: [CustomerCartItem] @relation(name: \\"ProductsInCartRelation\\")
  createdAt: DateTime!
  description: String!
  id: ID! @unique
  name: String!
  ratingsDistribution: [Int]
  tags: [String]
  updatedAt: DateTime!
}

type WishlistedProductsRelation @relationTable {
  product: Product!
  wishlist: CustomerWishlist!
}"
`;

exports[`Introspects relations-4424/relational correctly 2`] = `
"type Customer {
  cartItems: [CustomerCartItem] @relation(name: \\"CustomerCartItemsRelation\\")
  createdAt: DateTime! @createdAt
  emailId: String! @unique
  id: ID! @id
  mobileNumber: String
  name: String
  uid: String! @unique
  updatedAt: DateTime! @updatedAt
  wishlists: [CustomerWishlist] @relation(name: \\"CustomerWishlistsRelation\\")
}

type CustomerCartItem {
  addedAtPrice: Int!
  createdAt: DateTime! @createdAt
  customer: Customer @relation(name: \\"CustomerCartItemsRelation\\")
  id: ID! @id
  product: Product @relation(name: \\"ProductsInCartRelation\\")
  quantity: Int!
  savedForLater: Boolean! @default(value: false)
  updatedAt: DateTime! @updatedAt
}

type CustomerWishlist {
  customer: Customer @relation(name: \\"CustomerWishlistsRelation\\")
  id: ID! @id
  listName: String!
}

type Post {
  createdAt: DateTime! @createdAt
  id: ID! @id
  text: String
  updatedAt: DateTime! @updatedAt
}

type PostsProductsRelation @relationTable {
  post: Post!
  product: Product!
}

type Product {
  brand: String!
  cartedIn: [CustomerCartItem] @relation(name: \\"ProductsInCartRelation\\")
  createdAt: DateTime! @createdAt
  description: String!
  id: ID! @id
  name: String!
  ratingsDistribution: [Int] @scalarList(strategy: RELATION)
  tags: [String] @scalarList(strategy: RELATION)
  updatedAt: DateTime! @updatedAt
}

type WishlistedProductsRelation @relationTable {
  product: Product!
  wishlist: CustomerWishlist!
}"
`;

exports[`Introspects scalars/relational correctly 1`] = `
"type LotsOfRequiredScalars {
  boolean: Boolean!
  createdAt: DateTime!
  dateTime: DateTime!
  float: Float!
  id: ID! @unique
  int: Int!
  json: Json!
  string: String!
  updatedAt: DateTime!
}

type LotsOfRequiredScalarsWithID {
  boolean: Boolean!
  createdAt: DateTime!
  dateTime: DateTime!
  float: Float!
  id: ID! @unique
  int: Int!
  json: Json!
  string: String!
  updatedAt: DateTime!
}

type LotsOfScalarLists {
  boolean: [Boolean]
  createdAt: DateTime!
  dateTime: [DateTime]
  float: [Float]
  id: ID! @unique
  int: [Int]
  json: [Json]
  string: [String]
  updatedAt: DateTime!
}

type LotsOfScalarListsWithID {
  boolean: [Boolean]
  createdAt: DateTime!
  dateTime: [DateTime]
  float: [Float]
  id: ID! @unique
  int: [Int]
  json: [Json]
  string: [String]
  updatedAt: DateTime!
}

type LotsOfScalars {
  boolean: Boolean
  createdAt: DateTime!
  dateTime: DateTime
  float: Float
  id: ID! @unique
  int: Int
  json: Json
  string: String
  updatedAt: DateTime!
}

type LotsOfScalarsWithID {
  boolean: Boolean
  createdAt: DateTime!
  dateTime: DateTime
  float: Float
  id: ID! @unique
  int: Int
  json: Json
  string: String
  updatedAt: DateTime!
}"
`;

exports[`Introspects scalars/relational correctly 2`] = `
"type LotsOfRequiredScalars {
  boolean: Boolean!
  createdAt: DateTime! @createdAt
  dateTime: DateTime!
  float: Float!
  id: ID! @id
  int: Int!
  json: Json!
  string: String!
  updatedAt: DateTime! @updatedAt
}

type LotsOfRequiredScalarsWithID {
  boolean: Boolean!
  createdAt: DateTime! @createdAt
  dateTime: DateTime!
  float: Float!
  id: ID! @id
  int: Int!
  json: Json!
  string: String!
  updatedAt: DateTime! @updatedAt
}

type LotsOfScalarLists {
  boolean: [Boolean] @scalarList(strategy: RELATION)
  createdAt: DateTime! @createdAt
  dateTime: [DateTime] @scalarList(strategy: RELATION)
  float: [Float] @scalarList(strategy: RELATION)
  id: ID! @id
  int: [Int] @scalarList(strategy: RELATION)
  json: [Json] @scalarList(strategy: RELATION)
  string: [String] @scalarList(strategy: RELATION)
  updatedAt: DateTime! @updatedAt
}

type LotsOfScalarListsWithID {
  boolean: [Boolean] @scalarList(strategy: RELATION)
  createdAt: DateTime! @createdAt
  dateTime: [DateTime] @scalarList(strategy: RELATION)
  float: [Float] @scalarList(strategy: RELATION)
  id: ID! @id
  int: [Int] @scalarList(strategy: RELATION)
  json: [Json] @scalarList(strategy: RELATION)
  string: [String] @scalarList(strategy: RELATION)
  updatedAt: DateTime! @updatedAt
}

type LotsOfScalars {
  boolean: Boolean
  createdAt: DateTime! @createdAt
  dateTime: DateTime
  float: Float
  id: ID! @id
  int: Int
  json: Json
  string: String
  updatedAt: DateTime! @updatedAt
}

type LotsOfScalarsWithID {
  boolean: Boolean
  createdAt: DateTime! @createdAt
  dateTime: DateTime
  float: Float
  id: ID! @id
  int: Int
  json: Json
  string: String
  updatedAt: DateTime! @updatedAt
}"
`;

exports[`Introspects simple/relational correctly 1`] = `
"type User {
  createdAt: DateTime!
  id: ID! @unique
  name: String!
  updatedAt: DateTime!
}"
`;

exports[`Introspects simple/relational correctly 2`] = `
"type User {
  createdAt: DateTime! @createdAt
  id: ID! @id
  name: String!
  updatedAt: DateTime! @updatedAt
}"
`;

exports[`Introspects todo/relational correctly 1`] = `
"type Todo {
  createdAt: DateTime!
  done: Boolean!
  id: ID! @unique
  text: String!
  updatedAt: DateTime!
  user: User!
}

type User {
  createdAt: DateTime!
  id: ID! @unique
  name: String!
  updatedAt: DateTime!
}"
`;

exports[`Introspects todo/relational correctly 2`] = `
"type Todo {
  createdAt: DateTime! @createdAt
  done: Boolean!
  id: ID! @id
  text: String!
  updatedAt: DateTime! @updatedAt
  user: User! @relation(link: TABLE)
}

type User {
  createdAt: DateTime! @createdAt
  id: ID! @id
  name: String!
  updatedAt: DateTime! @updatedAt
}"
`;

exports[`Introspects twoSidedConnection/relational correctly 1`] = `
"type AWithA {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: AWithIdWithA!
  y: AWithoutIdWithA!
}

type AWithB {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: BWithIdWithA!
  y: BWithoutIdWithA!
}

type AWithC {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: CWithIdWithA!
  y: CWithoutIdWithA!
}

type AWithIdWithA {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: AWithA!
}

type AWithIdWithB {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: BWithA!
}

type AWithIdWithC {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: CWithA!
}

type AWithoutIdWithA {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: AWithA!
}

type AWithoutIdWithB {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: BWithA!
}

type AWithoutIdWithC {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: CWithA!
}

type BWithA {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: AWithIdWithB
  y: AWithoutIdWithB
}

type BWithB {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: BWithIdWithB
  y: BWithoutIdWithB
}

type BWithC {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: CWithIdWithB
  y: CWithoutIdWithB
}

type BWithIdWithA {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: AWithB
}

type BWithIdWithB {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: BWithB
}

type BWithIdWithC {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: CWithB
}

type BWithoutIdWithA {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: AWithB
}

type BWithoutIdWithB {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: BWithB
}

type BWithoutIdWithC {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: CWithB
}

type CWithA {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: [AWithIdWithC]
  y: [AWithoutIdWithC]
}

type CWithB {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: [BWithIdWithC]
  y: [BWithoutIdWithC]
}

type CWithC {
  createdAt: DateTime!
  id: ID! @unique
  updatedAt: DateTime!
  x: [CWithIdWithC]
  y: [CWithoutIdWithC]
}

type CWithIdWithA {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: [AWithC]
}

type CWithIdWithB {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: [BWithC]
}

type CWithIdWithC {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: [CWithC]
}

type CWithoutIdWithA {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: [AWithC]
}

type CWithoutIdWithB {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: [BWithC]
}

type CWithoutIdWithC {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
  x: [CWithC]
}"
`;

exports[`Introspects twoSidedConnection/relational correctly 2`] = `
"type AWithA {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: AWithIdWithA!
  y: AWithoutIdWithA!
}

type AWithB {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: BWithIdWithA!
  y: BWithoutIdWithA!
}

type AWithC {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: CWithIdWithA! @relation(link: TABLE)
  y: CWithoutIdWithA! @relation(link: TABLE)
}

type AWithIdWithA {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: AWithA! @relation(link: TABLE)
}

type AWithIdWithB {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: BWithA! @relation(link: TABLE)
}

type AWithIdWithC {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: CWithA! @relation(link: TABLE)
}

type AWithoutIdWithA {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: AWithA! @relation(link: TABLE)
}

type AWithoutIdWithB {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: BWithA! @relation(link: TABLE)
}

type AWithoutIdWithC {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: CWithA! @relation(link: TABLE)
}

type BWithA {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: AWithIdWithB
  y: AWithoutIdWithB
}

type BWithB {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: BWithIdWithB
  y: BWithoutIdWithB
}

type BWithC {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: CWithIdWithB @relation(link: TABLE)
  y: CWithoutIdWithB @relation(link: TABLE)
}

type BWithIdWithA {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: AWithB @relation(link: TABLE)
}

type BWithIdWithB {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: BWithB @relation(link: TABLE)
}

type BWithIdWithC {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: CWithB @relation(link: TABLE)
}

type BWithoutIdWithA {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: AWithB @relation(link: TABLE)
}

type BWithoutIdWithB {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: BWithB @relation(link: TABLE)
}

type BWithoutIdWithC {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: CWithB @relation(link: TABLE)
}

type CWithA {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: [AWithIdWithC]
  y: [AWithoutIdWithC]
}

type CWithB {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: [BWithIdWithC]
  y: [BWithoutIdWithC]
}

type CWithC {
  createdAt: DateTime! @createdAt
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: [CWithIdWithC]
  y: [CWithoutIdWithC]
}

type CWithIdWithA {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: [AWithC]
}

type CWithIdWithB {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: [BWithC]
}

type CWithIdWithC {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: [CWithC]
}

type CWithoutIdWithA {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: [AWithC]
}

type CWithoutIdWithB {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: [BWithC]
}

type CWithoutIdWithC {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
  x: [CWithC]
}"
`;

exports[`Introspects withAndWithoutId/relational correctly 1`] = `
"type TypeWithId {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
}

type TypeWithoutId {
  createdAt: DateTime!
  field: String!
  id: ID! @unique
  updatedAt: DateTime!
}"
`;

exports[`Introspects withAndWithoutId/relational correctly 2`] = `
"type TypeWithId {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}

type TypeWithoutId {
  createdAt: DateTime! @createdAt
  field: String!
  id: ID! @id
  updatedAt: DateTime! @updatedAt
}"
`;

exports[`Introspects withoutCreatedAt/relational correctly 1`] = `
"type MultiRefToUsers {
  id: ID! @unique
  name: String
  users: [User]
}

type Post {
  author: User!
  content: String
  id: ID! @unique
  published: Boolean! @default(value: false)
  title: String!
}

type User {
  email: String! @unique
  id: ID! @unique
  name: String
  posts: [Post]
  createdAt: DateTime! @pgColumn(name: \\"signUpDate\\")
}"
`;

exports[`Introspects withoutCreatedAt/relational correctly 2`] = `
"type MultiRefToUsers {
  id: ID! @id
  name: String
  users: [User]
}

type Post {
  author: User! @relation(link: TABLE)
  content: String
  id: ID! @id
  published: Boolean! @default(value: false)
  title: String!
}

type User {
  email: String! @unique
  id: ID! @id
  name: String
  posts: [Post]
  signUpDate: DateTime! @createdAt
}"
`;
