// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`endpoint dialog local 1`] = `
Object {
  "input": Object {
    "choice": "local",
    "existingData": false,
    "folderName": "some-folder",
    "localClusterRunning": false,
    "loggedIn": false,
  },
  "result": Object {
    "cluster": Object {
      "baseUrl": "http://localhost:4466",
      "clusterSecret": undefined,
      "isPrivate": false,
      "local": true,
      "name": "local",
      "shared": false,
      "workspaceSlug": undefined,
    },
    "database": Object {
      "host": "postgres",
      "password": "prisma",
      "port": 5432,
      "type": "postgres",
      "user": "prisma",
    },
    "datamodel": "type User {
  id: ID! @id
  name: String!
}
",
    "dockerComposeYml": "version: '3'
services:
  prisma:
    restart: always
    ports:
    - \\"4466:4466\\"
    environment:
      PRISMA_CONFIG: |
        port: 4466
        # uncomment the next line and provide the env var PRISMA_MANAGEMENT_API_SECRET=my-secret to activate cluster security
        # managementApiSecret: my-secret
        databases:
          default:
            connector: postgres
            host: postgres
            rawAccess: true
            port: 5432
            migrations: true
  postgres:
    restart: always
    # Uncomment the next two lines to connect to your your database from outside the Docker environment, e.g. using a database GUI like Postico
    # ports:
    # - \\"5432:5432\\"
    environment:
      POSTGRES_USER: prisma
      POSTGRES_PASSWORD: prisma
    volumes:
      - postgres:/var/lib/postgresql/data
volumes:
  postgres:
",
    "endpoint": "http://localhost:4466",
    "generator": undefined,
    "localClusterRunning": false,
    "managementSecret": undefined,
    "newDatabase": true,
    "service": "default",
    "stage": "default",
    "workspace": undefined,
    "writeDockerComposeYml": true,
  },
}
`;

exports[`endpoint dialog local running 1`] = `
Object {
  "input": Object {
    "choice": "local",
    "existingData": false,
    "folderName": "some-folder",
    "localClusterRunning": true,
    "loggedIn": false,
  },
  "result": Object {
    "cluster": Object {
      "baseUrl": "http://localhost:4466",
      "clusterSecret": undefined,
      "isPrivate": false,
      "local": true,
      "name": "local",
      "shared": false,
      "workspaceSlug": undefined,
    },
    "database": Object {
      "host": "postgres",
      "password": "prisma",
      "port": 5432,
      "type": "postgres",
      "user": "prisma",
    },
    "datamodel": "type User {
  id: ID! @id
  name: String!
}
",
    "dockerComposeYml": "version: '3'
services:
  prisma:
    restart: always
    ports:
    - \\"4466:4466\\"
    environment:
      PRISMA_CONFIG: |
        port: 4466
        # uncomment the next line and provide the env var PRISMA_MANAGEMENT_API_SECRET=my-secret to activate cluster security
        # managementApiSecret: my-secret
        databases:
          default:
            connector: postgres
            host: postgres
            rawAccess: true
            port: 5432
            migrations: true
  postgres:
    restart: always
    # Uncomment the next two lines to connect to your your database from outside the Docker environment, e.g. using a database GUI like Postico
    # ports:
    # - \\"5432:5432\\"
    environment:
      POSTGRES_USER: prisma
      POSTGRES_PASSWORD: prisma
    volumes:
      - postgres:/var/lib/postgresql/data
volumes:
  postgres:
",
    "endpoint": "http://localhost:4466",
    "generator": undefined,
    "localClusterRunning": true,
    "managementSecret": undefined,
    "newDatabase": true,
    "service": "default",
    "stage": "default",
    "workspace": undefined,
    "writeDockerComposeYml": true,
  },
}
`;

exports[`init choose local 1`] = `
Object {
  "datamodel.prisma": "type User {
  id: ID! @unique
  name: String!
}
",
  "docker-compose.yml": "version: '3'
services:
  prisma:
    restart: always
    ports:
    - \\"4466:4466\\"
    environment:
      PRISMA_CONFIG: |
        port: 4466
        # uncomment the next line and provide the env var PRISMA_MANAGEMENT_API_SECRET=my-secret to activate cluster security
        # managementApiSecret: my-secret
        databases:
          default:
            connector: postgres
            host: postgres
            rawAccess: true
            port: 5432
            migrations: true
  postgres:
    restart: always
    environment:
      POSTGRES_USER: prisma
      POSTGRES_PASSWORD: prisma
    volumes:
      - postgres:/var/lib/postgresql/data
volumes:
  postgres:
",
  "prisma.yml": "endpoint: http://localhost:4466
datamodel: datamodel.prisma",
}
`;

exports[`init choose local 2`] = `
"
Created 3 new files:                                                                          

  prisma.yml           Prisma service definition
  datamodel.prisma    GraphQL SDL-based datamodel (foundation for database)
  docker-compose.yml   Docker configuration file

Next steps:

  1. Start your Prisma server: docker-compose up -d
  2. Deploy your Prisma service: prisma deploy
  3. Read more about Prisma server:
     http://bit.ly/prisma-server-overview
"
`;

exports[`init choose local 3`] = `""`;

exports[`init test project 1`] = `Object {}`;

exports[`init test project 2`] = `""`;

exports[`init test project 3`] = `""`;
